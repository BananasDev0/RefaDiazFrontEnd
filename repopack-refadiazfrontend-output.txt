================================================================
REPOPACK OUTPUT FILE
================================================================

This file was generated by Repopack on: 2025-05-25T04:45:16.165Z

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This header section
2. Multiple file entries, each consisting of:
   a. A separator line (================)
   b. The file path (File: path/to/file)
   c. Another separator line
   d. The full contents of the file
   e. A blank line

Usage Guidelines:
-----------------
1. This file should be treated as read-only. Any changes should be made to the
   original repository files, not this packed version.
2. When processing this file, use the separators and "File:" markers to
   distinguish between different files in the repository.
3. Be aware that this file may contain sensitive information. Handle it with
   the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation.
- Code comments have been removed.


For more information about Repopack, visit: https://github.com/yamadashy/repopack

Additional User-Provided Header:
--------------------------------
Custom header information for the packed file.

================================================================
Repository Files
================================================================

================
File: .env.development
================
VITE_API_REFA_BASE_PATH = http://127.0.0.1:54321/functions/v1
VITE_SUPABASE_URL = http://127.0.0.1:54321
VITE_SUPABASE_KEY = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0

================
File: .env.production
================
VITE_API_REFA_BASE_PATH = https://lgebdhuewexxbvzeohkz.supabase.co/functions/v1
VITE_SUPABASE_URL = https://lgebdhuewexxbvzeohkz.supabase.co
VITE_SUPABASE_KEY = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImxnZWJkaHVld2V4eGJ2emVvaGt6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzkwMzMwMzQsImV4cCI6MjA1NDYwOTAzNH0.7460WcfqeWUldzLcbTnPgMo3E8YmpJ1jSh7hGseuo74

================
File: .eslintrc.cjs
================
module.exports = {
  root: true,
  env: { browser: true, es2020: true },
  extends: [
    'eslint:recommended',
    'plugin:react/recommended',
    'plugin:react/jsx-runtime',
    'plugin:react-hooks/recommended',
  ],
  ignorePatterns: ['dist', '.eslintrc.cjs'],
  parserOptions: { ecmaVersion: 'latest', sourceType: 'module' },
  settings: { react: { version: '18.2' } },
  plugins: ['react-refresh'],
  rules: {
    "react/prop-types": 0,
    'react/jsx-no-target-blank': 'off',
    'react-refresh/only-export-components': [
      'warn',
      { allowConstantExport: true },
    ],
    
  },
}

================
File: .github/workflows/dev.yml
================
name: Build and Deploy
on:
  push:
    branches:
      - dev
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: DEV
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '16'
    - name: Install dependencies
      run: npm install
    - name: Set environment variables
      run: echo "${{ secrets.ENV_CONFIG }}" > .env.development
    - name: Build the application
      run: npm run build -- --mode development
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2
    - name: Deploy to S3
      run: aws s3 sync ./dist s3://refadiazapp --delete

================
File: README.md
================
# React + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh deploy xd

\\node_modules
\Archivos de los frameworks instalados
\\public 
\Archivos estaticos, como imagenes, fuentes, etc
\\Src
\Archivos que estructuran toda la aplicacion
\\\\components // Aqui se crearan los componentes del mui
\\\\pages // Aqui se crearan todas las paginas
\\\\services // Aqui estara toda la informacion relacionada con la logica del sistema
\\\\store //Acciones Redux // borrado por no hayar un uso 
\\\\styles // Aqui se encontraran todos los estilos
\\\\api // Aqui se consumiran los endpoints
\\\\App.jsx // Aqui se enrutaran los links de la pagina

================
File: constants.js
================
export const TITLE_PAGE_HOME_WELCOME = "Bienvenido a mi aplicación";
export const BODY_PAGE_HOME = "Esta es la página de inicio de mi aplicación. Puedes comenzar a explorar aquí.";
export const BUTTON_LBLCOMENZAR = "Comenzar"

================
File: docker-composer.yml
================
version: '3.8'
services:
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
  web:
    build:
      context: ./web
      dockerfile: Dockerfile
    ports:
      - "80:80"

================
File: dockerfile
================
# Build stage
FROM node:18-alpine AS build

WORKDIR /app

# Copy package.json and package-lock.json first to leverage Docker cache
COPY package*.json ./

# Install dependencies
RUN npm install

# Copy remaining files
COPY . .

# Build the project
RUN npm run build

# Verify that the dist directory exists and contains files
RUN ls -la /app/dist

# Production stage
FROM nginx:alpine

# Remove default nginx website
RUN rm -rf /usr/share/nginx/html/*

# Copy the build output to the Nginx HTML directory
COPY --from=build /app/dist /usr/share/nginx/html

# Expose the default Nginx port
EXPOSE 80

# Add a health check (optional)
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD curl -f http://localhost/ || exit 1

# Start Nginx
CMD ["nginx", "-g", "daemon off;"]

================
File: index.html
================
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, viewport-fit=cover">
    <link rel="stylesheet" href="./src/styles/MainStructure.css">
    <style>
      body {
        padding-left: env(safe-area-inset-left);
        padding-right: env(safe-area-inset-right);
      }
    </style>
    <title>App Diaz</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/main.jsx"></script>
  </body>
</html>

================
File: main.jsx
================
import ReactDOM from 'react-dom/client';
import App from './src/App';
ReactDOM.createRoot(document.getElementById('root')).render(
  <App />,
);

================
File: package.json
================
{
  "name": "frontendrefaccionariadiaz",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite --host",
    "build": "vite build",
    "lint": "eslint . --ext js,jsx --report-unused-disable-directives --max-warnings 0",
    "preview": "vite preview"
  },
  "dependencies": {
    "@emotion/react": "^11.11.3",
    "@emotion/styled": "^11.11.0",
    "@mui/icons-material": "^5.15.10",
    "@mui/material": "^5.15.10",
    "@mui/x-data-grid": "^6.19.5",
    "@mui/x-date-pickers": "^6.19.6",
    "@supabase/supabase-js": "^2.49.1",
    "axios": "^1.6.7",
    "dayjs": "^1.11.10",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-photoswipe-gallery": "^3.0.1",
    "react-router-dom": "^6.22.1",
    "react-transition-group": "^4.4.5",
    "uuid": "^9.0.1"
  },
  "devDependencies": {
    "@types/react": "^18.2.55",
    "@types/react-dom": "^18.2.19",
    "@vitejs/plugin-react": "^4.2.1",
    "eslint": "^8.56.0",
    "eslint-plugin-react": "^7.33.2",
    "eslint-plugin-react-hooks": "^4.6.0",
    "eslint-plugin-react-refresh": "^0.4.5",
    "vite": "^5.1.0"
  },
  "optionalDependencies": {
    "@rollup/rollup-linux-x64-gnu": "4.9.5"
  }
}

================
File: public/vite.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>

================
File: repopack.config.json
================
{
    "output": {
      "filePath": "repopack-refadiazfrontend-output.txt",
      "headerText": "Custom header information for the packed file.",
      "removeComments": true,
      "topFilesLength": 5
    },
    "ignore": {
      "useDefaultPatterns": true,
      "customPatterns": ["*.log"]
    }
  }

================
File: src/App.jsx
================
import { BrowserRouter, Routes, Route, Navigate } from 'react-router-dom';
import Home from './pages/Home';
import Login from './pages/Login';
import { AuthGuard } from './components/AuthGuard';
import { MobileProvider } from './components/MobileProvider';
import { SnackbarProvider } from './components/SnackbarContext';
import { StorageAdapter } from './services/StorageAdapter';
import { useEffect } from 'react';
const AppWithStorageConfig = () => {
  useEffect(() => {
    StorageAdapter.setProvider(StorageAdapter.PROVIDER.SUPABASE);
    console.log('StorageAdapter configurado para usar Supabase');
  }, []);
  return (
    <MobileProvider>
      <SnackbarProvider>
        <BrowserRouter>
          <Routes>
            <Route path="/" element={<Navigate to="/home" />} />
            <Route path="/home/*" element={<AuthGuard><Home /></AuthGuard>} />
            <Route path="/login" element={<Login />} />
          </Routes>
        </BrowserRouter>
      </SnackbarProvider>
    </MobileProvider>
  );
};
export default function App() {
  return <AppWithStorageConfig />;
}

================
File: src/components/AppLayout.jsx
================

import { useState } from 'react';
import { styled } from '@mui/material/styles';
import { Box, CssBaseline } from '@mui/material';
import CustomToolBar from './CustomToolBar';
import ResponsiveDrawer from './ResponsiveDrawer/ResponsiveDrawer';
import { MobileProvider } from './MobileProvider';
import { AppBarStyled, ContentHeaderStyled } from '../styles/layoutStyles';
const MainContent = styled('main')(({ theme }) => ({
  flexGrow: 1,
  padding: theme.spacing(3),
}));
const AppLayout = ({ children, navigate }) => {
  const [drawerOpen, setDrawerOpen] = useState(false);
  const handleDrawerOpen = () => setDrawerOpen(true);
  const handleDrawerClose = () => setDrawerOpen(false);
  return (
    <MobileProvider>
      <Box sx={{ display: 'flex' }}>
        <CssBaseline />
        <AppBarStyled position="fixed" open={drawerOpen}>
          <CustomToolBar handleDrawerOpen={handleDrawerOpen} open={drawerOpen} />
        </AppBarStyled>
        <ResponsiveDrawer open={drawerOpen} handleDrawerClose={handleDrawerClose} navigate={navigate} />
        <MainContent>
          <ContentHeaderStyled />
          {children}
        </MainContent>
      </Box>
    </MobileProvider>
  );
};
export default AppLayout;

================
File: src/components/AuthGuard.jsx
================
import { useEffect, useState } from 'react';
import { Navigate } from 'react-router-dom';
import { supabase } from '../services/supabaseClient';
import { CircularProgress, Box } from '@mui/material';
export const AuthGuard = ({ children }) => {
  const [isLoading, setIsLoading] = useState(true);
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  useEffect(() => {
    const { data: authListener } = supabase.auth.onAuthStateChange((event, session) => {
      if (session) {
        setIsAuthenticated(true);
      } else {
        setIsAuthenticated(false);
      }
      setIsLoading(false);
    });
    return () => {
      authListener.subscription.unsubscribe();
    };
  }, []);
  if (isLoading) {
    return (
      <Box
        sx={{
          display: 'flex',
          justifyContent: 'center',
          alignItems: 'center',
          height: '100vh',
        }}
      >
        <CircularProgress />
      </Box>
    );
  }
  if (!isAuthenticated) return <Navigate to="/login" />;
  return children;
};

================
File: src/components/Copyright.jsx
================
import { Typography, Link } from '@mui/material';
const Copyright = (props) => {
  return (
    <Typography variant="body2" color="text.secondary" align="center" {...props}>
      {'Copyright © '}
      <Link color="inherit" href="">
        Radiadores Diaz
      </Link>{' '}
      {new Date().getFullYear()}
      {'.'}
    </Typography>
  );
};
export default Copyright;

================
File: src/components/CustomInput.jsx
================
import * as React from 'react';
import { Input as BaseInput } from '@mui/base/Input';
import { styled } from '@mui/system';
const CustomInput = React.forwardRef(function CustomInput(props, ref) {
  return <BaseInput slots={{ input: InputElement }} {...props} ref={ref} />;
});
const blue = {
  100: '#DAECFF',
  200: '#80BFFF',
  400: '#3399FF',
  500: '#007FFF',
  600: '#0072E5',
};
const grey = {
  50: '#F3F6F9',
  100: '#E5EAF2',
  200: '#DAE2ED',
  300: '#C7D0DD',
  400: '#B0B8C4',
  500: '#9DA8B7',
  600: '#6B7A90',
  700: '#434D5B',
  800: '#303740',
  900: '#1C2025',
};
const InputElement = styled('input')(
  ({ theme }) => `
  width: 100%;
  font-family: 'IBM Plex Sans', sans-serif;
  font-size: 0.875rem;
  font-weight: 400;
  line-height: 1.5;
  padding: 8px 12px;
  border-radius: 8px;
  color: ${theme.palette.mode === 'dark' ? grey[300] : grey[900]};
  background: ${theme.palette.mode === 'dark' ? grey[900] : '#fff'};
  border: 1px solid ${theme.palette.mode === 'dark' ? grey[700] : grey[200]};
  box-shadow: 0px 2px 2px ${theme.palette.mode === 'dark' ? grey[900] : grey[50]};
  &:hover {
    border-color: ${blue[400]};
  }
  &:focus {
    border-color: ${blue[400]};
    box-shadow: 0 0 0 1px ${theme.palette.mode === 'dark' ? blue[600] : blue[200]};
  }
  // firefox
  &:focus-visible {
    outline: 0;
  }
`,
);
export default CustomInput;

================
File: src/components/CustomSearchBar.jsx
================
import React, { useState, useEffect, useCallback } from 'react';
import { Select, MenuItem } from '@mui/material';
import { useNavigate, useLocation } from 'react-router-dom';
import CustomInput from './CustomInput';
import { useProductSelectionContext } from '../pages/Products/ProductSelectionContext';
import { useProductSearchContext } from '../pages/Products/ProductSearchContext';
import { ProductTypesNamesEsp, SearchOptions } from '../pages/Products/ProductsConstants';
import { PATHS } from '../constants/paths';
const CustomSearchBar = () => {
  const navigate = useNavigate();
  const location = useLocation();
  const { productType, clearSelection } = useProductSelectionContext();
  const { searchTerm, setSearchTerm, searchOption, handleSearchOptionChange } = useProductSearchContext();
  const [placeholder, setPlaceholder] = useState('');
  // Memoizar las funciones para evitar re-renderizados innecesarios
  const handleSearchChange = useCallback((e) => {
    const newSearchTerm = e.target.value;
    setSearchTerm(newSearchTerm);
  }, [setSearchTerm]);
  const handleOptionChange = useCallback((option) => {
    let path;
    switch (option) {
      case SearchOptions.BRANDS:
        path = PATHS.BRANDS;
        break;
      case SearchOptions.MODELS:
        path = PATHS.MODELS;
        break;
      case SearchOptions.PRODUCTS:
        path = PATHS.PRODUCTS_LIST;
        break;
      default:
        return;
    }
    clearSelection(path)
    navigate(path);
  }, [handleSearchOptionChange, navigate]);
  // Actualizar placeholder basado en searchOption y productType
  useEffect(() => {
    const productVerbiage = ProductTypesNamesEsp[productType] || 'Productos';
    switch (searchOption) {
      case SearchOptions.BRANDS:
        setPlaceholder('Buscar marcas...');
        break;
      case SearchOptions.MODELS:
        setPlaceholder('Buscar modelos...');
        break;
      default:
        setPlaceholder(`Buscar ${productVerbiage.toLowerCase()}...`);
    }
  }, [searchOption, productType]);
  useEffect(() => {
    const updateSearchOptionFromRoute = (pathname) => {
      let newSearchOption;
      if (pathname == PATHS.BRANDS) {
        newSearchOption = SearchOptions.BRANDS;
      } else if (pathname == PATHS.MODELS) {
        newSearchOption = SearchOptions.MODELS;
      } else if (pathname == PATHS.PRODUCTS_LIST) {
        newSearchOption = SearchOptions.PRODUCTS;
      }
      if (newSearchOption && newSearchOption !== searchOption) {
        handleSearchOptionChange(newSearchOption);
      }
    };
    updateSearchOptionFromRoute(location.pathname);
  }, [location.pathname]);
  return (
    <div style={{ display: 'flex', alignItems: 'center', marginTop: '10px', marginBottom: '10px' }}>
      <Select
        value={searchOption}
        onChange={(event) => handleOptionChange(event.target.value)}
        displayEmpty
        inputProps={{ 'aria-label': 'Buscar por' }}
        sx={{ height: '35px', marginRight: '5px' }}
      >
        <MenuItem value={SearchOptions.BRANDS}>Marcas</MenuItem>
        <MenuItem value={SearchOptions.MODELS}>Modelos</MenuItem>
        <MenuItem value={SearchOptions.PRODUCTS}>{ProductTypesNamesEsp[productType] || 'Productos'}</MenuItem>
      </Select>
      <div style={{ flex: 1 }}>
        <CustomInput
          placeholder={placeholder}
          value={searchTerm}
          onChange={handleSearchChange}
        />
      </div>
    </div>
  );
};
export default React.memo(CustomSearchBar, () => true);

================
File: src/components/CustomSelectWithAdd.jsx
================
import { useState } from 'react';
import { Button, Select, MenuItem, Dialog, DialogActions, DialogContent, DialogTitle, TextField, FormControl, InputLabel } from '@mui/material';
const CustomSelectWithAdd = ({
  elements,
  setElements,
  label,
  selectedItem,
  setSelectedItem,
  onItemAdded,
  dialogFields
}) => {
  const [open, setOpen] = useState(false);
  const [formValues, setFormValues] = useState({});
  const [errors, setErrors] = useState({});
  const handleOpen = () => setOpen(true);
  const handleClose = () => {
    setOpen(false);
    setFormValues({});
    setErrors({});
  };
  const handleSelectChange = (event) => {
    const selected = elements.find(item => item.id === event.target.value);
    if (selected) {
      setSelectedItem(selected);
    }
  };
  const validateForm = () => {
    const newErrors = {};
    let isValid = true;
    dialogFields.forEach(field => {
      if (field.required && (!formValues[field.name] || formValues[field.name].trim() === '')) {
        newErrors[field.name] = 'Este campo es obligatorio';
        isValid = false;
      }
    });
    setErrors(newErrors);
    return isValid;
  };
  const handleAddNewItem = async () => {
    if (!validateForm()) {
      return;
    }
    const newItemWithoutId = { ...formValues };
    if (onItemAdded) {
      const newItemId = await onItemAdded(elements, newItemWithoutId);
      const newItemWithId = { id: newItemId, ...newItemWithoutId };
      const newElements = [...elements, newItemWithId];
      setElements(newElements);
      setSelectedItem(newItemWithId);
    } else {
      console.error('onItemAdded is not defined');
    }
    setFormValues({});
    setErrors({});
    handleClose();
  };
  const handleInputChange = (event) => {
    const { name, value } = event.target;
    setFormValues({
      ...formValues,
      [name]: value
    });
    if (errors[name]) {
      setErrors({
        ...errors,
        [name]: null
      });
    }
  };
  return (
    <FormControl fullWidth>
      <InputLabel id="custom-select-label">{label}</InputLabel>
      <Select
        labelId="custom-select-label"
        id="custom-select"
        value={selectedItem?.id || ''}
        label={label}
        onChange={handleSelectChange}
        fullWidth
      >
        {elements.map((item, index) => (
          <MenuItem key={index} value={item.id}>{item.name}</MenuItem>
        ))}
        <MenuItem style={{ padding: 0 }}>
          <Button
            fullWidth
            color="primary"
            onClick={handleOpen}
            sx={{ justifyContent: 'flex-start', width: '100%' }}
          >
            Añadir nuevo elemento
          </Button>
        </MenuItem>
      </Select>
      <Dialog open={open} onClose={handleClose}>
        <DialogTitle>Añadir un Nuevo Elemento</DialogTitle>
        <DialogContent>
          {dialogFields.map((field) => (
            <TextField
              key={field.name}
              autoFocus={field.name === dialogFields[0].name}
              name={field.name}
              margin="dense"
              id={field.name}
              label={field.label || field.name}
              type={field.type || 'text'}
              fullWidth
              variant="standard"
              value={formValues[field.name] || ''}
              onChange={handleInputChange}
              required={field.required}
              error={Boolean(errors[field.name])}
              helperText={errors[field.name]}
            />
          ))}
        </DialogContent>
        <DialogActions>
          <Button onClick={handleClose}>Cancelar</Button>
          <Button onClick={handleAddNewItem}>Añadir</Button>
        </DialogActions>
      </Dialog>
    </FormControl>
  );
};
CustomSelectWithAdd.defaultProps = {
  initialItems: [],
  label: 'Elige o añade una opción',
  placeholder: 'Nuevo Elemento',
  dialogFields: []
};
export default CustomSelectWithAdd;

================
File: src/components/CustomToolBar.jsx
================
import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { Toolbar, IconButton, Typography, Menu, MenuItem, Box, Divider } from '@mui/material';
import MenuIcon from '@mui/icons-material/Menu';
import AccountCircle from '@mui/icons-material/AccountCircle';
import Logo from '../assets/IMAGEN SIN FONDO CIRCULO.png';
import { supabase } from '../services/supabaseClient';
import { useSnackbar } from '../components/SnackbarContext';
export default function CustomToolBar({ handleDrawerOpen, open }) {
  const [anchorEl, setAnchorEl] = useState(null);
  const [userName, setUserName] = useState('');
  const [userRole, setUserRole] = useState('');
  const { openSnackbar } = useSnackbar();
  const navigate = useNavigate(); // Añadimos useNavigate para redirigir
  useEffect(() => {
    const userInfo = JSON.parse(localStorage.getItem('user'));
    if (userInfo) {
      setUserName(userInfo.person.name);
      setUserRole(userInfo.role.description);
    }
  }, []);
  const handleProfileMenuOpen = (event) => {
    setAnchorEl(event.currentTarget);
  };
  const handleMenuClose = () => {
    setAnchorEl(null);
  };
  const handleLogOut = async () => {
    try {
      const { error } = await supabase.auth.signOut();
      if (error) throw error;
      localStorage.removeItem('user');
      localStorage.removeItem('token');
      handleMenuClose();
      openSnackbar('Sesión cerrada exitosamente', 'success');
      navigate('/login');
    } catch (error) {
      handleMenuClose();
      openSnackbar(`Error al cerrar sesión: ${error.message}`, 'error');
    }
  };
  return (
    <Toolbar>
      <IconButton
        color="inherit"
        aria-label="open drawer"
        onClick={handleDrawerOpen}
        edge="start"
        sx={{
          marginRight: '36px',
          ...(open && { display: 'none' }),
        }}
      >
        <MenuIcon />
      </IconButton>
      <img
        src={Logo}
        alt="Logotipo Refaccionaria Diaz"
        style={{ width: 50, height: 'auto', marginBottom: 10, marginRight: 10, marginTop: 10 }}
      />
      <Typography variant="h6" noWrap component="div" sx={{ flexGrow: 1 }}>
        Radiadores Diaz
      </Typography>
      <IconButton
        edge="end"
        aria-label="account of current user"
        aria-controls="menu-appbar"
        aria-haspopup="true"
        onClick={handleProfileMenuOpen}
        color="inherit"
        sx={{ fontSize: '2rem' }}
      >
        <AccountCircle sx={{ fontSize: '2rem' }} />
      </IconButton>
      <Menu
        id="menu-appbar"
        anchorEl={anchorEl}
        anchorOrigin={{
          vertical: 'top',
          horizontal: 'right',
        }}
        keepMounted
        transformOrigin={{
          vertical: 'top',
          horizontal: 'right',
        }}
        open={Boolean(anchorEl)}
        onClose={handleMenuClose}
      >
        <Box sx={{ px: 3, py: 2, textAlign: 'center' }}>
          <Typography variant="subtitle1" sx={{ fontWeight: 'bold' }}>
            {userName}
          </Typography>
          <Typography variant="body2" color="text.secondary" sx={{ mt: 0.5 }}>
            {userRole}
          </Typography>
        </Box>
        <Divider />
        <MenuItem onClick={handleLogOut} sx={{ justifyContent: 'center', mt: 1 }}>
          Cerrar sesión
        </MenuItem>
      </Menu>
    </Toolbar>
  );
}

================
File: src/components/DrawerHeader.jsx
================
import { styled, useTheme } from '@mui/material/styles';
import IconButton from '@mui/material/IconButton';
import ChevronLeftIcon from '@mui/icons-material/ChevronLeft';
import ChevronRightIcon from '@mui/icons-material/ChevronRight';
const Header = styled('div')(({ theme }) => ({
  display: 'flex',
  alignItems: 'center',
  justifyContent: 'space-between',
  padding: theme.spacing(0, 1),
  ...theme.mixins.toolbar,
}));
const DrawerHeader = ({ handleDrawerClose }) => {
  const theme = useTheme();
  return (
    <Header>
      <IconButton onClick={handleDrawerClose}> {}
        {theme.direction === 'rtl' ? <ChevronRightIcon /> : <ChevronLeftIcon />}
      </IconButton>
    </Header>
  );
};
export default DrawerHeader;

================
File: src/components/ElementList.jsx
================
import List from '@mui/material/List';
import ProtectedListItem from './ResponsiveDrawer/ProtectedListItem';
export default function ElementList({ setComponent, open, menuItems }) {
  const handleItemClick = (component) => {
    setComponent(component);
  };
  return (
    <List>
      {menuItems.map((item) => (
        <ProtectedListItem
          key={item.text}
          text={item.text}
          icon={item.icon}
          roles={item.roles}
          handleClick={() => handleItemClick(item.path)}
          open={open}
        />
      ))}
    </List>
  );
}

================
File: src/components/ExpandableCard.jsx
================
import { useState, useRef, useEffect } from 'react';
import { Card, CardContent, CardActions, CardHeader, Collapse, IconButton } from '@mui/material';
import ExpandMoreIcon from '@mui/icons-material/ExpandMore';
import { styled } from '@mui/material/styles';
const ExpandMore = styled((props) => {
  const { ...other } = props;
  return <IconButton {...other} />;
})(({ theme, expand }) => ({
  transform: !expand ? 'rotate(0deg)' : 'rotate(180deg)',
  marginLeft: 'auto',
  transition: theme.transitions.create('transform', {
    duration: theme.transitions.duration.shortest,
  }),
}));
const ExpandableCard = ({ title, children }) => {
  const [expanded, setExpanded] = useState(false);
  const cardRef = useRef(null);
  const handleExpandClick = () => {
    setExpanded(!expanded);
  };
  useEffect(() => {
    if (expanded && cardRef.current) {
      cardRef.current.scrollIntoView({ behavior: 'smooth', block: 'start' });
    }
  }, [expanded]);
  return (
    <Card sx={{ maxWidth: '95%', margin: 'auto', mt: 2 }} ref={cardRef}>
      <CardHeader title={title} />
      <CardActions disableSpacing>
        <ExpandMore
          onClick={handleExpandClick}
          aria-expanded={expanded}
          aria-label="mostrar más"
        >
          <ExpandMoreIcon />
        </ExpandMore>
      </CardActions>
      <Collapse in={expanded} timeout="auto" unmountOnExit>
        <CardContent>
          {children}
        </CardContent>
      </Collapse>
    </Card>
  );
};
export default ExpandableCard;

================
File: src/components/GenericNavigationBar.jsx
================
import { Breadcrumbs as MuiBreadcrumbs, Link, Typography } from '@mui/material';
import { useLocation, Link as RouterLink } from 'react-router-dom';
import { PATHS, FILTERED_SEGMENTS } from '../constants/paths';
const staticTitles = {
    [PATHS.PROVIDERS]: "Proveedores",
    [PATHS.USERS]: "Gestión de usuarios",
    [PATHS.ADD_USER]: "Agregar usuario",
};
const GenericNavigationBar = () => {
    const location = useLocation();
    const originalPathnames = location.pathname.split('/').filter((segment) => segment);
    return (
        <MuiBreadcrumbs aria-label="breadcrumb" sx={{ pt: 1, pb: 1 }}>
            {originalPathnames.map((value, index) => {
                const originalPathSegments = originalPathnames.slice(0, index + 1);
                const to = `/${originalPathSegments.join('/')}`;
                const isFiltered = FILTERED_SEGMENTS.includes(value.toLowerCase());
                if (isFiltered) return null;
                let title = staticTitles[to] || value;
                const isLastVisible = index === originalPathnames.length - 1;
                return isLastVisible ? (
                    <Typography color="text.primary" key={to} sx={{ fontSize: '1.1rem' }}>
                        {title}
                    </Typography>
                ) : (
                    <Link component={RouterLink} to={to} key={to} sx={{ fontSize: '1.1rem' }}>
                        {title}
                    </Link>
                );
            })}
        </MuiBreadcrumbs>
    );
};
export default GenericNavigationBar;

================
File: src/components/ImageGallery.jsx
================
import { Box, Grid, Paper, IconButton } from '@mui/material';
import CloseIcon from '@mui/icons-material/Close';
import { Gallery, Item } from 'react-photoswipe-gallery';
import 'photoswipe/dist/photoswipe.css';
import { useEffect, useState } from 'react';
import { getBase64ImageDimensions } from '../util/generalUtils';
const ImageGallery = ({ images, onImageDeleted, readOnly = false }) => {
    const [imageDimensions, setImageDimensions] = useState([]);
    useEffect(() => {
        const fetchDimensions = async () => {
            const dimensionsPromises = images.map(image => getBase64ImageDimensions(image));
            const dimensions = await Promise.all(dimensionsPromises);
            setImageDimensions(dimensions);
        };
        fetchDimensions();
    }, [images]);
    const handleDeleteImage = (index) => {
        if (!readOnly) {
            onImageDeleted(index);
        }
    };
    return (
        <Gallery options={{
            wheelToZoom: true,
        }}>
            <Grid container spacing={2} justifyContent="center" alignItems="center">
                {}
                {images.slice(0, 1).map((image, index) => (
                    <Grid item xs={12} key={index} display="flex" justifyContent="center">
                        <Box sx={{ position: 'relative', display: 'inline-block' }}>
                            {imageDimensions[index] && (
                                <Item
                                    original={image}
                                    thumbnail={image}
                                    width={imageDimensions[index].width}
                                    height={imageDimensions[index].height}
                                >
                                    {({ ref, open }) => (
                                        <Box
                                            ref={ref}
                                            onClick={open}
                                            component="img"
                                            src={image}
                                            sx={{
                                                maxWidth: '100%',
                                                maxHeight: '400px',
                                                width: 'auto',
                                                height: 'auto',
                                                borderRadius: '4px',
                                                cursor: 'pointer',
                                            }}
                                        />
                                    )}
                                </Item>
                            )}
                            {!readOnly && (
                                <IconButton
                                    onClick={() => handleDeleteImage(index)}
                                    sx={{ position: 'absolute', top: 0, right: 0, color: 'error.main' }}
                                >
                                    <CloseIcon />
                                </IconButton>
                            )}
                        </Box>
                    </Grid>
                ))}
                {}
                <Grid item xs={12} container spacing={2} justifyContent="center">
                    {images.slice(1).map((image, index) => (
                        <Grid item key={index}>
                            <Box sx={{ position: 'relative', width: '120px', height: '120px' }}>
                                <Paper elevation={2} sx={{ width: '100%', height: '100%', overflow: 'hidden', display: 'flex', justifyContent: 'center', alignItems: 'center' }}>
                                    {imageDimensions[index + 1] && (
                                        <Item
                                            original={image}
                                            thumbnail={image}
                                            width={imageDimensions[index + 1].width}
                                            height={imageDimensions[index + 1].height}
                                        >
                                            {({ ref, open }) => (
                                                <Box
                                                    ref={ref}
                                                    onClick={open}
                                                    component="img"
                                                    src={image}
                                                    sx={{
                                                        width: 'auto',
                                                        height: '100%',
                                                        borderRadius: '4px',
                                                        cursor: 'pointer',
                                                    }}
                                                />
                                            )}
                                        </Item>
                                    )}
                                    {!readOnly && (
                                        <IconButton
                                            onClick={() => handleDeleteImage(index + 1)}
                                            sx={{ position: 'absolute', top: 0, right: 0, color: 'error.main' }}
                                        >
                                            <CloseIcon />
                                        </IconButton>
                                    )}
                                </Paper>
                            </Box>
                        </Grid>
                    ))}
                </Grid>
            </Grid>
        </Gallery>
    );
};
export default ImageGallery;

================
File: src/components/ItemCard.jsx
================
import { useState } from 'react';
import Card from '@mui/material/Card';
import CardContent from '@mui/material/CardContent';
import CardMedia from '@mui/material/CardMedia';
import Typography from '@mui/material/Typography';
import { Box, CardActionArea, Tooltip } from '@mui/material';
import Menu from '@mui/material/Menu';
import MenuItem from '@mui/material/MenuItem';
import IconButton from '@mui/material/IconButton';
import MoreVertIcon from '@mui/icons-material/MoreVert';
export const ItemCard = ({ item, columns, onClick, menuOptions = [], cardContentMinHeight }) => {
  const [anchorEl, setAnchorEl] = useState(null);
  const open = Boolean(anchorEl);
  const handleClick = (event) => {
    event.stopPropagation();
    setAnchorEl(event.currentTarget);
  };
  const handleClose = () => {
    setAnchorEl(null);
  };
  const handleMenuItemClick = (event, option) => {
    event.stopPropagation();
    handleClose();
    option.onClick(item);
  };
  return (
    <Card sx={{ margin: 2, position: 'relative' }}>
      <Tooltip title={item.name}>
        <CardActionArea
          onClick={(e) => onClick(e, item)}
          sx={{ width: '100%', display: 'flex', flexDirection: 'column', alignItems: 'center' }}
        >
          {item.imageUrl && (
            <CardMedia
              component="img"
              sx={{ width: 160, height: 160, objectFit: 'contain' }}
              image={item.imageUrl}
              alt={`Imagen de ${item.name}`}
            />
          )}
          <CardContent sx={{ width: '100%', minHeight: cardContentMinHeight }}>
            {columns.map((column) => {
              if (column.field === 'name') {
                return (
                  <Box key={column.field} sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center', marginBottom: 1 }}>
                    <Typography sx={{ fontSize: '12px', textAlign: 'center', ...(column.valueStyle || {}) }}>
                      {item[column.field]}
                    </Typography>
                  </Box>
                );
              }
              return null;
            })}
          </CardContent>
        </CardActionArea>
      </Tooltip>
      {menuOptions.length > 0 && (
        <>
          <IconButton
            aria-label="more"
            id="long-button"
            aria-controls={open ? 'long-menu' : undefined}
            aria-expanded={open ? 'true' : undefined}
            aria-haspopup="true"
            onClick={handleClick}
            sx={{ position: 'absolute', top: 8, right: 8 }}
          >
            <MoreVertIcon />
          </IconButton>
          <Menu
            id="long-menu"
            MenuListProps={{
              'aria-labelledby': 'long-button',
            }}
            anchorEl={anchorEl}
            open={open}
            onClose={handleClose}
          >
            {menuOptions.map((option) => (
              <MenuItem key={option.label} onClick={(event) => handleMenuItemClick(event, option)}>
                {option.label}
              </MenuItem>
            ))}
          </Menu>
        </>
      )}
    </Card>
  );
};

================
File: src/components/ItemCardList.jsx
================
import Grid from '@mui/material/Grid';
import { ItemCard } from './ItemCard';
import { Typography, Box } from '@mui/material';
const ItemsCardList = ({ rows, columns, itemCardProps, cardContentMinHeight }) => {
    if (rows.length === 0) {
        return (
            <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '200px' }}>
                <Typography variant="h6" color="text.secondary">
                    No hay elementos disponibles en este momento.
                </Typography>
            </Box>
        );
    }
    return (
        <Grid container spacing={2}>
            {rows.map((row) => (
                <Grid item xs={12} sm={6} md={3} key={row.id}>
                    <ItemCard item={row} columns={columns} cardContentMinHeight={cardContentMinHeight} {...itemCardProps} />
                </Grid>
            ))}
        </Grid>
    );
};
export default ItemsCardList;

================
File: src/components/LoadingOverlay.jsx
================
import { Box, CircularProgress } from '@mui/material';
const LoadingOverlay = ({ loading }) => {
  if (!loading) return null;
  return (
    <Box
      sx={{
        position: 'fixed',
        top: '0',
        left: '0',
        width: '100%',
        height: '100%',
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
        backgroundColor: 'rgba(0, 0, 0, 0.5)',
        zIndex: 9999,
      }}
    >
      <CircularProgress />
    </Box>
  );
};
export default LoadingOverlay;

================
File: src/components/LoginForm.jsx
================
import { useState } from 'react';
import { TextField, Button, Stack, InputAdornment, IconButton } from '@mui/material';
import Visibility from '@mui/icons-material/Visibility';
import VisibilityOff from '@mui/icons-material/VisibilityOff';
import useAuth from '../hooks/useAuth';
const LoginForm = ({ logoSrc, isMobile }) => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const { loading, login } = useAuth();
  const handleSubmit = async (event) => {
    event.preventDefault();
    await login(email, password);
  };
  const handleTogglePasswordVisibility = () => {
    setShowPassword((prevShowPassword) => !prevShowPassword);
  };
  return (
    <Stack
      spacing={3}
      component="form"
      onSubmit={handleSubmit}
      noValidate
      sx={{
        display: 'flex',
        alignItems: 'center',
        width: '100%',
        maxWidth: 400,
        mx: 'auto',
      }}
    >
      <img
        src={logoSrc}
        alt="Logotipo Refaccionaria Diaz"
        style={{
          width: isMobile ? 280 : 350,
          height: 'auto',
        }}
      />
      <TextField
        margin="normal"
        required
        fullWidth
        id="email"
        label="Email"
        name="email"
        autoComplete="email"
        autoFocus
        value={email}
        onChange={(e) => setEmail(e.target.value)}
        variant="outlined"
      />
      <TextField
        margin="normal"
        required
        fullWidth
        name="password"
        label="Password"
        type={showPassword ? 'text' : 'password'}
        id="password"
        autoComplete="current-password"
        value={password}
        onChange={(e) => setPassword(e.target.value)}
        variant="outlined"
        InputProps={{
          endAdornment: (
            <InputAdornment position="end">
              <IconButton
                aria-label="toggle password visibility"
                onClick={handleTogglePasswordVisibility}
                edge="end"
              >
                {showPassword ? <VisibilityOff /> : <Visibility />}
              </IconButton>
            </InputAdornment>
          ),
        }}
      />
      <Button
        color="primary"
        type="submit"
        fullWidth
        variant="contained"
        sx={{
          borderRadius: '8px',
          textTransform: 'none'
        }}
        disabled={loading}
      >
        Sign In
      </Button>
    </Stack>
  );
};
export default LoginForm;

================
File: src/components/MobileProvider.jsx
================
import { createContext, useContext } from 'react';
import { useTheme } from '@mui/material/styles';
import useMediaQuery from '@mui/material/useMediaQuery';
const MobileContext = createContext();
export const useMobile = () => useContext(MobileContext);
export const MobileProvider = ({ children }) => {
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  return (
    <MobileContext.Provider value={{
        isMobile
    }}>
      {children}
    </MobileContext.Provider>
  );
};

================
File: src/components/ProductsNavigationBar.jsx
================
import { Breadcrumbs as MuiBreadcrumbs, Link, Typography } from '@mui/material';
import { useLocation, Link as RouterLink } from 'react-router-dom';
import { useProductSelectionContext } from '../pages/Products/ProductSelectionContext';
import { ProductTypesNamesEsp } from '../pages/Products/ProductsConstants';
import { PATHS, FILTERED_SEGMENTS } from '../constants/paths';
const staticTitles = {
    [PATHS.PRODUCTS]: "Productos",
    [PATHS.BRANDS]: "Marcas",
    [PATHS.MODELS]: "Modelos",
    [PATHS.PRODUCTS_LIST]: "Productos",
};
const ProductsNavigationBar = () => {
    const location = useLocation();
    const { productType, selectedBrand, selectedCarModel, clearSelection } = useProductSelectionContext();
    const originalPathnames = location.pathname.split('/').filter((segment) => segment);
    return (
        <MuiBreadcrumbs aria-label="breadcrumb" sx={{ pt: 1, pb: 1 }}>
            {originalPathnames.map((value, index) => {
                const originalPathSegments = originalPathnames.slice(0, index + 1);
                const to = `/${originalPathSegments.join('/')}`;
                const isFiltered = FILTERED_SEGMENTS.includes(value.toLowerCase());
                if (isFiltered) return null;
                let title = staticTitles[to] || value;
                if (to === PATHS.PRODUCTS && productType) {
                    const productName = ProductTypesNamesEsp[productType] || 'Productos';
                    title = `${title} (${productName})`;
                }
                if (to === PATHS.BRANDS && selectedBrand) {
                    title = `${title} (${selectedBrand.name})`;
                }
                if (to === PATHS.MODELS && selectedCarModel) {
                    title = `${title} (${selectedCarModel.name})`;
                }
                const isLastVisible = index === originalPathnames.length - 1
                const handleClick = () => {
                    if (!isLastVisible) {
                       clearSelection(to);
                    }
                };
                return isLastVisible ? (
                    <Typography color="text.primary" key={to} sx={{ fontSize: '1.1rem' }}>
                        {title}
                    </Typography>
                ) : (
                    <Link component={RouterLink} to={to} key={to} onClick={handleClick} sx={{ fontSize: '1.1rem' }}>
                        {title}
                    </Link>
                );
            })}
        </MuiBreadcrumbs>
    );
};
export default ProductsNavigationBar;

================
File: src/components/ProtectedComponent.jsx
================
import { useEffect, useState } from 'react';
import { CircularProgress, Box } from '@mui/material';
export const ProtectedComponent = ({
  children,
  allowedRoles,
  fallbackComponent: FallbackComponent
}) => {
  const [userRole, setUserRole] = useState('');
  useEffect(() => {
    // Asumimos que el usuario ya está autenticado y su rol está almacenado en localStorage
    const userFromStorage = localStorage.getItem('user');
    const userDetails = userFromStorage ? JSON.parse(userFromStorage) : null;
    setUserRole(userDetails?.role?.description);
  }, []);
  if (userRole === '') {
    return (
      <Box
        sx={{
          display: 'flex',
          justifyContent: 'center',
          alignItems: 'center',
          height: '100vh',
        }}
      >
        <CircularProgress />
      </Box>
    );
  }
  const hasPermission = allowedRoles.includes(userRole);
  if (!hasPermission) {
    if (FallbackComponent) {
      return <FallbackComponent />;
    }
    return <div />;
  }
  return children;
};

================
File: src/components/ResponsiveDrawer/CustomDrawer.jsx
================
import { styled } from '@mui/material/styles';
import MuiDrawer from '@mui/material/Drawer';
import { openedMixin, closedMixin } from '../../styles/utils/drawerFunctions';
import DrawerContent from './DrawerContent';
const drawerWidth = 240;
const Drawer = styled(MuiDrawer, { shouldForwardProp: (prop) => prop !== 'open' })(
  ({ theme, open }) => ({
    width: drawerWidth,
    flexShrink: 0,
    whiteSpace: 'nowrap',
    boxSizing: 'border-box',
    ...(open && {
      ...openedMixin(theme),
      '& .MuiDrawer-paper': openedMixin(theme),
    }),
    ...(!open && {
      ...closedMixin(theme),
      '& .MuiDrawer-paper': closedMixin(theme),
    }),
  }),
);
const CustomDrawer = ({ open, handleDrawerClose, setComponent }) => {
  return (
    <Drawer variant="permanent" open={open}>
      <DrawerContent
        handleDrawerClose={handleDrawerClose}
        setComponent={setComponent}
        open={open}
      />
    </Drawer>
  );
};
export default CustomDrawer;

================
File: src/components/ResponsiveDrawer/DrawerContent.jsx
================
import DrawerHeader from '../DrawerHeader';
import { Divider } from '@mui/material';
import ElementList from '../ElementList';
import { adminMenus, mainMenus } from './menus';
const DrawerContent = ({ handleDrawerClose, setComponent, open }) => {
  return (
    <>
      <DrawerHeader handleDrawerClose={handleDrawerClose} />
      <Divider />
      <ElementList setComponent={setComponent} open={open} menuItems={mainMenus} />
      <Divider />
      <ElementList setComponent={setComponent} open={open} menuItems={adminMenus} />
    </>
  );
};
export default DrawerContent;

================
File: src/components/ResponsiveDrawer/MobileDrawer.jsx
================
import Drawer from '@mui/material/Drawer';
import DrawerContent from './DrawerContent';
const drawerWidth = 240;
const MobileDrawer = ({ open, handleDrawerClose, setComponent }) => {
  return (
    <Drawer
      variant="temporary"
      open={open}
      onClose={handleDrawerClose}
      ModalProps={{
        keepMounted: true,
      }}
      sx={{
        display: { xs: 'block' },
        '& .MuiDrawer-paper': { boxSizing: 'border-box', width: drawerWidth },
      }}
    >
      <DrawerContent
        handleDrawerClose={handleDrawerClose}
        setComponent={setComponent}
        open={open}
      />
    </Drawer>
  );
};
export default MobileDrawer;

================
File: src/components/ResponsiveDrawer/ProtectedListItem.jsx
================
import ListItem from '@mui/material/ListItem';
import ListItemButton from '@mui/material/ListItemButton';
import ListItemIcon from '@mui/material/ListItemIcon';
import ListItemText from '@mui/material/ListItemText';
import Tooltip from '@mui/material/Tooltip';
import { ProtectedComponent } from '../ProtectedComponent';
const ProtectedListItem = ({ text, icon, roles, handleClick, open }) => (
  <ProtectedComponent allowedRoles={roles} fallbackComponent={() => <div />}>
    <Tooltip title={text} placement="right" disableHoverListener={open}>
      <ListItem disablePadding sx={{ display: 'block' }} onClick={handleClick}>
        <ListItemButton
          sx={{
            minHeight: 48,
            justifyContent: open ? 'initial' : 'center',
            px: 2.5,
          }}
        >
          <ListItemIcon
            sx={{
              minWidth: 0,
              mr: open ? 3 : 'auto',
              justifyContent: 'center',
            }}
          >
            {icon}
          </ListItemIcon>
          <ListItemText primary={text} sx={{ opacity: open ? 1 : 0 }} />
        </ListItemButton>
      </ListItem>
    </Tooltip>
  </ProtectedComponent>
);
export default ProtectedListItem;

================
File: src/components/ResponsiveDrawer/ResponsiveDrawer.jsx
================
import MobileDrawer from './MobileDrawer';
import CustomDrawer from './CustomDrawer';
import { useMobile } from '../MobileProvider';
const ResponsiveDrawer = ({ open, handleDrawerClose, navigate }) => {
  const responsive = useMobile();
  const handleMenuClick = (path) => {
    navigate(path);
    handleDrawerClose();
  };
  return responsive.isMobile || responsive.isLandscape ? (
    <MobileDrawer open={open} handleDrawerClose={handleDrawerClose} setComponent = {handleMenuClick}/>
  ) : (
    <CustomDrawer open={open} handleDrawerClose={handleDrawerClose} setComponent = {handleMenuClick}/>
  );
};
export default ResponsiveDrawer;

================
File: src/components/ResponsiveDrawer/menus.jsx
================
import InventoryIcon from '@mui/icons-material/Inventory';
import LocalShipping from '@mui/icons-material/LocalShipping';
import ManageAccountsIcon from '@mui/icons-material/ManageAccounts';
import { ROLES } from '../../util/userConstants';
import { PATHS } from '../../constants/paths';
const mainMenus = [
    { text: 'Productos', icon: <InventoryIcon />, roles: [ROLES.ADMIN, ROLES.EMPLOYEE], title: 'Productos', path: PATHS.PRODUCTS },
    { text: 'Proveedores', icon: <LocalShipping />, roles: [ROLES.ADMIN, ROLES.EMPLOYEE], title: 'Proveedores', path: PATHS.PROVIDERS },
];
const adminMenus = [
    { text: 'Usuarios', icon: <ManageAccountsIcon />, roles: [ROLES.ADMIN], title: 'Gestión de Usuarios', path: PATHS.USERS },
];
export { mainMenus, adminMenus }

================
File: src/components/SnackbarContext.jsx
================

import { createContext, useContext, useState, useMemo, useCallback } from 'react';
import { Snackbar, Alert } from '@mui/material';
const SnackbarContext = createContext();
export const useSnackbar = () => useContext(SnackbarContext);
const SnackbarComponent = () => {
  const { snackbarOpen, snackbarMessage, snackbarSeverity, closeSnackbar } = useSnackbar();
  return (
    <Snackbar
      open={snackbarOpen}
      autoHideDuration={4000}
      onClose={closeSnackbar}
      anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}
    >
      <Alert onClose={closeSnackbar} severity={snackbarSeverity} sx={{ width: '100%' }}>
        {snackbarMessage}
      </Alert>
    </Snackbar>
  );
};
export const SnackbarProvider = ({ children }) => {
  const [snackbarOpen, setSnackbarOpen] = useState(false);
  const [snackbarMessage, setSnackbarMessage] = useState('');
  const [snackbarSeverity, setSnackbarSeverity] = useState('info');
  const openSnackbar = useCallback((message, severity = 'info') => {
    setSnackbarMessage(message);
    setSnackbarSeverity(severity);
    setSnackbarOpen(true);
  }, []);
  const closeSnackbar = () => {
    setSnackbarOpen(false);
  };
  const contextValue = useMemo(() => ({
    openSnackbar,
    closeSnackbar,
    snackbarOpen,
    snackbarMessage,
    snackbarSeverity
  }), [snackbarOpen, snackbarMessage, snackbarSeverity]);
  return (
    <SnackbarContext.Provider value={contextValue}>
      {children}
      <SnackbarComponent />
    </SnackbarContext.Provider>
  );
};

================
File: src/constants/paths.js
================
export const PATHS = {
    PRODUCTS: '/home/products',
    BRANDS: '/home/products/list/brands',
    MODELS: '/home/products/list/brands/models',
    PRODUCTS_LIST: '/home/products/list/brands/models/products',
    PROVIDERS: '/home/providers',
    USERS: '/home/users',
    ADD_USER: '/home/users/add-user',
};
export const FILTERED_SEGMENTS = ['home', 'list'];

================
File: src/constants/supabaseConfig.js
================

export const SUPABASE_BUCKETS = {
  PRODUCTS: 'products',
  BRANDS: 'brands',
  RADIATORS: 'radiators',
  PROVIDERS: 'providers',
  CAR_MODELS: 'car-models'
};
export const SUPABASE_PATHS = {
  PRODUCTS: {
    IMAGES: 'images',
    DOCUMENTS: 'documents'
  },
  BRANDS: {
    IMAGES: 'images',
    LOGOS: 'logos'
  },
  RADIATORS: {
    IMAGES: 'images',
    TECHNICAL_SHEETS: 'technical-sheets'
  },
  PROVIDERS: {
    IMAGES: 'images',
    LOGOS: 'logos'
  },
  CAR_MODELS: {
    IMAGES: 'images'
  }
};

================
File: src/hooks/useAuth.js
================
import { useState, useCallback } from 'react';
import { useNavigate } from 'react-router-dom';
import { useSnackbar } from '../components/SnackbarContext';
import * as authService from '../services/AuthService';
const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
const useAuth = () => {
  const [loading, setLoading] = useState(false);
  const { openSnackbar } = useSnackbar();
  const navigate = useNavigate();
  const login = useCallback(async (email, password) => {
    setLoading(true);
    if (!email || !password) {
      openSnackbar('Favor de introducir los campos requeridos', 'error');
      setLoading(false);
      return false;
    }
    if (!emailRegex.test(email)) {
      openSnackbar('Introduce un Email válido', 'error');
      setLoading(false);
      return false;
    }
    try {
      const user = await authService.signIn(email, password);
      if (user) {
        navigate('/home');
        return true;
      }
    } catch (error) {
      openSnackbar(error.message, 'error');
      return false;
    } finally {
      setLoading(false);
    }
  }, [navigate, openSnackbar]);
  return { loading, login };
};
export default useAuth;

================
File: src/models/Brand.js
================
import File from "./File";
export default class Brand {
    constructor({ id, name, brandTypeId, file = {}}) {
        this.id = id;
        this.name = name;
        this.brandTypeId = brandTypeId;
        this.file = new File(file || {});
    }
}

================
File: src/models/CarModel.js
================
import Brand from "./Brand";
export default class CarModel {
    constructor({id, name, brand = {}, brandId}) {
        this.id = id;
        this.name = name;
        this.brandId = brandId;
        this.brand = new Brand(brand);
    }
}

================
File: src/models/File.js
================
export default class File {
    constructor({ id, name, mimeType, storagePath, orderId, fileData, fileTypeId}) {
        this.id = id;
        this.name = name;
        this.mimeType = mimeType;
        this.storagePath = storagePath;
        this.orderId = orderId;
        this.fileData = fileData;
        this.fileTypeId = fileTypeId;
    }
}

================
File: src/models/Person.js
================
export default class Person {
    constructor({ id, name, lastName, birthDate, email, phoneNumber, address }) {
        this.id = id;
        this.name = name;
        this.lastName = lastName;
        this.birthDate = birthDate;
        this.email = email;
        this.phoneNumber = phoneNumber;
        this.address = address;
    }
}

================
File: src/models/Price.js
================
export default class Price {
    constructor({id, description, cost}) {
        this.id = id;
        this.description = description;
        this.cost = cost;
    }
}

================
File: src/models/Product.js
================
import Brand from "./Brand";
import File from "./File";
import { ProductCarModel } from "./ProductCarModel";
import ProductPrice from "./ProductPrice";
import { ProviderProduct } from "./ProviderProduct";
export default class Product {
  constructor({ id, name, brand = {}, comments, stockCount, images, files = [], providers = [], prices = [], carModels = [], dpi = ''}) {
    this.id = id;
    this.name = name;
    this.brand = new Brand(brand);
    this.comments = comments;
    this.stockCount = stockCount;
    this.images = images;
    this.files = files.map(file => new File(file ?? {}));
    this.providers = providers.map(provider => new ProviderProduct(provider ?? {}));
    this.prices = prices.map(price => new ProductPrice(price ?? {}));
    this.carModels = carModels.map(carModel => new ProductCarModel(carModel ?? {}));
    this.dpi = dpi;
  }
}

================
File: src/models/ProductCarModel.js
================
import CarModel from "./CarModel";
import Product from "./Product";
export class ProductCarModel {
    constructor({
        productId, carModelId, initialYear, lastYear, carModel = {},
         product = {}
    }) {
        this.product = new Product(product);
        this.productId = productId;
        this.carModelId = carModelId;
        this.initialYear = initialYear;
        this.lastYear = lastYear;
        this.carModel = new CarModel(carModel);
    }
}

================
File: src/models/ProductFile.js
================
import File from "./File";
export default class ProductFile {
    constructor({ productId, fileId, file = {}}) {
        this.productId = productId;
        this.fileId = fileId;
        this.file = new File(file);
    }
}

================
File: src/models/ProductPrice.js
================
import Price from "./Price";
export default class ProductPrice {
    constructor({productId, priceId, price = {}}) {
        this.productId = productId;
        this.priceId = priceId;
        this.price = new Price(price);
    }
}

================
File: src/models/Provider.js
================
export default class Provider {
    constructor({id, name,phoneNumber,address,comments}){
        this.id = id;
        this.name = name;
        this.phoneNumber = phoneNumber;
        this.address = address;
        this.comments = comments
    }
}

================
File: src/models/ProviderProduct.js
================
import Price from "./Price";
import Provider from "./Provider";
export class ProviderProduct {
    constructor({providerId, productId, priceId, numSeries, price = {}, provider = {}}) {
        this.providerId = providerId;
        this.productId = productId;
        this.priceId = priceId;
        this.numSeries = numSeries;
        this.price = new Price(price);
        this.provider = new Provider(provider);
    }
}

================
File: src/models/Radiator.js
================
import Product from "./Product";
export default class Radiator {
  constructor({dpi, product = {}}) {
    this.dpi = dpi;
    this.product = new Product(product);
  }
}

================
File: src/models/Role.js
================
export default class Role{
    constructor({id, description}) {
        this.id = id;
        this.description = description;
    }
}

================
File: src/models/User.js
================
import Person from "./Person";
export default class User {
    constructor({ id, person = {}, roleId, role = {}}) {
        this.id = id;
        this.person = new Person(person);
        this.roleId = roleId;
        this.role = role
    }
}

================
File: src/models/Vehicle.js
================
export default class Vehicle {
    constructor({id, vehicleModel, version, year}) {
        this.id = id;
        this.vehicleModel = vehicleModel;
        this.version = version;
        this.year = year;
    }
}

================
File: src/pages/Home.jsx
================

import { Navigate, Route, Routes, useNavigate } from 'react-router-dom';
import AppLayout from '../components/AppLayout';
import ProductsPage from './Products/ProductsPage';
import ProvidersPage from './Providers/ProviderPage';
import UserPage from './Users/UserPage';
import { PATHS } from '../constants/paths';
export default function Home() {
  const navigate = useNavigate();
  return (
    <AppLayout navigate={navigate}>
      <Routes>
        <Route path="/" element={<Navigate to={PATHS.PRODUCTS} />} />
        <Route path="products/*" element={<ProductsPage />} />
        <Route path="providers/*" element={<ProvidersPage />} />
        <Route path="users/*" element={<UserPage />} />
      </Routes>
    </AppLayout>
  );
}

================
File: src/pages/Login.jsx
================
import CssBaseline from '@mui/material/CssBaseline';
import Container from '@mui/material/Container';
import { useMobile } from '../components/MobileProvider';
import LoginForm from '../components/LoginForm';
import LoadingOverlay from '../components/LoadingOverlay';
import Copyright from '../components/Copyright';
import useAuth from '../hooks/useAuth';
import Logo from '../assets/LOGO CON CONTORNO BLANCO RD.png';
export default function Login() {
  const responsive = useMobile();
  const { loading } = useAuth();
  return (
    <Container
      component="main"
      sx={{
        height: '100dvh',
        display: 'flex',
        flexDirection: 'column',
        justifyContent: 'center',
      }}
    >
      <CssBaseline />
      <LoginForm logoSrc={Logo} isMobile={responsive.isMobile || responsive.isLandscape} />
      <LoadingOverlay loading={loading} />
      <Copyright sx={{ mt: 8, mb: 4 }} />
    </Container>
  );
}

================
File: src/pages/Products/BrandViewer/BrandContainer.jsx
================
import { useEffect, useState, useMemo } from 'react';
import { getAllBrands } from '../../../services/BrandService';
import { StorageAdapter } from '../../../services/StorageAdapter';
import { CSSTransition } from 'react-transition-group';
import BrandList from './BrandList';
import '../../../styles/brandContainer.css';
import { useSnackbar } from '../../../components/SnackbarContext';
import { useProductSelectionContext } from '../ProductSelectionContext';
import { useProductSearchContext } from '../ProductSearchContext';
import { useProductLoadingContext } from '../ProductLoadingContext';
import { Tabs, Tab, Box, CircularProgress } from '@mui/material';
import { useNavigate } from 'react-router-dom';
import { PATHS } from '../../../constants/paths';
const imageCache = new Map();
const BrandContainer = () => {
  const [allBrands, setAllBrands] = useState([]);
  const [tabValue, setTabValue] = useState(0);
  const { openSnackbar } = useSnackbar();
  const { searchTerm } = useProductSearchContext();
  const { setSelectedBrand } = useProductSelectionContext();
  const { setLoading: setGlobalLoading } = useProductLoadingContext();
  const navigate = useNavigate();
  useEffect(() => {
    const fetchBrands = async () => {
      setGlobalLoading(true);
      try {
        const brandsData = await getAllBrands(''); // Carga todos los datos sin filtro
        const brandsWithImages = await Promise.all(
          brandsData.map(async (brand) => {
            if (brand.file) {
              const cacheKey = brand.file.storagePath;
              let imageUrl = imageCache.get(cacheKey);
              if (!imageUrl) {
                imageUrl = await StorageAdapter.getFileURL(brand.file.storagePath).catch((error) => {
                  console.error('Error al obtener url imagen de storage para marca:', brand.name, error);
                  return '';
                });
                imageCache.set(cacheKey, imageUrl);
              }
              return { ...brand, imageUrl };
            }
            return brand;
          })
        );
        setAllBrands(brandsWithImages);
        setGlobalLoading(false);
      } catch (error) {
        console.error('Error al obtener las marcas:', error);
        openSnackbar(error.errorMessage, 'error');
        setGlobalLoading(false);
      }
    };
    fetchBrands();
  }, [openSnackbar, setGlobalLoading]);
  const filteredBrands = useMemo(() => (brandTypeId) => {
    return allBrands.filter(
      (brand) => brand.brandTypeId === brandTypeId && brand.name.toLowerCase().includes(searchTerm.toLowerCase())
    );
  }, [allBrands, searchTerm]);
  const handleTabChange = (event, newValue) => {
    setTabValue(newValue);
  };
  const handleOnBrandSelect = (e, brand) => {
    setSelectedBrand(brand);
    navigate(PATHS.MODELS);
  };
  if (!allBrands.length) {
    return (
      <Box display="flex" justifyContent="center" alignItems="center" minHeight="200px">
        <CircularProgress size={40} />
      </Box>
    );
  }
  return (
    <Box>
      <CSSTransition in={allBrands.length > 0} timeout={300} classNames="fade" unmountOnExit>
        <div>
          <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 2 }}>
            <Tabs value={tabValue} onChange={handleTabChange} aria-label="brand type tabs">
              <Tab label="Automotriz" />
              <Tab label="Carga Pesada" />
            </Tabs>
          </Box>
          <TabPanel value={tabValue} index={0}>
            <BrandList brands={filteredBrands(1)} onBrandSelect={handleOnBrandSelect} />
          </TabPanel>
          <TabPanel value={tabValue} index={1}>
            <BrandList brands={filteredBrands(2)} onBrandSelect={handleOnBrandSelect} />
          </TabPanel>
        </div>
      </CSSTransition>
    </Box>
  );
};
function TabPanel(props) {
  const { children, value, index, ...other } = props;
  return (
    <div role="tabpanel" hidden={value !== index} id={`simple-tabpanel-${index}`} aria-labelledby={`simple-tab-${index}`} {...other}>
      {value === index && <Box sx={{ p: 3 }}>{children}</Box>}
    </div>
  );
}
export default BrandContainer;

================
File: src/pages/Products/BrandViewer/BrandList.jsx
================
import ItemsCardList from '../../../components/ItemCardList';
const columns = [
  { field: 'name', headerName: 'Nombre', showLabel: false, valueStyle: { textTransform: 'uppercase', fontWeight: 'bold', fontSize: '18px'} },
];
const BrandList = ({ brands, onBrandSelect }) => {
  return (
    <div className="brand-list-container">
      <ItemsCardList rows={brands} columns={columns} itemCardProps={{ onClick: onBrandSelect }} />
    </div>
  );
};
export default BrandList;

================
File: src/pages/Products/Forms/RadiatorBasicForm.jsx
================
import { Box, TextField, Grid, Typography } from "@mui/material";
import { modifyAndClone } from "../../../util/generalUtils";
import ImageUpload from "../ProductDialog/ImageUpload";
import { useProductDialogNavigation } from "../ProductDialog/ProductDialogNavigationContext";
import { useProductDialogImage } from "../ProductDialog/ProductDialogImageContext";
import { useProductDialogForm } from "../ProductDialog/ProductDialogFormContext";
import { useEffect } from "react";
export const RadiatorForm = ({ product, handleChange, readOnly }) => {
    return (
        <Box>
            <TextField
                fullWidth
                label="DPI"
                variant="outlined"
                sx={{ mt: 4 }}
                value={product.dpi || ''}
                onChange={(e) => handleChange(e, 'dpi')}
                InputProps={{ readOnly }}
            />
            <TextField
                fullWidth
                label="Unidades disponibles"
                variant="outlined"
                type="number"
                sx={{ mt: 4 }}
                value={product.stockCount || ''}
                onChange={(e) => handleChange(e, 'stockCount')}
                InputProps={{ readOnly }}
            />
            <TextField
                fullWidth
                label="Comentarios"
                variant="outlined"
                multiline
                rows={8}
                sx={{ mt: 4 }}
                value={product.comments || ''}
                onChange={(e) => handleChange(e, 'comments')}
                InputProps={{ readOnly }}
            />
        </Box>
    );
};
const ImageSection = ({ images, onUpload, onDelete, product, setProduct }) => (
    <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
        <Typography variant="h6" component="h2" sx={{ textAlign: 'center', marginBottom: 2 }}>
            Imagen del Producto
        </Typography>
        <Box sx={{ display: 'flex', justifyContent: 'center', maxWidth: 450 }}>
            <ImageUpload
                onImageDelete={(index) => onDelete(index, product, setProduct)}
                onImageUpload={(file) => onUpload(file, product, setProduct)}
                uploadedImages={images.map(file => file.fileData)}
                key={"ProductImage"}
            />
        </Box>
    </Box>
);
const RadiatorBasicForm = () => {
    const { product, setProduct } = useProductDialogForm();
    const { handleImageUpload, handleImageDelete } = useProductDialogImage();
    const { validateCurrentStep } = useProductDialogNavigation();
    useEffect(() => {
        validateCurrentStep();
    }, [product, validateCurrentStep]);
    const handleChange = (event, field) => {
        const updatedProduct = modifyAndClone(product, field, event.target.value);
        setProduct(updatedProduct);
    };
    return (
        <Grid container spacing={3}>
            <Grid item xs={12} md={7}>
                <RadiatorForm
                    product={product}
                    handleChange={handleChange}
                    readOnly={false}
                />
            </Grid>
            <Grid item xs={12} md={5}>
                <ImageSection
                    images={product.files || []}
                    onUpload={handleImageUpload}
                    onDelete={handleImageDelete}
                    product={product}
                    setProduct={setProduct}
                />
            </Grid>
        </Grid>
    );
};
export default RadiatorBasicForm;

================
File: src/pages/Products/ModelViewer/CarModelContainer.jsx
================
import { useEffect, useState, useMemo, useCallback } from 'react';
import { getCarModelsByBrandId } from '../../../services/BrandService';
import { useSnackbar } from '../../../components/SnackbarContext';
import CarModelList from './CarModelList';
import { deleteCarModel, getCarModels } from '../../../services/CarModelService';
import { useProductSelectionContext } from '../ProductSelectionContext';
import { useProductSearchContext } from '../ProductSearchContext';
import { useProductLoadingContext } from '../ProductLoadingContext';
import { Box, CircularProgress, Tabs, Tab } from '@mui/material';
import { useNavigate } from 'react-router-dom';
import { PATHS } from '../../../constants/paths';
import { CSSTransition } from 'react-transition-group';
function TabPanel(props) {
  const { children, value, index, ...other } = props;
  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`simple-tabpanel-${index}`}
      aria-labelledby={`simple-tab-${index}`}
      {...other}
    >
      {value === index && <Box sx={{ p: 3 }}>{children}</Box>}
    </div>
  );
}
const CarModelListContainer = () => {
  const [carModels, setCarModels] = useState([]);
  const [tabValue, setTabValue] = useState(0);
  const { openSnackbar } = useSnackbar();
  const { selectedBrand, setSelectedCarModel } = useProductSelectionContext();
  const { searchTerm } = useProductSearchContext();
  const { loading, setLoading } = useProductLoadingContext();
  const navigate = useNavigate();
  const onCarModelSelect = useCallback((e, carModel) => {
    setSelectedCarModel(carModel);
    navigate(PATHS.PRODUCTS_LIST);
  }, [setSelectedCarModel, navigate]);
  const handleOnDelete = useCallback(async (carModel) => {
    try {
      const isDeleted = await deleteCarModel(carModel.id);
      if (isDeleted) {
        setCarModels(prevModels => prevModels.filter(model => model.id !== carModel.id));
        openSnackbar('Modelo eliminado correctamente', 'success');
      } else {
        openSnackbar('Error al eliminar el modelo (respuesta no exitosa)', 'error');
      }
    } catch (error) {
      console.error("Error deleting car model:", error);
      openSnackbar(`Error al eliminar el modelo: ${error.errorMessage || 'Error desconocido'}`, 'error');
    }
  }, [openSnackbar, setCarModels]);
  useEffect(() => {
    const abortController = new AbortController();
    const { signal } = abortController;
    const fetchCarModels = async () => {
      setLoading(true);
      try {
        let modelsData = [];
        if (selectedBrand && selectedBrand.id) {
          modelsData = await getCarModelsByBrandId(selectedBrand.id, searchTerm);
        } else {
          modelsData = await getCarModels(searchTerm);
        }
        if (!signal.aborted) {
          setCarModels(modelsData);
        }
      } catch (error) {
        if (!signal.aborted) {
          console.error("Error fetching car models:", error);
          const severity = error.statusCode >= 400 && error.statusCode < 500 ? 'warning' : 'error';
          openSnackbar(`Error al obtener los modelos: ${error.errorMessage || 'Error desconocido'}`, severity);
          setCarModels([]);
        }
      } finally {
        if (!signal.aborted) {
          setLoading(false);
        }
      }
    };
    fetchCarModels();
    return () => {
      abortController.abort();
    };
  }, [selectedBrand, searchTerm, openSnackbar, setLoading]);
  const automotrizModels = useMemo(() => {
    return carModels
      .filter(model => model.brand.brandTypeId === 1)
      .filter(model => model.name.toLowerCase().includes(searchTerm.toLowerCase()));
  }, [carModels, searchTerm]);
  const cargaPesadaModels = useMemo(() => {
    return carModels
      .filter(model => model.brand.brandTypeId === 2)
      .filter(model => model.name.toLowerCase().includes(searchTerm.toLowerCase()));
  }, [carModels, searchTerm]);
  const hasAutomotriz = automotrizModels.length > 0;
  const hasCargaPesada = cargaPesadaModels.length > 0;
  const availableTabs = useMemo(() => {
    const tabs = [];
    if (hasAutomotriz) tabs.push({ label: "Automotriz", index: 0, category: 'automotriz' });
    if (hasCargaPesada) tabs.push({ label: "Carga Pesada", index: tabs.length, category: 'cargaPesada' });
    return tabs;
  }, [hasAutomotriz, hasCargaPesada]);
  useEffect(() => {
    if (tabValue >= availableTabs.length && availableTabs.length > 0) {
      setTabValue(0);
    } else if (availableTabs.length === 0) {
        setTabValue(0);
    }
  }, [availableTabs, tabValue]);
  const handleTabChange = (event, newValue) => {
    setTabValue(newValue);
  };
  if (loading) {
    return (
      <Box display="flex" justifyContent="center" alignItems="center" minHeight="200px">
        <CircularProgress size={40} />
      </Box>
    );
  }
  return (
    <Box>
      <CSSTransition in={carModels.length > 0} timeout={300} classNames="fade" unmountOnExit>
        <div>
          {availableTabs.length > 0 ? (
            <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 2 }}>
              <Tabs value={tabValue} onChange={handleTabChange} aria-label="model type tabs">
                {availableTabs.map(tab => (
                  <Tab key={tab.category} label={tab.label} />
                ))}
              </Tabs>
            </Box>
          ) : (
              !loading && carModels.length === 0 && (
                  <Box sx={{ p: 3, textAlign: 'center' }}>No se encontraron modelos.</Box>
              )
          )}
          {availableTabs.map((tab, currentDynamicIndex) => {
              const models = tab.category === 'automotriz' ? automotrizModels : cargaPesadaModels;
              return (
                <TabPanel key={tab.category} value={tabValue} index={currentDynamicIndex}>
                  <CarModelList
                    carModels={models}
                    onCarModelSelect={onCarModelSelect}
                    handleOnDelete={handleOnDelete}
                  />
                </TabPanel>
              );
          })}
        </div>
      </CSSTransition>
    </Box>
  );
};
export default CarModelListContainer;

================
File: src/pages/Products/ModelViewer/CarModelList.jsx
================
import ItemsCardList from "../../../components/ItemCardList";
const CarModelList = ({ carModels, onCarModelSelect, handleOnDelete }) => {
  const columns = [
    { field: 'name', headerName: 'Modelo', showLabel: false, valueStyle: { textTransform: 'uppercase', fontWeight: 'bold', fontSize: '18px'} },
  ];
  const rows = carModels.map(carModel => ({
    id: carModel.id,
    name: carModel.name
  }));
  return (
    <div>
      <ItemsCardList rows={rows} columns={columns} cardContentMinHeight={80} itemCardProps={{ onClick: onCarModelSelect,
        menuOptions: [
          {
            label: 'Eliminar',
            onClick: handleOnDelete
          },
          {
            label: 'Editar',
            onClick: (item) => {
              console.log('Editar', item);
            }
          }
        ]
      }} />
    </div>
  );
};
export default CarModelList;

================
File: src/pages/Products/ProductDialog/DialogSteps.js
================
export const DIALOG_STEPS = {
    BASIC_INFO: 'BASIC_INFO',
    DETAILS: 'DETAILS',
    SUBMIT: 'SUBMIT'
};
export const DIALOG_STEPS_ORDER = [
    DIALOG_STEPS.BASIC_INFO,
    DIALOG_STEPS.DETAILS,
    DIALOG_STEPS.SUBMIT
];

================
File: src/pages/Products/ProductDialog/ImageUpload.jsx
================
import React, { useRef, useState } from 'react';
import { Box, Button, Typography } from '@mui/material';
import CloudUploadIcon from '@mui/icons-material/CloudUpload';
import ImageGallery from '../../../components/ImageGallery';
import { useMobile } from '../../../components/MobileProvider';
const ImageUpload = React.memo(({ uploadedImages, onImageUpload, onImageDelete, readOnly = false }) => {
    const [dragOver, setDragOver] = useState(false);
    const { isMobile } = useMobile();
    const fileInputRef = useRef(null);
    const handleDragOver = (event) => {
        if (!readOnly) {
            event.preventDefault();
            setDragOver(true);
        }
    };
    const handleDragLeave = (event) => {
        if (!readOnly) {
            event.preventDefault();
            setDragOver(false);
        }
    };
    const handleDrop = (event) => {
        if (!readOnly) {
            event.preventDefault();
            setDragOver(false);
            const files = event.dataTransfer.files;
            if (files.length > 0) {
                Array.from(files).forEach(file => onImageUpload(file));
            }
        }
    };
    const handleChange = (event) => {
        if (!readOnly) {
            const files = event.target.files;
            if (files.length > 0) {
                Array.from(files).forEach(file => onImageUpload(file));
            }
        }
    };
    return (
        <Box
            sx={{
                border: '1px dashed gray',
                padding: 2,
                marginTop: 2,
                backgroundColor: dragOver ? 'action.hover' : 'background.paper',
                textAlign: 'center',
                cursor: readOnly ? 'default' : 'pointer',
                minHeight: isMobile ? 200 : 300,
                display: 'flex',
                flexDirection: 'column',
                justifyContent: 'center',
            }}
            onDragOver={readOnly ? null : handleDragOver}
            onDragLeave={readOnly ? null : handleDragLeave}
            onDrop={readOnly ? null : handleDrop}
        >
            {readOnly ? (
                <ImageGallery images={uploadedImages} readOnly />
            ) : (
                <>
                    <input
                        accept="image/*"
                        style={{ display: 'none' }}
                        id="raised-button-file"
                        multiple
                        type="file"
                        onChange={handleChange}
                        ref={fileInputRef}
                    />
                    <ImageGallery images={uploadedImages} onImageDeleted={onImageDelete} />
                    <label htmlFor="raised-button-file">
                        <Button
                            variant="contained"
                            component="span"
                            startIcon={<CloudUploadIcon />}
                            sx={{ mt: 2, mb: 1 }}
                        >
                            Cargar Imagen
                        </Button>
                    </label>
                </>
            )}
            {uploadedImages.length === 0 && !readOnly && <Typography>Arrastra imágenes aquí, o haz clic para seleccionarlas.</Typography>}
            {uploadedImages.length === 0 && readOnly && <Typography>No hay imagenes cargadas</Typography>}
        </Box>
    );
}, areEqual);
ImageUpload.displayName = 'ImageUpload';
function areEqual(prevProps, nextProps) {
    return prevProps.uploadedImages === nextProps.uploadedImages &&
        prevProps.readOnly === nextProps.readOnly;
}
export default ImageUpload;

================
File: src/pages/Products/ProductDialog/ModelManager/components/ConflictModal.jsx
================
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogContentText,
  DialogActions,
  Button
} from '@mui/material';
export const ConflictModal = ({
  isOpen,
  onClose,
  onConfirm,
  conflictModel
}) => {
  return (
    <Dialog open={isOpen} onClose={onClose}>
      <DialogTitle>Modelo ya existe</DialogTitle>
      <DialogContent>
        <DialogContentText>
          Ya existe un modelo similar llamado &quot;{conflictModel?.name}&quot;. ¿Desea forzar la creación del nuevo modelo?
        </DialogContentText>
      </DialogContent>
      <DialogActions>
        <Button onClick={onClose}>Cancelar</Button>
        <Button onClick={onConfirm} color="primary" autoFocus>
          Forzar Creación
        </Button>
      </DialogActions>
    </Dialog>
  );
};

================
File: src/pages/Products/ProductDialog/ModelManager/components/ModelForm.jsx
================
import {
  Grid,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  TextField
} from '@mui/material';
import CustomSelectWithAdd from '../../../../../components/CustomSelectWithAdd';
const getBrandTypeLabel = (brandTypeId) => {
  switch (brandTypeId) {
    case 1:
      return 'Automotriz';
    case 2:
      return 'Carga Pesada';
    default:
      return '';
  }
};
export const ModelForm = ({
  brand,
  brands,
  models,
  setModels,
  productModel,
  onBrandChange,
  onModelChange,
  onStartYearChange,
  onLastYearChange,
  onModelAdded
}) => {
  const sortedBrands = [...brands].sort((a, b) => a.name.localeCompare(b.name));
  return (
    <Grid container spacing={2} sx={{ mb: 2 }}>
      <Grid item xs={6}>
        <FormControl fullWidth>
          <InputLabel id="brand-select-label">Marca</InputLabel>
          <Select
            labelId="brand-select-label"
            id="brand-select"
            value={brand.id}
            onChange={onBrandChange}
            label="Marca"
          >
            <MenuItem value="">
              <em>None</em>
            </MenuItem>
            {sortedBrands.map((brand) => (
              <MenuItem key={brand.id} value={brand.id}>
                {brand.name} ({getBrandTypeLabel(brand.brandTypeId)})
              </MenuItem>
            ))}
          </Select>
        </FormControl>
      </Grid>
      <Grid item xs={6}>
        <CustomSelectWithAdd
          elements={models}
          setElements={setModels}
          label="Modelo"
          placeholder="Introduce un Modelo"
          selectedItem={models.find(model => model.id === productModel.carModelId)}
          setSelectedItem={onModelChange}
          getItemText={item => item.name}
          onItemAdded={onModelAdded}
          dialogFields={[
            {
              name: 'name',
              label: 'Nombre del Modelo',
              type: 'text',
              required: true,
            },
          ]}
        />
      </Grid>
      <Grid item xs={6}>
        <TextField
          label="Año Inicial"
          type="number"
          variant="outlined"
          value={productModel.initialYear || ''}
          onChange={(e) => onStartYearChange(e.target.value)}
          fullWidth
        />
      </Grid>
      <Grid item xs={6}>
        <TextField
          label="Año Final"
          type="number"
          variant="outlined"
          value={productModel.lastYear || ''}
          onChange={(e) => onLastYearChange(e.target.value)}
          fullWidth
        />
      </Grid>
    </Grid>
  );
};

================
File: src/pages/Products/ProductDialog/ModelManager/components/ModelsTable.jsx
================
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableRow,
  IconButton
} from '@mui/material';
import DeleteIcon from '@mui/icons-material/Delete';
import ContentCopyIcon from '@mui/icons-material/ContentCopy';
export const ModelsTable = ({ models, onDelete, readOnly = false, onCopy }) => {
  return (
    <Table size="small" sx={{ mt: 4 }}>
      <TableHead>
        <TableRow>
          <TableCell>Modelo</TableCell>
          <TableCell align="right">Año Inicial</TableCell>
          <TableCell align="right">Año Final</TableCell>
          {!readOnly && <TableCell align="right">Acciones</TableCell>}
        </TableRow>
      </TableHead>
      <TableBody>
        {models.map((productCarModel, index) => (
          <TableRow key={productCarModel.id}>
            <TableCell component="th" scope="row" key={`model-name-${productCarModel.id}`}>
              {productCarModel.carModel.name}
            </TableCell>
            <TableCell align="right" key={`initial-year-${productCarModel.id}`}>{productCarModel.initialYear}</TableCell>
            <TableCell align="right" key={`last-year-${productCarModel.id}`}>{productCarModel.lastYear}</TableCell>
            {!readOnly && (
              <TableCell align="right" key={`actions-${productCarModel.id}`}>
                <IconButton onClick={() => onDelete(index)} aria-label="delete">
                  <DeleteIcon />
                </IconButton>
                <IconButton onClick={() => onCopy(productCarModel)} aria-label="copy">
                  <ContentCopyIcon />
                </IconButton>
              </TableCell>
            )}
          </TableRow>
        ))}
      </TableBody>
    </Table>
  );
};

================
File: src/pages/Products/ProductDialog/ModelManager/hooks/useBrands.js
================
import { useState, useEffect } from 'react';
import { useSnackbar } from '../../../../../components/SnackbarContext';
import Brand from '../../../../../models/Brand';
import { getAllBrands } from '../../../../../services/BrandService';
export const useBrands = () => {
  const [brands, setBrands] = useState([]);
  const [selectedBrand, setSelectedBrand] = useState(new Brand({}));
  const { openSnackbar } = useSnackbar();
  useEffect(() => {
    const fetchBrands = async () => {
      try {
        const brandsData = await getAllBrands();
        setBrands(brandsData);
      } catch (error) {
        openSnackbar(`Error al obtener las marcas: ${error.errorMessage}`, 'error');
      }
    };
    fetchBrands();
  }, []);
  const handleBrandChange = (event) => {
    const brand = brands.find(brand => brand.id === event.target.value);
    setSelectedBrand(brand || new Brand({}));
  };
  return {
    brands,
    selectedBrand,
    handleBrandChange
  };
};

================
File: src/pages/Products/ProductDialog/ModelManager/hooks/useModelManager.js
================
import { useState } from 'react';
import { useBrands } from './useBrands';
import { useModels } from './useModels';
import { useProductDialogForm } from '../../ProductDialogFormContext';
import { ProductCarModel } from '../../../../../models/ProductCarModel';
import { useSnackbar } from '../../../../../components/SnackbarContext';
import { modifyAndClone } from '../../../../../util/generalUtils';
import CarModel from '../../../../../models/CarModel';
import { createCarModel } from '../../../../../services/CarModelService';
export const useModelManager = () => {
  const { product, setProduct } = useProductDialogForm();
  const { brands, selectedBrand, handleBrandChange } = useBrands();
  const { models, setModels } = useModels(selectedBrand.id);
  const [productModel, setProductModel] = useState(new ProductCarModel({}));
  const { openSnackbar } = useSnackbar();
  const [conflictState, setConflictState] = useState({
    isModalOpen: false,
    conflictModel: null,
    pendingCarModel: null
  });
  const handleModelChange = (carModelSelected) => {
    setProductModel(new ProductCarModel({
      ...productModel,
      carModelId: carModelSelected.id,
      carModel: carModelSelected
    }));
  };
  const handleDeleteModel = (index) => {
    const newProductsCarModels = product.carModels.filter((_, i) => i !== index);
    setProduct(modifyAndClone(product, 'carModels', newProductsCarModels));
  };
  const handleStartYearChange = (year) => {
    setProductModel({ ...productModel, initialYear: year });
  };
  const handleLastYearChange = (year) => {
    setProductModel({ ...productModel, lastYear: year });
  };
  const handleCarModelAdded = () => {
    setProduct(modifyAndClone(product, 'carModels', [...product.carModels, productModel]));
    setProductModel(new ProductCarModel({}));
  };
  const handleCopyModel = (modelToCopy) => {
    const brandOfModel = brands.find(b => b.id === modelToCopy.carModel.brand.id);
    if (brandOfModel) {
      handleBrandChange({ target: { value: brandOfModel.id } });
    }
    setProductModel(new ProductCarModel({
      carModelId: modelToCopy.carModelId,
      carModel: modelToCopy.carModel,
      initialYear: modelToCopy.initialYear,
      lastYear: modelToCopy.lastYear
    }));
  };
  const handleOnItemAdded = async (elements, newItem) => {
    const newVehicleModel = new CarModel({
      brandId: selectedBrand.id,
      ...newItem
    });
    try {
      const createdVehicleModel = await createCarModel(newVehicleModel);
      setModels([...elements, createdVehicleModel]);
      openSnackbar('Modelo creado con éxito', 'success');
      return createdVehicleModel.id;
    } catch (error) {
      if (error.statusCode === 409) {
        setConflictState({
          isModalOpen: true,
          conflictModel: error.response.similarModel,
          pendingCarModel: newVehicleModel
        });
        return null;
      } else {
        openSnackbar(`Error al crear el modelo: ${error.errorMessage}`, 'error');
        return null;
      }
    }
  };
  const handleConfirmForceCreate = async () => {
    const { pendingCarModel } = conflictState;
    if (pendingCarModel) {
      try {
        const createdVehicleModel = await createCarModel(pendingCarModel, true);
        setModels([...models, createdVehicleModel]);
        resetConflictState();
        openSnackbar('Modelo creado con éxito', 'success');
      } catch (error) {
        openSnackbar(`Error al forzar la creación del modelo: ${error.errorMessage}`, 'error');
      }
    }
  };
  const resetConflictState = () => {
    setConflictState({
      isModalOpen: false,
      conflictModel: null,
      pendingCarModel: null
    });
  };
  return {
    state: {
      product,
      brands,
      selectedBrand,
      models,
      productModel,
      conflictState,
      isAddButtonDisabled: !productModel.carModelId || !productModel.initialYear || !productModel.lastYear
    },
    handlers: {
      handleBrandChange,
      handleModelChange,
      handleDeleteModel,
      handleStartYearChange,
      handleLastYearChange,
      handleCarModelAdded,
      handleCopyModel,
      handleOnItemAdded,
      handleConfirmForceCreate,
      resetConflictState,
      setModels
    }
  };
};

================
File: src/pages/Products/ProductDialog/ModelManager/hooks/useModels.js
================
import { useState, useEffect } from 'react';
import { useSnackbar } from '../../../../../components/SnackbarContext';
import { getCarModelsByBrandId } from '../../../../../services/BrandService';
export const useModels = (selectedBrandId) => {
  const [models, setModels] = useState([]);
  const { openSnackbar } = useSnackbar();
  useEffect(() => {
    const fetchCarModels = async () => {
      try {
        if (selectedBrandId) {
          const carModelsData = await getCarModelsByBrandId(selectedBrandId);
          setModels(carModelsData);
        }
      } catch (error) {
        openSnackbar(`Error al obtener los modelos de la marca: ${error.errorMessage}`, 'error');
      }
    };
    fetchCarModels();
  }, [selectedBrandId]);
  return {
    models,
    setModels
  };
};

================
File: src/pages/Products/ProductDialog/ModelManager/index.jsx
================
import { Button, Typography } from '@mui/material';
import ExpandableCard from '../../../../components/ExpandableCard';
import { useModelManager } from './hooks/useModelManager';
import { ModelForm } from './components/ModelForm';
import { ModelsTable } from './components/ModelsTable';
import { ConflictModal } from './components/ConflictModal';
const ModelManager = ({ readOnly = false }) => {
  const { state, handlers } = useModelManager();
  return (
    <>
      <ExpandableCard
        title="Modelos"
        defaultExpanded={true}
      >
        <Typography gutterBottom variant="body2" component="p" sx={{ mb: 2 }}>
          {readOnly ? '' : 'Agrega y gestiona los modelos.'}
        </Typography>
        {!readOnly && (
          <>
            <ModelForm
              key={state.selectedBrand ? state.selectedBrand.id : 'no-brand-selected'}
              brand={state.selectedBrand}
              brands={state.brands}
              models={state.models}
              setModels={handlers.setModels}
              productModel={state.productModel}
              onBrandChange={handlers.handleBrandChange}
              onModelChange={handlers.handleModelChange}
              onStartYearChange={handlers.handleStartYearChange}
              onLastYearChange={handlers.handleLastYearChange}
              onModelAdded={handlers.handleOnItemAdded}
            />
            <Button
              onClick={handlers.handleCarModelAdded}
              variant="contained"
              sx={{ mt: 2 }}
              disabled={state.isAddButtonDisabled}
            >
              Agregar Modelo
            </Button>
          </>
        )}
        <ModelsTable
          models={state.product.carModels}
          onDelete={handlers.handleDeleteModel}
          readOnly={readOnly}
          onCopy={handlers.handleCopyModel}
        />
      </ExpandableCard>
      <ConflictModal
        isOpen={state.conflictState.isModalOpen}
        onClose={handlers.resetConflictState}
        onConfirm={handlers.handleConfirmForceCreate}
        conflictModel={state.conflictState.conflictModel}
      />
    </>
  );
};
export default ModelManager;

================
File: src/pages/Products/ProductDialog/PriceManager/components/PriceForm.jsx
================
import { Box, TextField } from '@mui/material';
export const PriceForm = ({
  price,
  onPriceChange
}) => {
  return (
    <Box sx={{ mb: 2 }}>
      <TextField
        label="Descripción"
        variant="outlined"
        value={price.description ?? ''}
        onChange={(e) => onPriceChange('description', e.target.value)}
        fullWidth
        sx={{ mb: 1 }}
      />
      <TextField
        label="Costo"
        type="number"
        variant="outlined"
        value={price.cost ?? ''}
        onChange={(e) => onPriceChange('cost', e.target.value)}
        fullWidth
      />
    </Box>
  );
};

================
File: src/pages/Products/ProductDialog/PriceManager/components/PricesTable.jsx
================
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableRow,
  IconButton
} from '@mui/material';
import DeleteIcon from '@mui/icons-material/Delete';
export const PricesTable = ({ prices, onDelete, readOnly = false }) => {
  return (
    <Table size="small">
      <TableHead>
        <TableRow>
          <TableCell>Descripción</TableCell>
          <TableCell align="right">Costo</TableCell>
          {!readOnly && <TableCell align="right">Acciones</TableCell>}
        </TableRow>
      </TableHead>
      <TableBody>
        {prices.map((productPrice, index) => (
          <TableRow key={index}>
            <TableCell>{productPrice.price.description}</TableCell>
            <TableCell align="right">{productPrice.price.cost}</TableCell>
            {!readOnly && (
              <TableCell align="right">
                <IconButton onClick={() => onDelete(index)} size="large">
                  <DeleteIcon />
                </IconButton>
              </TableCell>
            )}
          </TableRow>
        ))}
      </TableBody>
    </Table>
  );
};

================
File: src/pages/Products/ProductDialog/PriceManager/hooks/usePriceManager.js
================
import { useState } from 'react';
import Price from '../../../../../models/Price';
import ProductPrice from '../../../../../models/ProductPrice';
import { useProductDialogForm } from '../../ProductDialogFormContext';
import { modifyAndClone } from '../../../../../util/generalUtils';
export const usePriceManager = () => {
  const { product, setProduct } = useProductDialogForm();
  const [price, setPrice] = useState(new Price({}));
  const handlePriceChange = (field, value) => {
    setPrice(new Price({ ...price, [field]: value }));
  };
  const handleAddPrice = () => {
    const updatedPrices = [...product.prices, new ProductPrice({price})];
    setProduct(modifyAndClone(product, 'prices', updatedPrices));
    setPrice(new Price({}));
  };
  const handleDeletePrice = (index) => {
    const updatedPrices = product.prices.filter((_, i) => i !== index);
    setProduct(modifyAndClone(product, 'prices', updatedPrices));
  };
  return {
    state: {
      product,
      price,
      isAddButtonDisabled: !price.description || !price.cost
    },
    handlers: {
      handlePriceChange,
      handleAddPrice,
      handleDeletePrice
    }
  };
};

================
File: src/pages/Products/ProductDialog/PriceManager/index.jsx
================
import { Button, Typography } from '@mui/material';
import ExpandableCard from '../../../../components/ExpandableCard';
import { usePriceManager } from './hooks/usePriceManager';
import { PriceForm } from './components/PriceForm';
import { PricesTable } from './components/PricesTable';
const PriceManager = ({ readOnly = false }) => {
  const { state, handlers } = usePriceManager();
  return (
    <ExpandableCard title="Precios">
      <Typography gutterBottom variant="body2" component="p" sx={{ mb: 2 }}>
        {readOnly ? '' : 'Agrega y gestiona los precios.'}
      </Typography>
      {!readOnly && (
        <>
          <PriceForm
            price={state.price}
            onPriceChange={handlers.handlePriceChange}
          />
          <Button
            onClick={handlers.handleAddPrice}
            variant="contained"
            sx={{ mt: 2 }}
            disabled={state.isAddButtonDisabled}
          >
            Agregar Precio
          </Button>
        </>
      )}
      <PricesTable
        prices={state.product.prices}
        onDelete={handlers.handleDeletePrice}
        readOnly={readOnly}
      />
    </ExpandableCard>
  );
};
export default PriceManager;

================
File: src/pages/Products/ProductDialog/ProductBasicInfo.jsx
================
import { Box, Grid, FormControl, InputLabel, Select, MenuItem } from "@mui/material";
import { useProductSelectionContext } from "../ProductSelectionContext";
import { ProductTypes } from "../ProductsConstants";
import RadiatorBasicForm from '../Forms/RadiatorBasicForm';
const ProductBasicInfo = () => {
    const { productType, handleChangeProductType } = useProductSelectionContext();
    const handleProductTypeChange = (event) => {
        handleChangeProductType(event.target.value);
    };
    const renderProductForm = () => {
        switch (productType) {
            case ProductTypes.RADIATOR:
                return <RadiatorBasicForm />;
            default:
                return null;
        }
    };
    return (
        <Box sx={{ p: 2 }} id='dialog-content'>
            <Grid container spacing={2}>
                <Grid item xs={12}>
                    <FormControl fullWidth>
                        <InputLabel id="product-type-label">Tipo de Producto</InputLabel>
                        <Select
                            labelId="product-type-label"
                            id="product-type"
                            value={productType}
                            label="Tipo de Producto"
                            onChange={handleProductTypeChange}
                        >
                            <MenuItem value={ProductTypes.RADIATOR}>Radiador</MenuItem>
                            <MenuItem value={ProductTypes.CAP}>Tapas</MenuItem>
                            <MenuItem value={ProductTypes.FAN}>Abanicos</MenuItem>
                        </Select>
                    </FormControl>
                </Grid>
                <Grid item xs={12}>
                    {renderProductForm()}
                </Grid>
            </Grid>
        </Box>
    );
};
export default ProductBasicInfo;

================
File: src/pages/Products/ProductDialog/ProductDetails.jsx
================
import ModelManager from "./ModelManager";
import PriceManager from "./PriceManager";
import ProviderManager from "./ProviderManager";
import { useProductDialogNavigation } from "./ProductDialogNavigationContext";
import { DIALOG_STEPS } from "./DialogSteps";
import { useEffect } from "react";
import { useProductDialogForm } from "./ProductDialogFormContext";
const ProductDetails = () => {
  const { currentStep, validateCurrentStep } = useProductDialogNavigation();
  const { product } = useProductDialogForm();
  useEffect(() => {
    if (currentStep === DIALOG_STEPS.DETAILS) {
      validateCurrentStep();
    }
  }, [currentStep, validateCurrentStep, product]);
  return (
    <>
      <ModelManager />
      <PriceManager />
      <ProviderManager />
    </>
  );
};
export default ProductDetails;

================
File: src/pages/Products/ProductDialog/ProductDialog.jsx
================

import React, { memo, useEffect } from 'react';
import { Box, CircularProgress, Dialog, Slide } from '@mui/material';
import ProductDialogToolbar from './ProductDialogToolbar';
import { useProductDialogContext } from '../ProductDialogContext';
import { useProductSelectionContext } from '../ProductSelectionContext';
import ProductSummary from '../ProductSummary';
import RadiatorFlow from './RadiatorFlow';
import { ProductTypes } from '../ProductsConstants';
import { useProductDialogForm } from './ProductDialogFormContext';
const Transition = React.forwardRef(function Transition(props, ref) {
    return <Slide direction="up" ref={ref} {...props} />;
});
const renderProductFlow = (productType) => {
    switch (productType) {
        case ProductTypes.RADIATOR:
            return <RadiatorFlow />;
        default:
            return null;
    }
};
const ProductDialogContent = memo(() => {
    const { closeDialog, mode } = useProductDialogContext();
    const { productType } = useProductSelectionContext();
    const { isLoading } = useProductDialogForm();
    return (
        <>
            <ProductDialogToolbar handleCloseDialog={closeDialog} />
            {isLoading ? (
                <Box
                    sx={{
                        display: 'flex',
                        justifyContent: 'center',
                        alignItems: 'center',
                        height: '100vh',
                    }}
                >
                    <CircularProgress />
                </Box>
            ) : (
                <>
                    {mode === 'view' && (
                        <ProductSummary />
                    )}
                    {(mode === 'create' || mode === 'edit') && renderProductFlow(productType)}
                </>
            )}
        </>
    );
});
ProductDialogContent.displayName = 'ProductDialogContent';
const ProductDialog = memo(() => {
    const { isOpen, closeDialog } = useProductDialogContext();
    return (
        <Dialog
            fullScreen
            open={isOpen}
            onClose={closeDialog}
            aria-labelledby="dialog-title"
            TransitionComponent={Transition}
        >
            <ProductDialogContent />
        </Dialog>
    );
});
ProductDialog.displayName = 'ProductDialog';
export default ProductDialog;

================
File: src/pages/Products/ProductDialog/ProductDialogFormContext.jsx
================
import { createContext, useContext, useEffect, useState } from 'react';
import { useProductSelectionContext } from '../ProductSelectionContext';
import { useSnackbar } from '../../../components/SnackbarContext';
import { createProduct, getProductById, updateProduct } from '../../../services/ProductService';
import Product from '../../../models/Product';
import { ProductTypes } from '../ProductsConstants';
import { useProductDialogContext } from '../ProductDialogContext';
import EventBus from '../../../services/EventBus';
import { DIALOG_EVENTS } from '../ProductDialogContext';
import { useProductDialogImage } from './ProductDialogImageContext';
import { ProductImageService } from '../../../services/ProductImageService';
const ProductDialogFormContext = createContext();
export const useProductDialogForm = () => useContext(ProductDialogFormContext);
export const ProductDialogFormProvider = ({ children }) => {
    const [product, setProduct] = useState(new Product({}));
    const [isLoading, setIsLoading] = useState(false);
    const { productType, selectedProduct, setSelectedProduct } = useProductSelectionContext();
    const { mode, closeDialog} = useProductDialogContext();
    const { openSnackbar } = useSnackbar();
    const { uploadProductImages } = useProductDialogImage();
    const dependencies = [
        productType,
        product.carModels,
        product.prices,
        product.stockCount,
        product.comments,
        product.dpi
    ];
    useEffect(() => {
        const unsubscribe = EventBus.on(DIALOG_EVENTS.CLOSE, () => {
            resetForm();
        });
        return () => {
            unsubscribe();
        };
    }, []);
    useEffect(() => {
        const fetchData = async () => {
            if (selectedProduct) {
                setIsLoading(true);
                let productFullInfo = await getProductById(selectedProduct.id);
                if (productFullInfo.files && productFullInfo.files.length > 0) {
                    productFullInfo.files = await ProductImageService.loadProductImages(productFullInfo.files);
                }
                setProduct(productFullInfo);
                setIsLoading(false);
            }
        };
        fetchData();
    }, [selectedProduct, mode]);
    useEffect(() => {
        const formattedName = formatProductName(productType, product);
        setProduct({ ...product, name: formattedName });
    }, dependencies);
    const formatProductName = (productType, product) => {
        switch (productType) {
            case ProductTypes.RADIATOR:
                return `${product.dpi} ${product.carModels.map(cm => `${cm.carModel.name} (${cm.initialYear}-${cm.lastYear})`).join('-')} [${product.stockCount}]`;
            default:
                return product.name;
        }
    };
    const resetForm = () => {
        setSelectedProduct(null);
        setProduct(new Product({}));
    };
    const handleSubmit = async () => {
        try {
            setIsLoading(true);
            let updatedFiles = [];
            if (product.files && product.files.length > 0) {
                const uploadedFiles = await uploadProductImages(product.files);
                updatedFiles = uploadedFiles.map(file => ({
                    ...file,
                    fileData: null
                }));
            }
            const productToSave = {
                ...product,
                productTypeId: productType,
                files: updatedFiles
            };
            if (product.id) {
                await updateProduct(productToSave.id, productToSave);
            } else {
                await createProduct(productToSave);
            }
            setIsLoading(false);
            closeDialog();
            openSnackbar('Producto procesado correctamente', 'success');
        } catch (error) {
            setIsLoading(false);
            console.error('Error al procesar el producto:', error);
            openSnackbar(`Error al procesar el producto: ${error.message || error.errorMessage}`, 'error');
        }
    };
    return (
        <ProductDialogFormContext.Provider value={{
            product,
            isLoading,
            handleSubmit,
            resetForm,
            setProduct
        }}>
            {children}
        </ProductDialogFormContext.Provider>
    );
};

================
File: src/pages/Products/ProductDialog/ProductDialogImageContext.jsx
================
import { createContext, useContext } from 'react';
import { ProductImageService } from '../../../services/ProductImageService';
import { modifyAndClone } from '../../../util/generalUtils';
const ProductDialogImageContext = createContext();
export const useProductDialogImage = () => useContext(ProductDialogImageContext);
export const ProductDialogImageProvider = ({ children }) => {
    const handleImageUpload = (file, product, setProduct) => {
        const reader = new FileReader();
        reader.onloadend = () => {
            let orderId = product.files.length + 1;
            let newFile = ProductImageService.createFileFromUpload(reader.result, orderId);
            setProduct(modifyAndClone(product, 'files', [...product.files, newFile]));
        };
        reader.readAsDataURL(file);
    };
    const handleImageDelete = (index, product, setProduct) => {
        setProduct(modifyAndClone(product, 'files', product.files.filter((_, i) => i !== index)));
    };
    const loadProductImages = async (productFiles) => {
        return ProductImageService.loadProductImages(productFiles);
    };
    const uploadProductImages = async (files) => {
        return ProductImageService.uploadProductImages(files);
    };
    return (
        <ProductDialogImageContext.Provider value={{
            handleImageUpload,
            handleImageDelete,
            loadProductImages,
            uploadProductImages
        }}>
            {children}
        </ProductDialogImageContext.Provider>
    );
};

================
File: src/pages/Products/ProductDialog/ProductDialogNavigationContext.jsx
================
import { createContext, useContext, useState, useCallback, useEffect } from 'react';
import { STEP_VALIDATORS } from './validators';
import { useProductSelectionContext } from '../ProductSelectionContext';
import { DIALOG_STEPS, DIALOG_STEPS_ORDER } from './DialogSteps';
import { useProductDialogForm } from './ProductDialogFormContext';
import EventBus from '../../../services/EventBus';
import { DIALOG_EVENTS } from '../ProductDialogContext';
const ProductDialogNavigationContext = createContext();
export const useProductDialogNavigation = () => {
    const context = useContext(ProductDialogNavigationContext);
    if (!context) {
        throw new Error('useProductDialogNavigation must be used within a ProductDialogNavigationProvider');
    }
    return context;
};
export const ProductDialogNavigationProvider = ({ children }) => {
    const [currentStep, setCurrentStep] = useState(DIALOG_STEPS.BASIC_INFO);
    const [isNextEnabled, setIsNextEnabled] = useState(false);
    const { product } = useProductDialogForm();
    const { productType } = useProductSelectionContext();
    useEffect(() => {
       const unsubscribe = EventBus.on(DIALOG_EVENTS.CLOSE, () => {
        setCurrentStep(DIALOG_STEPS.BASIC_INFO);
       });
       return () => {
        unsubscribe();
       };
    }, []);
    const validateCurrentStep = useCallback(() => {
        const stepValidators = STEP_VALIDATORS[currentStep];
        if (!stepValidators) return false;
        const validator = stepValidators[productType];
        if (!validator) return false;
        const isValid = validator(product);
        setIsNextEnabled(isValid);
        return isValid;
    }, [currentStep, product, productType]);
    const nextStep = useCallback(() => {
        const currentIndex = DIALOG_STEPS_ORDER.indexOf(currentStep);
        if (currentIndex < DIALOG_STEPS_ORDER.length - 1) {
            setCurrentStep(DIALOG_STEPS_ORDER[currentIndex + 1]);
            setIsNextEnabled(false);
        }
    }, [currentStep]);
    const previousStep = useCallback(() => {
        const currentIndex = DIALOG_STEPS_ORDER.indexOf(currentStep);
        if (currentIndex > 0) {
            setCurrentStep(DIALOG_STEPS_ORDER[currentIndex - 1]);
            validateCurrentStep();
        }
    }, [currentStep, validateCurrentStep]);
    const value = {
        currentStep,
        setCurrentStep,
        isNextEnabled,
        validateCurrentStep,
        nextStep,
        previousStep
    };
    return (
        <ProductDialogNavigationContext.Provider value={value}>
            {children}
        </ProductDialogNavigationContext.Provider>
    );
};

================
File: src/pages/Products/ProductDialog/ProductDialogToolbar.jsx
================
import { AppBar, Toolbar, IconButton, Typography, Button } from "@mui/material";
import CloseIcon from '@mui/icons-material/Close';
import EditIcon from '@mui/icons-material/Edit';
import { useProductDialogNavigation } from "./ProductDialogNavigationContext";
import { useProductDialogForm } from "./ProductDialogFormContext";
import { useProductSelectionContext } from "../ProductSelectionContext";
import { useProductDialogContext } from "../ProductDialogContext";
import { DIALOG_STEPS } from './DialogSteps';
const ProductDialogToolbar = ({ handleCloseDialog }) => {
    const {
        currentStep,
        previousStep,
        nextStep,
        isNextEnabled,
    } = useProductDialogNavigation();
    const {
        handleSubmit = () => {},
    } = useProductDialogForm();
    const { selectedProduct } = useProductSelectionContext();
    const { mode, setMode } = useProductDialogContext();
    const renderEditButton = () => (
        <Button
            startIcon={<EditIcon />}
            autoFocus
            color="inherit"
            onClick={() => {
                setMode('edit');
            }}
        >
            Editar
        </Button>
    );
    const renderNavigationButtons = () => (
        <>
            {currentStep !== DIALOG_STEPS.BASIC_INFO && (
                <Button color="inherit" onClick={previousStep}>
                    Atrás
                </Button>
            )}
            {currentStep !== DIALOG_STEPS.SUBMIT ? (
                <Button
                    autoFocus
                    color="inherit"
                    onClick={nextStep}
                    disabled={!isNextEnabled}
                >
                    Siguiente
                </Button>
            ) : (
                <Button
                    autoFocus
                    color="inherit"
                    onClick={handleSubmit}
                >
                    Guardar
                </Button>
            )}
        </>
    );
    return (
        <AppBar sx={{ position: 'relative' }}>
            <Toolbar>
                <IconButton
                    edge="start"
                    color="inherit"
                    onClick={() => {
                        handleCloseDialog();
                    }}
                    aria-label="close"
                >
                    <CloseIcon />
                </IconButton>
                <Typography sx={{ ml: 2, flex: 1 }} variant="h6" component="div">
                    {selectedProduct ? (mode === 'edit' ? "Editar Producto" : "Detalles del Producto") : "Agregar Producto"}
                </Typography>
                {!selectedProduct ? renderNavigationButtons() :
                 (selectedProduct && mode === 'view') ? renderEditButton() :
                 renderNavigationButtons()}
            </Toolbar>
        </AppBar>
    );
};
export default ProductDialogToolbar;

================
File: src/pages/Products/ProductDialog/ProviderManager/components/ProviderDetailModal.jsx
================
import {
  Modal,
  Box,
  Card,
  CardContent,
  Typography,
  Button
} from '@mui/material';
export const ProviderDetailModal = ({ open, onClose, provider }) => {
  return (
    <Modal
      open={open}
      onClose={onClose}
      aria-labelledby="modal-modal-title"
      aria-describedby="modal-modal-description"
    >
      <Box sx={{
        position: 'absolute',
        top: '50%',
        left: '50%',
        transform: 'translate(-50%, -50%)',
        width: 400,
        p: 4,
      }}>
        <Card>
          <CardContent>
            <Typography variant="h5" component="div" sx={{ marginBottom: 2 }}>
              Detalles del Proveedor
            </Typography>
            <Typography variant="body2" color="text.secondary" gutterBottom>
              <strong>Nombre:</strong> {provider?.name}
            </Typography>
            <Typography variant="body2" color="text.secondary" gutterBottom>
              <strong>Teléfono:</strong> {provider?.phoneNumber}
            </Typography>
            <Typography variant="body2" color="text.secondary" gutterBottom>
              <strong>Dirección:</strong> {provider?.address}
            </Typography>
            <Typography variant="body2" color="text.secondary" gutterBottom>
              <strong>Comentarios:</strong> {provider?.comments}
            </Typography>
            <Button variant="contained" onClick={onClose} style={{ marginTop: 2 }}>
              Cerrar
            </Button>
          </CardContent>
        </Card>
      </Box>
    </Modal>
  );
};

================
File: src/pages/Products/ProductDialog/ProviderManager/components/ProviderForm.jsx
================
import { Grid, TextField } from '@mui/material';
import CustomSelectWithAdd from '../../../../../components/CustomSelectWithAdd';
export const ProviderForm = ({
  providers,
  selectedProvider,
  price,
  numSeries,
  onProviderChange,
  onPriceChange,
  onNumSeriesChange,
  onProviderCreation,
  setProviders
}) => {
  return (
    <Grid container spacing={2} sx={{ mb: 2 }}>
      <Grid item xs={12} sm={4}>
        <CustomSelectWithAdd
          elements={providers}
          label="Proveedor"
          selectedItem={selectedProvider}
          setSelectedItem={onProviderChange}
          setElements={setProviders}
          onItemAdded={onProviderCreation}
          dialogFields={[
            { name: 'name', label: 'Nombre del Proveedor', type: 'text', required: true },
            { name: 'phoneNumber', label: 'Número de Teléfono', type: 'tel', required: true },
            { name: 'address', label: 'Dirección', type: 'text', required: true },
            { name: 'comments', label: 'Comentarios', type: 'text' },
          ]}
        />
      </Grid>
      <Grid item xs={12} sm={4}>
        <TextField
          label="Precio de Compra"
          type="number"
          value={price}
          onChange={(e) => onPriceChange(e.target.value)}
          fullWidth
        />
      </Grid>
      <Grid item xs={12} sm={4}>
        <TextField
          label="Número de Series"
          value={numSeries}
          onChange={(e) => onNumSeriesChange(e.target.value)}
          fullWidth
        />
      </Grid>
    </Grid>
  );
};

================
File: src/pages/Products/ProductDialog/ProviderManager/components/ProvidersTable.jsx
================
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableRow,
  IconButton
} from '@mui/material';
import DeleteIcon from '@mui/icons-material/Delete';
export const ProvidersTable = ({ providers, onDelete, onProviderClick, editable }) => {
  return (
    <Table size="small" sx={{ mt: 4 }}>
      <TableHead>
        <TableRow>
          <TableCell>Proveedor</TableCell>
          <TableCell align="right">Precio de Compra</TableCell>
          <TableCell align="right">Número de Series</TableCell>
          {editable && <TableCell align="right">Acciones</TableCell>}
        </TableRow>
      </TableHead>
      <TableBody>
        {providers?.map((providerProduct, index) => (
          <TableRow
            key={index}
            onClick={() => onProviderClick(providerProduct.provider)}
            sx={{ cursor: 'pointer', '&:hover': { backgroundColor: 'rgba(0, 0, 0, 0.04)' } }}
          >
            <TableCell>{providerProduct.provider.name}</TableCell>
            <TableCell align="right">{providerProduct.price.cost}</TableCell>
            <TableCell align="right">{providerProduct.numSeries}</TableCell>
            {editable && (
              <TableCell align="right">
                <IconButton
                  onClick={(e) => {
                    e.stopPropagation();
                    onDelete(index);
                  }}
                  aria-label="delete"
                >
                  <DeleteIcon />
                </IconButton>
              </TableCell>
            )}
          </TableRow>
        ))}
      </TableBody>
    </Table>
  );
};

================
File: src/pages/Products/ProductDialog/ProviderManager/hooks/useProviderManager.js
================
import { useState } from 'react';
import { useProductDialogForm } from '../../ProductDialogFormContext';
import { useProviders } from './useProviders';
import { modifyAndClone } from '../../../../../util/generalUtils';
export const useProviderManager = (editable = true) => {
  const { product, setProduct } = useProductDialogForm();
  const { providers, setProviders, handleProviderCreation } = useProviders();
  const [selectedProvider, setSelectedProvider] = useState(null);
  const [price, setPrice] = useState('');
  const [numSeries, setNumSeries] = useState('');
  const [modalState, setModalState] = useState({
    isOpen: false,
    provider: null
  });
  const handleProviderChange = (provider) => {
    setSelectedProvider(provider);
  };
  const handlePriceChange = (value) => {
    setPrice(value);
  };
  const handleNumSeriesChange = (value) => {
    setNumSeries(value);
  };
  const handleAddProvider = () => {
    if (selectedProvider && price && numSeries) {
      const newProviderProduct = {
        providerId: selectedProvider.id,
        provider: selectedProvider,
        price: {
          cost: parseFloat(price),
          description: `Precio de compra de ${selectedProvider.name}`
        },
        numSeries: numSeries
      };
      setProduct(modifyAndClone(product, 'providers', [...(product.providers || []), newProviderProduct]));
      resetForm();
    }
  };
  const handleDeleteProvider = (index) => {
    const newProviders = product.providers.filter((_, i) => i !== index);
    setProduct(modifyAndClone(product, 'providers', newProviders));
  };
  const handleProviderClick = (provider) => {
    setModalState({
      isOpen: true,
      provider
    });
  };
  const resetForm = () => {
    setSelectedProvider(null);
    setPrice('');
    setNumSeries('');
  };
  return {
    state: {
      providers,
      selectedProvider,
      price,
      numSeries,
      modalState,
      product,
      editable
    },
    handlers: {
      handleProviderChange,
      handlePriceChange,
      handleNumSeriesChange,
      handleAddProvider,
      handleDeleteProvider,
      handleProviderClick,
      handleProviderCreation,
      setModalState,
      setProviders
    },
    isAddButtonDisabled: !selectedProvider || !price || !numSeries
  };
};

================
File: src/pages/Products/ProductDialog/ProviderManager/hooks/useProviders.js
================
import { useState, useEffect } from 'react';
import { getAll, createProvider } from '../../../../../services/ProviderService';
import { useSnackbar } from '../../../../../components/SnackbarContext';
import Provider from '../../../../../models/Provider';
export const useProviders = () => {
  const [providers, setProviders] = useState([]);
  const { openSnackbar } = useSnackbar();
  useEffect(() => {
    const fetchProviders = async () => {
      try {
        const response = await getAll();
        if (response?.providers) {
          setProviders(response.providers);
        }
      } catch (error) {
        openSnackbar(`Error al obtener los proveedores: ${error.message}`, 'error');
      }
    };
    fetchProviders();
  }, []);
  const handleProviderCreation = async (providers, newProviderData) => {
    try {
      const newProvider = await createProvider(new Provider(newProviderData));
      setProviders([...providers, newProvider]);
      openSnackbar(`Proveedor creado correctamente`, 'success');
      return newProvider.id;
    } catch (error) {
      openSnackbar(`Error al crear el proveedor: ${error.message}`, 'error');
      return null;
    }
  };
  return {
    providers,
    setProviders,
    handleProviderCreation
  };
};

================
File: src/pages/Products/ProductDialog/ProviderManager/index.jsx
================
import { Button, Typography } from '@mui/material';
import ExpandableCard from '../../../../components/ExpandableCard';
import { useProviderManager } from './hooks/useProviderManager';
import { ProviderForm } from './components/ProviderForm';
import { ProvidersTable } from './components/ProvidersTable';
import { ProviderDetailModal } from './components/ProviderDetailModal';
const ProviderManager = ({ editable = true }) => {
  const { state, handlers, isAddButtonDisabled } = useProviderManager(editable);
  return (
    <>
      <ExpandableCard title="Proveedores">
        <Typography gutterBottom variant="body2" component="p" sx={{ mb: 2 }}>
          {state.editable ? 'Añade y gestiona los proveedores del producto.' : ''}
        </Typography>
        {state.editable && (
          <>
            <ProviderForm
              providers={state.providers}
              selectedProvider={state.selectedProvider}
              price={state.price}
              numSeries={state.numSeries}
              onProviderChange={handlers.handleProviderChange}
              onPriceChange={handlers.handlePriceChange}
              onNumSeriesChange={handlers.handleNumSeriesChange}
              onProviderCreation={handlers.handleProviderCreation}
              setProviders={handlers.setProviders}
            />
            <Button
              onClick={handlers.handleAddProvider}
              variant="contained"
              sx={{ mt: 2 }}
              disabled={isAddButtonDisabled}
            >
              Agregar Proveedor
            </Button>
          </>
        )}
        <ProvidersTable
          providers={state.product.providers}
          onDelete={handlers.handleDeleteProvider}
          onProviderClick={handlers.handleProviderClick}
          editable={state.editable}
        />
      </ExpandableCard>
      <ProviderDetailModal
        open={state.modalState.isOpen}
        onClose={() => handlers.setModalState({ isOpen: false, provider: null })}
        provider={state.modalState.provider}
      />
    </>
  );
};
export default ProviderManager;

================
File: src/pages/Products/ProductDialog/RadiatorFlow.jsx
================
import ProductBasicInfo from './ProductBasicInfo';
import ProductDetails from './ProductDetails';
import ProductSummary from '../ProductSummary';
import { ProductTypes } from '../ProductsConstants';
import { useProductDialogForm } from './ProductDialogFormContext';
import { useProductDialogNavigation } from './ProductDialogNavigationContext';
import { DIALOG_STEPS } from './DialogSteps';
const RadiatorFlow = () => {
    const { product } = useProductDialogForm();
    const { currentStep } = useProductDialogNavigation();
    const STEP_COMPONENTS = {
        [DIALOG_STEPS.BASIC_INFO]: <ProductBasicInfo />,
        [DIALOG_STEPS.DETAILS]: <ProductDetails />,
        [DIALOG_STEPS.SUBMIT]: <ProductSummary
            productType={ProductTypes.RADIATOR}
            product={product}
            readOnly
        />
    };
    return (
        <div>
            {STEP_COMPONENTS[currentStep] || null}
        </div>
    );
};
export default RadiatorFlow;

================
File: src/pages/Products/ProductDialog/validators.js
================
import { ProductTypes } from '../ProductsConstants';
import { DIALOG_STEPS } from './DialogSteps';
export const STEP_VALIDATORS = {
    [DIALOG_STEPS.BASIC_INFO]: {
        [ProductTypes.RADIATOR]: (product) => {
            return Boolean(
                product?.stockCount
            );
        }
    },
    [DIALOG_STEPS.DETAILS]: {
        [ProductTypes.RADIATOR]: (product) => {
            return Boolean(
                product?.carModels &&
                product?.carModels.length > 0
            );
        }
    },
    [DIALOG_STEPS.SUBMIT]: {
        [ProductTypes.RADIATOR]: (product) => {
            return Boolean(
                product?.price &&
                product?.cost &&
                Number(product.price) > Number(product.cost)
            );
        }
    }
};

================
File: src/pages/Products/ProductDialogContext.jsx
================

import { createContext, useContext, useState } from 'react';
import EventBus from '../../services/EventBus';
export const DIALOG_EVENTS = {
  CLOSE: 'dialog:close'
};
const ProductDialogContext = createContext();
export const useProductDialogContext = () => {
  const context = useContext(ProductDialogContext);
  if (!context) {
    throw new Error('useProductDialogContext must be used within a ProductDialogProvider');
  }
  return context;
};
export const ProductDialogProvider = ({ children }) => {
  const [isOpen, setIsOpen] = useState(false);
  const [mode, setMode] = useState(null);
  const [productId, setProductId] = useState(null);
  const openDialog = (mode, productId = null) => {
    setMode(mode);
    setProductId(productId);
    setIsOpen(true);
  };
  const closeDialog = () => {
    setIsOpen(false);
    setMode(null);
    setProductId(null);
    EventBus.emit(DIALOG_EVENTS.CLOSE);
  };
  return (
    <ProductDialogContext.Provider value={{ isOpen, mode, productId, openDialog, closeDialog, setMode }}>
      {children}
    </ProductDialogContext.Provider>
  );
};

================
File: src/pages/Products/ProductLoadingContext.jsx
================
import { createContext, useContext, useState } from 'react';
const ProductLoadingContext = createContext();
export const useProductLoadingContext = () => {
  const context = useContext(ProductLoadingContext);
  if (context === undefined) {
    throw new Error('useProductLoadingContext must be used within a ProductLoadingProvider');
  }
  return context;
};
export const ProductLoadingProvider = ({ children }) => {
  const [loading, setLoading] = useState(false);
  const value = {
    loading,
    setLoading,
  };
  return (
    <ProductLoadingContext.Provider value={value}>
      {children}
    </ProductLoadingContext.Provider>
  );
};

================
File: src/pages/Products/ProductSearchContext.jsx
================
import { createContext, useContext, useState } from 'react';
import { SearchOptions } from './ProductsConstants';
const ProductSearchContext = createContext();
export const useProductSearchContext = () => {
  const context = useContext(ProductSearchContext);
  if (context === undefined) {
    throw new Error('useProductSearchContext must be used within a ProductSearchProvider');
  }
  return context;
};
export const ProductSearchProvider = ({ children }) => {
  const [searchTerm, setSearchTerm] = useState('');
  const [searchOption, setSearchOption] = useState(SearchOptions.BRANDS);
  const handleSearchOptionChange = (value) => {
    setSearchTerm('');
    setSearchOption(value);
  };
  const value = {
    searchTerm,
    searchOption,
    setSearchTerm,
    setSearchOption,
    handleSearchOptionChange,
  };
  return (
    <ProductSearchContext.Provider value={value}>
      {children}
    </ProductSearchContext.Provider>
  );
};

================
File: src/pages/Products/ProductSelectionContext.jsx
================
import { createContext, useContext, useState } from 'react';
import { PATHS } from '../../constants/paths';
const ProductSelectionContext = createContext();
export const useProductSelectionContext = () => {
  const context = useContext(ProductSelectionContext);
  if (context === undefined) {
    throw new Error('useProductSelectionContext must be used within a ProductSelectionProvider');
  }
  return context;
};
export const ProductSelectionProvider = ({ children }) => {
  const [productType, setProductType] = useState(null);
  const [selectedBrand, setSelectedBrand] = useState(null);
  const [selectedCarModel, setSelectedCarModel] = useState(null);
  const [selectedProduct, setSelectedProduct] = useState(null);
  const handleChangeProductType = (newValue) => {
    setProductType(newValue);
  };
  const clearSelection = (path) => {
    if (path === PATHS.BRANDS) {
      setSelectedCarModel(null);
      setSelectedBrand(null)
    } else if (path === PATHS.MODELS) {
      setSelectedCarModel(null)
    } else if (path === PATHS.PRODUCTS) {
      setSelectedBrand(null)
      setSelectedCarModel(null)
      setProductType(null)
    }
  };
  const value = {
    productType,
    selectedBrand,
    selectedCarModel,
    selectedProduct,
    setProductType,
    setSelectedBrand,
    setSelectedCarModel,
    setSelectedProduct,
    handleChangeProductType,
    clearSelection,
  };
  return (
    <ProductSelectionContext.Provider value={value}>
      {children}
    </ProductSelectionContext.Provider>
  );
};

================
File: src/pages/Products/ProductSummary.jsx
================
import { Box, TextField, Grid } from '@mui/material';
import { RadiatorForm } from "./Forms/RadiatorBasicForm";
import ImageUpload from './ProductDialog/ImageUpload';
import { ProductTypes } from './ProductsConstants';
import { useProductSelectionContext } from './ProductSelectionContext';
import { useProductDialogForm } from './ProductDialog/ProductDialogFormContext';
import ModelManager from './ProductDialog/ModelManager';
import PriceManager from './ProductDialog/PriceManager';
import ProviderManager from './ProductDialog/ProviderManager';
const ProductSummary = () => {
    const { productType } = useProductSelectionContext();
    const { product } = useProductDialogForm();
    let images = product.files.map(file => file.fileData);
    return (
        <div>
            <Box sx={{ paddingY: 2 }}>
                <Grid container spacing={2}>
                    <Grid item xs={12} md={7}>
                        <Box sx={{ paddingX: 5 }}>
                            <TextField
                                label="Nombre del Producto"
                                variant="outlined"
                                fullWidth
                                value={product.name || ''}
                                InputProps={{
                                    readOnly: true,
                                }}
                                sx={{ marginTop: 2 }}
                            />
                            {productType === ProductTypes.RADIATOR && (
                                <RadiatorForm product={product} readOnly={true} />
                            )}
                        </Box>
                    </Grid>
                    <Grid item xs={12} md={5} sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
                        <Box sx={{ display: 'flex', justifyContent: 'center', maxWidth: 450 }}>
                            <ImageUpload uploadedImages={images} readOnly />
                        </Box>
                    </Grid>
                </Grid>
                {}
                <Grid container spacing={2}>
                    <Grid item xs={12}>
                        <ModelManager readOnly={true} />
                    </Grid>
                    <Grid item xs={12}>
                        <PriceManager readOnly={true} />
                    </Grid>
                    <Grid item xs={12}>
                        <ProviderManager editable={false} />
                    </Grid>
                </Grid>
            </Box>
        </div>
    );
};
export default ProductSummary;

================
File: src/pages/Products/ProductTypeSelector/ProductCard.jsx
================
import { useNavigate } from 'react-router-dom';
import { Card, CardContent, CardActionArea, CardMedia, Typography } from '@mui/material';
import { useProductSelectionContext } from '../ProductSelectionContext';
const ProductCard = ({ title, description, path, image, productType }) => {
  const navigate = useNavigate();
  const { handleChangeProductType } = useProductSelectionContext();
  const handleCardClick = () => {
    handleChangeProductType(productType);
    navigate(path);
  };
  return (
    <Card>
      <CardActionArea onClick={handleCardClick}>
        {image && (
          <CardMedia
            component="img"
            height="250"
            image={image}
            alt={title}
          />
        )}
        <CardContent>
          <Typography variant="h5" component="div">
            {title}
          </Typography>
          <Typography variant="body2" color="text.secondary">
            {description}
          </Typography>
        </CardContent>
      </CardActionArea>
    </Card>
  );
};
export default ProductCard;

================
File: src/pages/Products/ProductTypeSelector/ProductTypeSelector.jsx
================

import { Grid } from '@mui/material';
import ProductCard from './ProductCard';
import RadiatorImg from '/src/assets/radiator.png';
import CapsImg from '/src/assets/cap.png';
import FansImg from '/src/assets/fan.png';
import { ProductTypes } from '../ProductsConstants';
import { useProductSelectionContext } from '../ProductSelectionContext';
import { useNavigate } from 'react-router-dom';
import { useEffect } from 'react';
import { PATHS } from '../../../constants/paths';
const ProductTypeSelector = () => {
  const { handleChangeProductType } = useProductSelectionContext();
  const navigate = useNavigate();
  useEffect(() => {
  }, []);
  const handleCardClick = (productTypeValue) => {
    handleChangeProductType(productTypeValue);
    navigate(PATHS.BRANDS);
  };
  return (
    <Grid container spacing={3}>
      <Grid item xs={12} sm={4}>
        <ProductCard
          title="Radiadores"
          description="Para todo tipo de vehículos."
          path={PATHS.BRANDS}
          image={RadiatorImg}
          productType={ProductTypes.RADIATOR}
          onClick={() => handleCardClick(ProductTypes.RADIATOR)}
        />
      </Grid>
      <Grid item xs={12} sm={4}>
        <ProductCard
          title="Tapas"
          description="De radiador y depósito"
          path={PATHS.BRANDS}
          image={CapsImg}
          productType={ProductTypes.CAP}
          onClick={() => handleCardClick(ProductTypes.CAP)}
        />
      </Grid>
      <Grid item xs={12} sm={4}>
        <ProductCard
          title="Abanicos"
          description="Sistema de enfriamiento"
          path={PATHS.BRANDS}
          image={FansImg}
          productType={ProductTypes.FAN}
          onClick={() => handleCardClick(ProductTypes.FAN)}
        />
      </Grid>
    </Grid>
  );
};
export default ProductTypeSelector;

================
File: src/pages/Products/ProductViewer/ProductContainer.jsx
================
import { useEffect, useState } from 'react';
import '../../../styles/brandContainer.css';
import { useSnackbar } from '../../../components/SnackbarContext';
import { getAllCarModelsProducts } from '../../../services/CarModelService';
import { useProductSelectionContext } from '../ProductSelectionContext';
import { useProductSearchContext } from '../ProductSearchContext';
import { useProductLoadingContext } from '../ProductLoadingContext';
import { Screens, SearchOptions } from '../ProductsConstants';
import ProductList from './ProductList';
import { ProductCarModel } from '../../../models/ProductCarModel';
import { deleteProduct } from '../../../services/ProductService';
import { Box, CircularProgress } from '@mui/material';
import { useProductDialogContext } from '../ProductDialogContext';
import { StorageAdapter } from '../../../services/StorageAdapter';
const ProductContainer = () => {
  const [productCarModels, setProductCarModels] = useState([]);
  const [cachedProducts, setCachedProducts] = useState([]);
  const { openSnackbar } = useSnackbar();
  const { setSelectedProduct, selectedCarModel, productType } = useProductSelectionContext();
  const { searchTerm, searchOption } = useProductSearchContext();
  const { setLoading, loading } = useProductLoadingContext();
  const { openDialog } = useProductDialogContext();
  const handleProductSelect = (e, item) => {
    const productCarModel = productCarModels.find(pcm => pcm.product.id === item.id);
    setSelectedProduct(productCarModel.product, Screens.PRODUCTS);
    openDialog('view', productCarModel.product.id);
  };
  const handleOnDelete = async (productCarModel) => {
    console.log('handleOnDelete', productCarModel);
    try {
      let result = await deleteProduct(productCarModel.productId);
      if (result) {
        const products = productCarModels.filter(pcm => pcm.product.id !== productCarModel.productId);
        setProductCarModels(products);
        setCachedProducts(products);
        openSnackbar('Producto eliminado correctamente', 'success');
      } else {
        openSnackbar('Error al eliminar el producto', 'error');
      }
    } catch (error) {
      openSnackbar(`Error al eliminar el producto: ${error.errorMessage}`, 'error');
    }
  };
  useEffect(() => {
    setLoading(true);
    const fetchProducts = async () => {
      try {
        let productCarModelsData = [];
        if (searchOption === SearchOptions.PRODUCTS) {
          productCarModelsData = await getAllCarModelsProducts(productType, selectedCarModel?.id);
          if (Array.isArray(productCarModelsData) && productCarModelsData.length === 0) {
            openSnackbar('No hay datos para el modelo seleccionado', 'info');
          }
        }
        productCarModelsData = productCarModelsData.map(productCarModel => new ProductCarModel(productCarModel));
        const productsWithImages = await Promise.all(productCarModelsData.map(async (productCarModel) => {
          let file = productCarModel.product.files.find(file => file.orderId === 1);
          if (file) {
            const imageUrl = await StorageAdapter.getFileURL(file.storagePath).catch(error => {
              console.error('Error al obtener url imagen de storage para producto:', productCarModel.product.name, error);
              return '';
            });
            return { ...productCarModel, imageUrl };
          }
          return productCarModel;
        }));
        setProductCarModels(productsWithImages);
        setCachedProducts(productsWithImages); // Guardar en cache
        setLoading(false);
      } catch (error) {
        console.error('Error al obtener los productos:', error);
        setLoading(false);
        openSnackbar(`Error al cargar los productos: ${error.errorMessage}`, 'error');
      }
    };
    fetchProducts();
  }, [searchOption, selectedCarModel, productType, setLoading, openSnackbar]);
  useEffect(() => {
    const filterProducts = () => {
      if (searchTerm) {
        const filteredProducts = cachedProducts.filter(product =>
          product.product.name.toLowerCase().includes(searchTerm.toLowerCase())
        );
        setProductCarModels(filteredProducts);
      } else {
        setProductCarModels(cachedProducts);
      }
    };
    filterProducts();
  }, [searchTerm, cachedProducts]);
  if (loading) {
    return (
      <Box display="flex" justifyContent="center" alignItems="center" minHeight="200px">
        <CircularProgress size={40} />
      </Box>
    );
  }
  return (
    <ProductList products={productCarModels} onProductSelect={handleProductSelect} handleOnDelete={handleOnDelete} />
  );
};
export default ProductContainer;

================
File: src/pages/Products/ProductViewer/ProductList.jsx
================
import ItemsCardList from "../../../components/ItemCardList";
const columns = [
  { field: 'dpi', headerName: 'DPI', showLabel: false, valueStyle: { fontWeight: 'bold', fontSize: '16px' } },
  { field: 'name', headerName: 'Nombre', showLabel: false, valueStyle: { fontSize: '16px' } }
];
const ProductList = ({ products, onProductSelect, handleOnDelete }) => {
  return (
    <div>
      <ItemsCardList rows={products.map(productCarModel => ({
        id: productCarModel.product.id,
        dpi: productCarModel.product.dpi,
        productId: productCarModel.product.id,
        name: productCarModel.product.name,
        imageUrl: productCarModel.imageUrl
      }))} columns={columns}
        cardContentMinHeight={150}
        itemCardProps={{
          onClick: onProductSelect, menuOptions: [
            {
              label: 'Eliminar',
              onClick: handleOnDelete
            }
          ]
        }} />
    </div>
  );
};
export default ProductList;

================
File: src/pages/Products/ProductsConstants.js
================
export const ProductTypes = {
    RADIATOR: 1,
    CAP: 2,
    FAN: 3
}
export const Screens = {
    BRANDS: 1,
    MODELS: 2,
    PRODUCTS: 3
};
export const SearchOptions = {
    BRANDS: 1,
    MODELS: 2,
    PRODUCTS: 3
};
export const FileTypes = {
    PRODUCT_IMAGE: 2,
    BRAND_IMAGE: 1,
};
export const ProductTypesNamesEsp = {
    1: 'Radiadores',
    2: 'Tapas',
    3: 'Abanicos'
};
export const ProductTypesNamesEng = {
    1: 'radiators',
    2: 'caps',
    3: 'fans'
};

================
File: src/pages/Products/ProductsPage.jsx
================

import { Routes, Route } from 'react-router-dom';
import ProductsNavigationBar from '../../components/ProductsNavigationBar';
import ProductTypeSelector from './ProductTypeSelector/ProductTypeSelector';
import SearchWrapper from './SearchWrapper';
import BrandContainer from './BrandViewer/BrandContainer';
import CarModelListContainer from './ModelViewer/CarModelContainer';
import ProductContainer from './ProductViewer/ProductContainer';
import { ProductSelectionProvider } from './ProductSelectionContext';
import { ProductSearchProvider } from './ProductSearchContext';
import { ProductDialogProvider } from './ProductDialogContext';
import { ProductLoadingProvider } from './ProductLoadingContext';
import { ProductDialogNavigationProvider } from './ProductDialog/ProductDialogNavigationContext';
import { ProductDialogFormProvider } from './ProductDialog/ProductDialogFormContext';
import { ProductDialogImageProvider } from './ProductDialog/ProductDialogImageContext';
import { Box } from '@mui/material';
export default function ProductsPage() {
  return (
    <ProductSelectionProvider>
      <ProductSearchProvider>
        <ProductDialogProvider>
          <ProductDialogImageProvider>
            <ProductDialogFormProvider>
              <ProductDialogNavigationProvider>
                <ProductLoadingProvider>
                  <ProductsNavigationBar />
                  <Box mt={2}></Box>
                  <Routes>
                    <Route path="/" element={<ProductTypeSelector />} />
                    <Route path="list/*" element={<SearchWrapper />}>
                      <Route path="brands" element={<BrandContainer />} />
                      <Route path="brands/models" element={<CarModelListContainer />} />
                      <Route path="brands/models/products" element={<ProductContainer />} />
                    </Route>
                  </Routes>
                </ProductLoadingProvider>
              </ProductDialogNavigationProvider>
            </ProductDialogFormProvider>
          </ProductDialogImageProvider>
        </ProductDialogProvider>
      </ProductSearchProvider>
    </ProductSelectionProvider>
  );
}

================
File: src/pages/Products/SearchWrapper.jsx
================

import { Outlet } from 'react-router-dom';
import { Box, Fab, Tooltip } from '@mui/material';
import AddIcon from '@mui/icons-material/Add';
import ProductDialog from './ProductDialog/ProductDialog';
import CustomSearchBar from '../../components/CustomSearchBar';
import { useProductDialogContext } from './ProductDialogContext';
const SearchWrapper = () => {
  const { openDialog } = useProductDialogContext();
  return (
    <Box>
      <Box sx={{ width: '100%', '& > *:not(style)': { mb: 3 } }}>
        <CustomSearchBar />
        <Box sx={{ flexGrow: 1, overflow: 'auto', mt: 2 }}>
          <Box sx={{ height: 'calc(100vh - 290px)', overflowY: 'auto' }}>
            <Outlet />
          </Box>
        </Box>
        <Tooltip title="Agregar nuevo producto">
          <Fab
            color="primary"
            aria-label="add"
            sx={{ position: 'absolute', bottom: 16, right: 16 }}
            onClick={() => openDialog('create')}
          >
            <AddIcon />
          </Fab>
        </Tooltip>
        <ProductDialog />
      </Box>
    </Box>
  );
};
export default SearchWrapper;

================
File: src/pages/Providers/ProviderDialog.jsx
================
import { useState, forwardRef } from 'react';
import { Dialog, Button, AppBar, Toolbar, IconButton, Typography, Slide } from "@mui/material";
import CloseIcon from '@mui/icons-material/Close';
import ProviderForm from './ProviderForm';
const Transition = forwardRef(function Transition(props, ref) {
    return <Slide direction="up" ref={ref} {...props} />;
});
const ProviderDialog = ({ open, onClose, addProviderToList, updateProviderInfo, providerId }) => {
    const [formCompleted, setFormCompleted] = useState(false);
    const [formData, setFormData] = useState({});
    const handleSave = async (formData) => {
        try {
            if (providerId) {
                await updateProviderInfo(providerId, formData);
            } else {
                await addProviderToList(formData);
            }
        } catch (error) {
            console.error("Error al guardar proveedor:", error);
        }
    };
    return (
        <Dialog
            fullScreen
            open={open}
            onClose={onClose}
            aria-labelledby="dialog-title"
            TransitionComponent={Transition}
        >
            <AppBar sx={{ position: 'relative' }}>
                <Toolbar>
                    <IconButton
                        edge="start"
                        color="inherit"
                        onClick={onClose}
                        aria-label="close"
                    >
                        <CloseIcon />
                    </IconButton>
                    <Typography sx={{ ml: 2, flex: 1 }} variant="h6" component="div">
                        Agregar Proveedor
                    </Typography>
                    <Button autoFocus color="inherit" onClick={() => handleSave(formData)} disabled={!formCompleted}>
                        Guardar
                    </Button>
                </Toolbar>
            </AppBar>
            <ProviderForm setFormCompleted={setFormCompleted} setFormData={setFormData} providerId={providerId}/>
        </Dialog>
    );
};
export default ProviderDialog;

================
File: src/pages/Providers/ProviderForm.jsx
================
import { useState, useEffect } from 'react';
import { FormControl, TextField, Box, Typography, Alert } from '@mui/material';
import { getProvider } from '../../services/ProviderService';
const ProviderForm = ({ setFormCompleted, setFormData, providerId }) => {
    const [phoneNumber, setPhoneNumber] = useState('');
    const [name, setName] = useState('');
    const [address, setAddress] = useState('');
    const [comments, setComments] = useState('');
    const [error, setError] = useState({
        name: false,
        phoneNumber: false,
    });
    useEffect(() => {
        // Verificar si los campos requeridos están completos
        setFormCompleted(name.trim() !== '' && phoneNumber.trim() !== '');
    }, [name, phoneNumber, setFormCompleted]);
    const handlePhoneNumberChange = (event) => {
        const inputValue = event.target.value;
        if (/^\d*$/.test(inputValue)) {
            setPhoneNumber(inputValue);
        }
    };
    const handleBlur = (field) => {
        switch (field) {
            case 'nombre':
                setError((prevError) => ({ ...prevError, name: name.trim() === '' }));
                break;
            case 'telefono':
                setError((prevError) => ({ ...prevError, phoneNumber: phoneNumber.trim() === '' }));
                break;
            default:
                break;
        }
    };
    useEffect(() => {
        if (providerId !== null && typeof providerId === 'number') {
            try {
                const fetchProvider = async () => {
                    const provider = await getProvider(providerId);
                    if (provider) {
                        setName(provider.name);
                        setPhoneNumber(provider.phoneNumber);
                        setAddress(provider.address);
                        setComments(provider.comments);
                    }
                };
                fetchProvider();
            } catch (error) {
                console.log("Hubo un error:", error);
            }
        }
    }, [providerId]);
    useEffect(() => {
        setFormData({
            name: name,
            phoneNumber: phoneNumber,
            address: address,
            comments: comments
        });
    }, [name, phoneNumber, address, comments, setFormData]);
    return (
        <FormControl sx={{ mt: 2, textAlign: 'center', marginLeft: 10, marginRight: 10 }}>
            <Box sx={{ mb: 2 }}>
                <Typography variant="h6" gutterBottom>
                    Información del Proveedor
                </Typography>
            </Box>
            <TextField
                required
                label="Nombre"
                variant="outlined"
                fullWidth
                value={name}
                onChange={(e) => setName(e.target.value)}
                onBlur={() => handleBlur('nombre')}
                sx={{ mb: 2 }}
            />
            {error.name && <Alert severity="error">Por favor ingrese el nombre</Alert>}
            <TextField
                required
                label="Número Telefónico"
                variant="outlined"
                fullWidth
                value={phoneNumber}
                onChange={handlePhoneNumberChange}
                onBlur={() => handleBlur('telefono')}
                inputProps={{
                    maxLength: 10,
                    inputMode: 'numeric',
                }}
                sx={{ mb: 2 }}
            />
            {error.telefono && <Alert severity="error">Por favor ingrese el número de teléfono</Alert>}
            <TextField
                label="Dirección"
                variant="outlined"
                fullWidth
                value={address}
                onChange={(e) => setAddress(e.target.value)}
                onBlur={() => handleBlur('direccion')}
                sx={{ mb: 2 }}
            />
            <TextField
                label="Comentarios"
                multiline
                rows={4}
                value={comments}
                onChange={(e) => setComments(e.target.value)}
                variant="outlined"
                fullWidth
                sx={{ mb: 2 }}
            />
        </FormControl>
    );
};
export default ProviderForm;

================
File: src/pages/Providers/ProviderPage.jsx
================
import { useState, useEffect } from 'react';
import {
    Tooltip, Fab, Box, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Button, Modal, Card, CardContent, Typography, IconButton
} from "@mui/material";
import AddIcon from "@mui/icons-material/Add";
import DeleteIcon from '@mui/icons-material/Delete';
import EditIcon from '@mui/icons-material/Edit';
import PreviewIcon from '@mui/icons-material/Preview';
import CustomInput from "../../components/CustomInput";
import ProviderDialog from "./ProviderDialog";
import { useMobile } from "../../components/MobileProvider";
import { getAll, deleteProvider, createProvider, updateProvider } from '../../services/ProviderService';
import TablePagination from '@mui/material/TablePagination';
import { useSnackbar } from '../../components/SnackbarContext';
import GenericNavigationBar from '../../components/GenericNavigationBar';
const CustomSearchBar = ({ searchTerm, handleSearchChange }) => {
    return (
        <div style={{ display: 'flex', alignItems: 'center', marginTop: '10px', marginBottom: '10px' }}>
            <div style={{ flex: 1 }}>
                <CustomInput
                    placeholder={'Buscar Proveedor'}
                    value={searchTerm}
                    onChange={handleSearchChange}
                />
            </div>
        </div>
    );
};
export default function ProvidersPage() {
    const [page, setPage] = useState(0);
    const [rowsPerPage, setRowsPerPage] = useState(6);
    const [totalCount, setTotalCount] = useState(0);
    const [openDialog, setOpenDialog] = useState(false);
    const [selectedRowIndex, setSelectedRowIndex] = useState(null);
    const [openCommentsModal, setOpenCommentsModal] = useState(false);
    const [searchTerm, setSearchTerm] = useState('');
    const [rows, setRows] = useState([]);
    const [providerId, setProviderId] = useState(null);
    const responsive = useMobile();
    const { openSnackbar } = useSnackbar(); // Usa el hook de Snackbar
    useEffect(() => {
        getProviders();
    }, [page, rowsPerPage]); // Run effect whenever page or rowsPerPage change
    const handleOpenDialog = (e, id) => {
        if (id) {
            setProviderId(id);
        } else {
            setProviderId(null);
        }
        setOpenDialog(true);
    };
    const handleCloseDialog = () => {
        setOpenDialog(false);
    };
    const handleOpenCommentsModal = (index) => {
        setSelectedRowIndex(index);
        setOpenCommentsModal(true);
    };
    const handleCloseCommentsModal = () => {
        setOpenCommentsModal(false);
    };
    const getProviders = async () => {
        try {
            const response = await getAll(page + 1, rowsPerPage);
            if (response) {
                setRows(response.providers);
                setTotalCount(response.totalCount);
            } else {
                openSnackbar('¡Error en el Servicio! Por favor, inténtalo de nuevo más tarde.', 'error');
            }
        } catch (error) {
            console.error(error);
            openSnackbar('¡Error cargando proveedores!', 'error');
        }
    };
    const updateProviderInfo = async (providerId, updatedData) => {
        try {
            const updated = await updateProvider(providerId, updatedData);
            if (updated) {
                getProviders();
                handleCloseDialog();
                openSnackbar('¡Proveedor actualizado con éxito!', 'info');
            } else {
                openSnackbar('¡Error al actualizar proveedor! Por favor, inténtalo de nuevo más tarde.', 'error');
            }
        } catch (error) {
            openSnackbar('¡Error al actualizar proveedor!', 'error');
        }
    };
    const handleDeleteProvider = async (id) => {
        try {
            const provider = await deleteProvider(id);
            if (provider) {
                getProviders();
                openSnackbar('¡Proveedor eliminado con éxito!', 'info');
            } else {
                openSnackbar('¡Error al eliminar proveedor! Por favor, inténtalo de nuevo más tarde.', 'error');
            }
        } catch (error) {
            openSnackbar('¡Error al eliminar proveedor!', 'error');
        }
    };
    const addProviderToList = async (newProvider) => {
        try {
            await createProvider(newProvider);
            getProviders();
            handleCloseDialog();
            openSnackbar('¡Proveedor agregado con éxito!', 'success');
        } catch (error) {
            console.error(error);
            openSnackbar('¡Error al agregar proveedor!', 'error');
        }
    };
    const handleSearchChange = (e) => {
        setSearchTerm(e.target.value);
        setPage(0);
    };
    return (
        <Box sx={{ width: '100%', '& > *:not(style)': { mb: 3 } }}>
            <GenericNavigationBar />
            <CustomSearchBar searchTerm={searchTerm} handleSearchChange={handleSearchChange} />
            <Box sx={{ height: 'calc(100% - 56px)', overflow: 'auto' }}>
                <TableContainer component={Paper}>
                    <Table >
                        <TableHead>
                            <TableRow sx={{ backgroundColor: '#f0f0f0' }}>
                                <TableCell sx={{ fontWeight: 'bold' }}>Nombre</TableCell>
                                {responsive.isMobile && (
                                    <TableCell sx={{ fontWeight: 'bold' }}>Acciones</TableCell>
                                )}
                                {!responsive.isMobile && (
                                    <>
                                        <TableCell sx={{ fontWeight: 'bold' }}>Teléfono</TableCell>
                                        <TableCell sx={{ fontWeight: 'bold' }}>Dirección</TableCell>
                                        <TableCell sx={{ fontWeight: 'bold' }}>Acciones</TableCell>
                                    </>
                                )}
                            </TableRow>
                        </TableHead>
                        <TableBody>
                            {rows.filter(row => row.name.toLowerCase().includes(searchTerm.toLowerCase())).map((row, index) => (
                                <TableRow key={row.name} >
                                    <TableCell component="th" scope="row">
                                        {row.name}
                                    </TableCell>
                                    {responsive.isMobile && (
                                        <TableCell sx={{ display: "flex", gap: "10px" }}>
                                            <Tooltip title="Comentarios">
                                                <IconButton onClick={() => handleOpenCommentsModal(index)} color='info'>
                                                    <PreviewIcon />
                                                </IconButton>
                                            </Tooltip>
                                            <Tooltip title="Editar">
                                                <IconButton color='info' onClick={() => handleOpenDialog(row.id)}>
                                                    <EditIcon />
                                                </IconButton>
                                            </Tooltip>
                                            <Tooltip title="Eliminar">
                                                <IconButton aria-label="delete" color="error" onClick={() => handleDeleteProvider(row.id)}>
                                                    <DeleteIcon />
                                                </IconButton>
                                            </Tooltip>
                                        </TableCell>
                                    )}
                                    {!responsive.isMobile && (
                                        <>
                                            <TableCell>{row.phoneNumber}</TableCell>
                                            <TableCell>{row.address}</TableCell>
                                            <TableCell sx={{ display: "flex", gap: "10px" }}>
                                                <Tooltip title="Comentarios">
                                                    <IconButton variant="outlined" onClick={() => handleOpenCommentsModal(index)}>
                                                        <PreviewIcon />
                                                    </IconButton>
                                                </Tooltip>
                                                <Tooltip title="Editar">
                                                    <IconButton color='info' onClick={(e) => handleOpenDialog(e, row.id)}>
                                                        <EditIcon />
                                                    </IconButton>
                                                </Tooltip>
                                                <Tooltip title="Eliminar">
                                                    <IconButton aria-label="delete" color="error" onClick={() => handleDeleteProvider(row.id)}>
                                                        <DeleteIcon />
                                                    </IconButton>
                                                </Tooltip>
                                            </TableCell>
                                        </>
                                    )}
                                </TableRow>
                            ))}
                        </TableBody>
                    </Table>
                    <Box sx={{ display: 'flex', justifyContent: 'flex-start' }}>
                        <TablePagination
                            rowsPerPageOptions={[5]}
                            component="div"
                            count={totalCount}
                            rowsPerPage={rowsPerPage}
                            page={page}
                            onPageChange={(e, newPage) => setPage(newPage)}
                            onRowsPerPageChange={(e) => {
                                setRowsPerPage(parseInt(e.target.value, 10));
                                setPage(0);
                            }}
                        />
                    </Box>
                </TableContainer>
            </Box>
            <Modal
                open={openCommentsModal}
                onClose={handleCloseCommentsModal}
                aria-labelledby="modal-modal-title"
                aria-describedby="modal-modal-description"
            >
                <Box sx={{
                    display: 'flex',
                    justifyContent: 'center',
                    alignItems: 'center',
                    height: '100vh',
                }}>
                    <Card sx={{ maxWidth: 400 }}>
                        <CardContent>
                            <Typography variant="h5" component="div" sx={{ marginBottom: 2 }}>
                                Detalles del Proveedor
                            </Typography>
                            <Typography variant="body2" color="text.secondary" gutterBottom>
                                <strong>Nombre:</strong> {rows[selectedRowIndex] && rows[selectedRowIndex].name}
                            </Typography>
                            <Typography variant="body2" color="text.secondary" gutterBottom>
                                <strong>Teléfono:</strong> {rows[selectedRowIndex] && rows[selectedRowIndex].phoneNumber}
                            </Typography>
                            <Typography variant="body2" color="text.secondary" gutterBottom>
                                <strong>Dirección:</strong> {rows[selectedRowIndex] && rows[selectedRowIndex].address}
                            </Typography>
                            <Typography variant="body2" color="text.secondary" gutterBottom>
                                <strong>Comentarios:</strong> {rows[selectedRowIndex] && rows[selectedRowIndex].comments}
                            </Typography>
                            <Button variant="contained" onClick={handleCloseCommentsModal} style={{ marginTop: 2 }}>Cerrar</Button>
                        </CardContent>
                    </Card>
                </Box>
            </Modal>
            <Fab
                color="primary"
                aria-label="add"
                sx={{ position: 'absolute', bottom: 16, right: 16 }}
                onClick={handleOpenDialog}
            >
                <AddIcon />
            </Fab>
            <ProviderDialog
                open={openDialog}
                onClose={handleCloseDialog}
                addProviderToList={addProviderToList}
                providerId={providerId}
                updateProviderInfo={updateProviderInfo}
            />
        </Box>
    );
}

================
File: src/pages/Users/UserCreation.jsx
================
import { useState } from 'react';
import {
  Container, Grid, Typography, Button, TextField, FormControl, InputLabel, Select, MenuItem,
  InputAdornment, IconButton, Alert
} from '@mui/material';
import dayjs from 'dayjs';
import { LocalizationProvider, DatePicker } from '@mui/x-date-pickers';
import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';
import VisibilityIcon from '@mui/icons-material/Visibility';
import VisibilityOffIcon from '@mui/icons-material/VisibilityOff';
import { supabase } from '../../services/supabaseClient';
import validateEmail from '../../util/EmailVerifier';
import { createUser } from '../../services/UserService';
import Person from '../../models/Person';
import User from '../../models/User';
import { useSnackbar } from '../../components/SnackbarContext';
export default function UserCreation() {
  const [userData, setUserData] = useState({
    firstName: '',
    lastName: '',
    email: '',
    phoneNumber: '',
    address: '',
    birthDate: dayjs(),
    password: '',
    confirmPassword: '',
    active: 1,
    roleId: ''
  });
  const [passwordsMatch, setPasswordsMatch] = useState(true);
  const [showPasswords, setShowPasswords] = useState(false);
  const { openSnackbar } = useSnackbar(); // Usa el hook del Snackbar
  const handleDateChange = (newValue) => {
    setUserData({ ...userData, birthDate: newValue });
  };
  const handleInputChange = (event) => {
    const { name, value } = event.target;
    setUserData({ ...userData, [name]: value });
  };
  const handleConfirmPasswordBlur = () => {
    const arePasswordsMatching = userData.confirmPassword === userData.password;
    setPasswordsMatch(arePasswordsMatching);
  };
  const handleTogglePasswordVisibility = () => {
    setShowPasswords(!showPasswords);
  };
  const handlePhoneNumberChange = (event) => {
    let inputValue = event.target.value.replace(/\D/g, ''); // Elimina todos los caracteres que no sean números
    inputValue = inputValue.slice(0, 10); // Limita la longitud a 10 dígitos
    setUserData({ ...userData, phoneNumber: inputValue });
  };
  const handleSubmit = async () => {
    if (!validateEmail(userData.email)) {
      openSnackbar('El correo electrónico no es válido.', 'error');
      return;
    }
    try {
      const { data: authData, error: authError } = await supabase.auth.signUp({
        email: userData.email,
        password: userData.password,
        options: {
          data: {
            first_name: userData.firstName,
            last_name: userData.lastName,
            role_id: userData.roleId
          },
          emailRedirectTo: undefined
        }
      });
      if (authError) throw authError;
      const user = new User({
        id: authData.user.id,
        person: new Person({
          name: userData.firstName,
          lastName: userData.lastName,
          email: userData.email,
          phoneNumber: userData.phoneNumber,
          address: userData.address,
          birthDate: userData.birthDate.toISOString(),
          active: userData.active
        }),
        roleId: userData.roleId
      });
      await createUser(user);
      openSnackbar('¡Usuario creado correctamente!', 'success');
      setUserData({
        firstName: '',
        lastName: '',
        email: '',
        phoneNumber: '',
        address: '',
        birthDate: dayjs(),
        active: 1,
        password: '',
        confirmPassword: '',
        roleId: ''
      });
    } catch (error) {
      openSnackbar(error.message || 'Error al registrar usuario.', 'error');
    }
  };
  const areAllFieldsComplete = () => {
    return Object.values(userData).every(value => value !== '') && passwordsMatch;
  };
  return (
    <Container style={{ display: 'flex', flexDirection: 'column', height: '100%', paddingTop: '10vh' }}>
      <Typography variant="h4" align="center" gutterBottom>Registro de usuario</Typography>
      <Grid container spacing={2}>
      <Grid item xs={12} sm={6}>
          <FormControl fullWidth>
            <TextField
              required
              name="firstName"
              label="Nombres"
              value={userData.firstName}
              onChange={handleInputChange}
            />
          </FormControl>
        </Grid>
        <Grid item xs={12} sm={6}>
          <FormControl fullWidth>
            <TextField
              name="lastName"
              label="Apellidos"
              value={userData.lastName}
              onChange={handleInputChange}
            />
          </FormControl>
        </Grid>
        <Grid item xs={12} sm={6}>
          <FormControl fullWidth style={{ width: '100%' }}>
            <LocalizationProvider dateAdapter={AdapterDayjs}>
              <DatePicker
                label="Fecha de nacimiento"
                value={userData.birthDate}
                onChange={handleDateChange}
                renderInput={(params) => (
                  <TextField
                    {...params}
                    type="text"
                    placeholder="Seleccione una fecha"
                    fullWidth
                  />
                )}
              />
            </LocalizationProvider>
          </FormControl>
        </Grid>
        <Grid item xs={12} sm={6}>
          <FormControl fullWidth>
            <TextField
              required
              name="phoneNumber"
              label="Teléfono"
              value={userData.phoneNumber}
              onChange={handlePhoneNumberChange}
            />
          </FormControl>
        </Grid>
        <Grid item xs={12} sm={6}>
          <FormControl fullWidth>
            <TextField
              name="address"
              label="Dirección"
              value={userData.address}
              onChange={handleInputChange}
            />
          </FormControl>
        </Grid>
        <Grid item xs={12} sm={6}>
          <FormControl fullWidth>
            <TextField
              required
              name="email"
              label="Email"
              value={userData.email}
              onChange={handleInputChange}
            />
          </FormControl>
        </Grid>
        <Grid item xs={12} sm={6}>
          <FormControl fullWidth>
            <TextField
              required
              name="password"
              label="Contraseña"
              type={showPasswords ? 'text' : 'password'}
              value={userData.password}
              onChange={handleInputChange}
              InputProps={{
                endAdornment: (
                  <InputAdornment position="end">
                    <IconButton onClick={handleTogglePasswordVisibility}>
                      {showPasswords ? <VisibilityOffIcon /> : <VisibilityIcon />}
                    </IconButton>
                  </InputAdornment>
                )
              }}
            />
          </FormControl>
        </Grid>
        <Grid item xs={12} sm={6}>
          <FormControl fullWidth>
            <TextField
              required
              name="confirmPassword"
              label="Confirmar Contraseña"
              type={showPasswords ? 'text' : 'password'}
              value={userData.confirmPassword}
              onChange={handleInputChange}
              onBlur={handleConfirmPasswordBlur}
              InputProps={{
                endAdornment: (
                  <InputAdornment position="end">
                    <IconButton onClick={handleTogglePasswordVisibility}>
                      {showPasswords ? <VisibilityOffIcon /> : <VisibilityIcon />}
                    </IconButton>
                  </InputAdornment>
                )
              }}
            />
            {!passwordsMatch && (
              <Alert
                sx={{ marginTop: '0.5rem' }}
                severity="error"
              >
                Las contraseñas no coinciden.
              </Alert>
            )}
          </FormControl>
        </Grid>
        <Grid item xs={12} sm={6}>
          <FormControl fullWidth>
            <InputLabel id="label" required>Selecciona Rol</InputLabel>
            <Select
              value={userData.roleId}
              onChange={handleInputChange}
              label="Seleccione una opción"
              name="roleId"
              fullWidth
            >
              <MenuItem value="1">Administrador</MenuItem>
              <MenuItem value="2">Empleado</MenuItem>
            </Select>
          </FormControl>
        </Grid>
        <Grid item xs={12}>
      </Grid>
        <Grid item xs={12} style={{ textAlign: 'end', marginTop: '16px' }}>
          <Button variant="contained" color="primary" onClick={handleSubmit} disabled={!areAllFieldsComplete()}>
            Registrar
          </Button>
        </Grid>
      </Grid>
    </Container>
  );
}

================
File: src/pages/Users/UserMenu.jsx
================
import Grid from '@mui/material/Grid';
import Card from '@mui/material/Card';
import CardActionArea from '@mui/material/CardActionArea';
import CardMedia from '@mui/material/CardMedia';
import CardContent from '@mui/material/CardContent';
import Typography from '@mui/material/Typography';
import AddUserImg from '/src/assets/adduser.png';
const UserMenu = ({ onOptionSelect }) => {
  const options = [
    {
      id: 'add-user',
      title: 'Agregar Usuario',
      imageUrl: AddUserImg,
      description: 'Añade un nuevo usuario al sistema',
    },
  ];
  return (
    <Grid container spacing={4}>
      {options.map((option) => (
        <Grid item xs={12} sm={6} md={4} key={option.id}>
          <Card>
            <CardActionArea onClick={() => onOptionSelect(option.id)}>
              <CardMedia
                component="img"
                height="140"
                image={option.imageUrl}
                alt={option.title}
              />
              <CardContent>
                <Typography gutterBottom variant="h5" component="div">
                  {option.title}
                </Typography>
                <Typography variant="body2" color="text.secondary">
                  {option.description}
                </Typography>
              </CardContent>
            </CardActionArea>
          </Card>
        </Grid>
      ))}
    </Grid>
  );
};
export default UserMenu;

================
File: src/pages/Users/UserPage.jsx
================
import { Route, Routes, useNavigate } from 'react-router-dom';
import GenericNavigationBar from '../../components/GenericNavigationBar';
import UserMenu from './UserMenu';
import UserCreation from './UserCreation';
import { PATHS } from '../../constants/paths';
const UserPage = () => {
  const navigate = useNavigate();
  const handleOptionSelect = (optionId) => {
    if (optionId === 'add-user') {
      navigate(PATHS.ADD_USER);
    }
  };
  return (
    <div>
      <GenericNavigationBar />
      <Routes>
        <Route path="/" element={<UserMenu onOptionSelect={handleOptionSelect} />} />
        <Route path="add-user" element={<UserCreation />} />
      </Routes>
    </div>
  );
};
export default UserPage;

================
File: src/services/AuthService.js
================
import { supabase } from './supabaseClient';
import { getUser } from './UserService';
export const signIn = async (email, password) => {
  try {
    const { data, error } = await supabase.auth.signInWithPassword({
      email,
      password,
    });
    if (error) throw error;
    const token = data.session.access_token;
    localStorage.setItem('token', token);
    const user = await getUser(data.user.id);
    if (user) {
      const userDataString = JSON.stringify(user);
      localStorage.setItem('user', userDataString);
    }
    return user;
  } catch (error) {
    console.error('Error in signIn:', error);
    throw new Error('Error al iniciar sesión: Usuario o contraseña incorrecta.');
  }
};

================
File: src/services/BrandService.js
================
import axios from './axiosConfig';
import Brand from "../models/Brand";
import CarModel from '../models/CarModel';
const getAllBrands = async (name = '') => {
  const result = await axios.get(`/brands?name=${name}`);
  return Array.isArray(result.response) ? result.response.map(brand => new Brand(brand)) : [];
};
const getCarModelsByBrandId = async (brandId, name='') => {
  const result = await axios.get(`/brands?id=${brandId}&models=true&name=${name}`);
  return Array.isArray(result.response) ? result.response.map(model => new CarModel(model)) : [];
};
export { getAllBrands, getCarModelsByBrandId };

================
File: src/services/CarModelService.js
================
import axios from './axiosConfig';
import { ProductCarModel } from '../models/ProductCarModel';
import CarModel from '../models/CarModel';
const createCarModel = async(carModelData, forceCreate) => {
  const url = forceCreate ? `/models?forceCreate=${forceCreate}` : `/models`;
  const result = await axios.post(url, carModelData);
  return result.statusCode === 201 ? new CarModel(result.response) : false;
}
const getCarModels = async(name = '') => {
  const result = await axios.get(`/models?name=${name}`);
  return Array.isArray(result.response) ? result.response.map(model => new CarModel(model)) : [];
}
const getVehicleModelRadiators = async (id) => {
  const result = await axios.get(`/model/${id}/radiators`);
  return Array.isArray(result.response) ? result.response.map(element => new ProductCarModel(element)) : [];
}
const getCarModelProducts = async (id, productTypeId, searchTerm) => {
  const result = await axios.get(`/model/${id}/products?productTypeId=${productTypeId}&searchTerm=${searchTerm}`);
  return result.response;
}
const getAllCarModelsProducts = async (productTypeId, modelId = '') => {
  const result = await axios.get(`/models/products?productTypeId=${productTypeId}${modelId ? `&modelId=${modelId}` : ''}`);
  return result.response;
}
const deleteCarModel = async (id) => {
  const result = await axios.delete(`/models?id=${id}`);
  return result.statusCode === 200;
}
export { createCarModel, getCarModels, getVehicleModelRadiators,
  getCarModelProducts, getAllCarModelsProducts, deleteCarModel};

================
File: src/services/EventBus.js
================

class EventBus {
  constructor() {
    this.events = {};
  }
  on(event, callback) {
    if (!this.events[event]) {
      this.events[event] = [];
    }
    this.events[event].push(callback);
    return () => {
      this.events[event] = this.events[event].filter(cb => cb !== callback);
    };
  }
  emit(event, data) {
    if (this.events[event]) {
      this.events[event].forEach(callback => callback(data));
    }
  }
}
export default new EventBus();

================
File: src/services/ProductImageService.js
================
import { StorageAdapter } from './StorageAdapter';
import { v4 } from 'uuid';
import { getMimeType } from '../util/generalUtils';
import File from '../models/File';
import { FileTypes } from '../pages/Products/ProductsConstants';
export class ProductImageService {
    static {
        StorageAdapter.setProvider(StorageAdapter.PROVIDER.SUPABASE);
    }
    static getFileInfo(file) {
        let uuid = v4();
        let filename = `products/images/${uuid}`;
        return {
            ...file,
            mimeType: getMimeType(file.fileData),
            name: uuid,
            storagePath: filename
        };
    }
    static createFileFromUpload(fileData, orderId) {
        let newFile = new File({
            fileData,
            orderId,
            fileTypeId: FileTypes.PRODUCT_IMAGE
        });
        return this.getFileInfo(newFile);
    }
    static async loadProductImages(productFiles) {
        let imagePromises = productFiles.map(async (file) => {
            let url = await StorageAdapter.getFileURL(file.storagePath);
            file.fileData = await StorageAdapter.getBase64FromURL(url);
            return file;
        });
        return Promise.all(imagePromises);
    }
    static async uploadProductImages(files) {
        const uploadPromises = files.map(async (file) => {
            if (!file.id) {
                const blob = StorageAdapter.base64ToBlob(file.fileData);
                const result = await StorageAdapter.uploadFile(blob, file.storagePath);
                return { ...file, url: result.url };
            }
            return file;
        });
        return Promise.all(uploadPromises);
    }
}

================
File: src/services/ProductService.js
================
import Product from "../models/Product";
import axiosInstance from "./axiosConfig";
const createProductVehicles = async (productId, productVehicleModels) => {
    const response = await axiosInstance.post(`/product/${productId}/models`, productVehicleModels);
    return response.data;
}
const createProductPrices = async (productId, productPrices) => {
    const response = await axiosInstance.post(`/product/${productId}/prices`, productPrices);
    return response.data;
}
const createProduct = async (product) => {
    const response = await axiosInstance.post(`/products`, product);
    return response.data;
}
const getProductPrices = async (productId) => {
    const response = await axiosInstance.get(`/product/${productId}/prices`);
    return response.data;
}
const getProductVehicleModels = async (productId) => {
    const response = await axiosInstance.get(`/product/${productId}/models`);
    return response.data;
}
const createProductFiles = async (productId, files) => {
    const response = await axiosInstance.post(`/product/${productId}/files`, files);
    return response.data;
}
const getProductById = async (productId) => {
    const result = await axiosInstance.get(`/products?id=${productId}`);
    return new Product(result.response);
}
const deleteProduct = async (productId) => {
    const response = await axiosInstance.delete(`/products?id=${productId}`);
    return response.statusCode === 200;
}
const updateProduct = async (productId, product) => {
    const response = await axiosInstance.put(`/products?id=${productId}`, product);
    return response.data;
}
export { createProductVehicles, createProductPrices, getProductPrices, updateProduct,
    getProductVehicleModels, createProductFiles, createProduct, getProductById, deleteProduct }

================
File: src/services/ProviderService.js
================
import axios from './axiosConfig';
import Provider from '../models/Provider';
const createProvider = async (providerData) => {
  const result = await axios.post('/providers', providerData);
  return result.response ? new Provider(result.response) : [];
}
const getProvider = async (id) => {
  const result = await axios.get(`/providers?id=${id}`);
  return result.response ? new Provider(result.response): []
}
const getAll = async(page, limit) => {
  const result = await axios.get(`/providers`, {
    params: {
      page:page,
      limit:limit
    }
  })
  const { providers ,totalCount } = result.response;
  const mappedProviders = providers.map(provider => new Provider({ ...provider }));
  return result.response && Array.isArray(result.response.providers) ? { providers: mappedProviders, totalCount } : [];
}
const deleteProvider = async(id) => {
  const result = await axios.delete(`/providers?id=${id}`);
  return result.statusCode === 204 ? true : false;
}
const updateProvider = async(id, updatedData) => {
  const result = await axios.put(`/providers?id=${id}`, updatedData);
  return result.statusCode === 204 ? true : false;
}
export { createProvider, getProvider, getAll, deleteProvider, updateProvider };

================
File: src/services/RadiatorService.js
================
import axios from './axiosConfig';
import Radiator from "../models/Radiator.js";
import Product from '../models/Product.js';
import { createProductPrices, createProductVehicles } from './ProductService.js';
const getAllRadiators = async (name = '') => {
    const result = await axios.get('/radiators', {
        params: { name }
    });
    return Array.isArray(result.response)
        ? result.response.map(radiatorData => {
            const productData = radiatorData.product;
            const product = new Product(productData);
            return new Radiator({...radiatorData, product});
          })
        : [];
};
const createRadiator = async (radiatorData) => {
    const result = await axios.post('/radiator', radiatorData);
    const productData = result.response.product;
    const product = new Product(productData);
    return new Radiator({...result.response, product});
};
const processRadiatorData = async (radiatorData, vehicleModels, prices) => {
    if (!radiatorData) {
        throw new Error('Missing required data');
    }
    const createdRadiator = await createRadiator(radiatorData);
    if (!createdRadiator || !createdRadiator.product || !createdRadiator.product.id) {
        throw new Error('Failed to create radiator');
    }
    const { id } = createdRadiator.product;
    if (vehicleModels) {
        await createProductVehicles(id, vehicleModels);
    }
    if (prices) {
        await createProductPrices(id, prices);
    }
    return createdRadiator;
}
export { getAllRadiators, processRadiatorData};

================
File: src/services/StorageAdapter.js
================
import { SupabaseStorageService } from './SupabaseStorageService';
import { SUPABASE_BUCKETS, SUPABASE_PATHS } from '../constants/supabaseConfig';
export class StorageAdapter {
    static PROVIDER = {
        SUPABASE: 'supabase'
    };
    static currentProvider = StorageAdapter.PROVIDER.SUPABASE;
    static BUCKETS = SUPABASE_BUCKETS;
    static PATHS = SUPABASE_PATHS;
    static setProvider(provider) {
        if (Object.values(StorageAdapter.PROVIDER).includes(provider)) {
            StorageAdapter.currentProvider = provider;
        } else {
            console.error(`Proveedor de almacenamiento no válido: ${provider}`);
        }
    }
    static async getFileURL(path) {
        try {
            const [bucket, ...pathParts] = path.split('/').filter(part => part);
            const filePath = pathParts.join('/');
            return SupabaseStorageService.getPublicUrl(bucket, filePath);
        } catch (error) {
            console.error('Error al obtener la URL del archivo:', error);
            throw error;
        }
    }
    static async uploadFile(file, path) {
        try {
            const [bucket, ...pathParts] = path.split('/').filter(part => part);
            const filePath = pathParts.join('/');
            return await SupabaseStorageService.uploadFile(file, bucket, '', filePath);
        } catch (error) {
            console.error('Error al subir el archivo:', error);
            throw error;
        }
    }
    /**
     * Obtiene un archivo en formato base64 a partir de una URL
     * @param {string} url - La URL del archivo
     * @returns {Promise<string>} - El archivo en formato base64
     */
    static async getBase64FromURL(url) {
        try {
            // Usar Supabase Storage
            const response = await fetch(url);
            const blob = await response.blob();
            return await SupabaseStorageService.blobToBase64(blob);
        } catch (error) {
            console.error('Error al obtener el archivo en formato base64:', error);
            throw error;
        }
    }
    static base64ToBlob(base64Data) {
        return SupabaseStorageService.base64ToBlob(base64Data);
    }
    static generateStoragePath(type, subtype, fileName) {
        return `${type}/${subtype}/${fileName}`;
    }
}

================
File: src/services/SupabaseStorageService.js
================
import { supabase } from './supabaseClient';
import { v4 as uuidv4 } from 'uuid';
export class SupabaseStorageService {
  static async uploadFile(file, bucket, path = '', fileName = '') {
    try {
      // Si no se proporciona un nombre de archivo, generamos uno único
      const finalFileName = fileName || `${uuidv4()}`;
      // Construimos la ruta completa
      const filePath = path ? `${path}/${finalFileName}` : finalFileName;
      // Subimos el archivo a Supabase Storage
      const { error } = await supabase.storage
        .from(bucket)
        .upload(filePath, file, {
          cacheControl: '3600',
          upsert: true
        });
      if (error) {
        console.error('Error al subir el archivo:', error);
        throw new Error(`Error al subir el archivo: ${error.message}`);
      }
      const { data: urlData } = supabase.storage
        .from(bucket)
        .getPublicUrl(filePath);
      return {
        path: filePath,
        url: urlData.publicUrl
      };
    } catch (error) {
      console.error('Error en uploadFile:', error);
      throw error;
    }
  }
  static getPublicUrl(bucket, path) {
    try {
      const { data } = supabase.storage
        .from(bucket)
        .getPublicUrl(path);
      return data.publicUrl;
    } catch (error) {
      console.error('Error al obtener la URL pública:', error);
      throw new Error(`Error al obtener la URL pública: ${error.message}`);
    }
  }
  static async downloadFile(bucket, path) {
    try {
      const { data, error } = await supabase.storage
        .from(bucket)
        .download(path);
      if (error) {
        console.error('Error al descargar el archivo:', error);
        throw new Error(`Error al descargar el archivo: ${error.message}`);
      }
      return data;
    } catch (error) {
      console.error('Error en downloadFile:', error);
      throw error;
    }
  }
  static async deleteFile(bucket, path) {
    try {
      const { error } = await supabase.storage
        .from(bucket)
        .remove([path]);
      if (error) {
        console.error('Error al eliminar el archivo:', error);
        throw new Error(`Error al eliminar el archivo: ${error.message}`);
      }
    } catch (error) {
      console.error('Error en deleteFile:', error);
      throw error;
    }
  }
  static base64ToBlob(base64Data) {
    try {
      const [metaData, base64] = base64Data.split(',');
      const mimeType = metaData.match(/:(.*?);/)[1];
      const byteCharacters = atob(base64);
      const byteArrays = [];
      for (let i = 0; i < byteCharacters.length; i += 512) {
        const slice = byteCharacters.slice(i, i + 512);
        const byteNumbers = new Array(slice.length);
        for (let j = 0; j < slice.length; j++) {
          byteNumbers[j] = slice.charCodeAt(j);
        }
        const byteArray = new Uint8Array(byteNumbers);
        byteArrays.push(byteArray);
      }
      return new Blob(byteArrays, { type: mimeType });
    } catch (error) {
      console.error('Error al convertir base64 a Blob:', error);
      throw new Error(`Error al convertir base64 a Blob: ${error.message}`);
    }
  }
  static async blobToBase64(blob) {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.readAsDataURL(blob);
      reader.onloadend = () => resolve(reader.result);
      reader.onerror = reject;
    });
  }
}

================
File: src/services/UserService.js
================
import axios from './axiosConfig';
import User from '../models/User';
export const createUser = async(userData) => {
  const result = await axios.post('/users', userData);
  return result.response ? new User(result.response) : [];
}
export const getUser = async(id) => {
  const result = await axios.get(`/users?id=${id}`);
  return result.response ? new User(result.response) : [];
}

================
File: src/services/axiosConfig.js
================
import axios from 'axios';
const axiosInstance = axios.create({
  baseURL: import.meta.env.VITE_API_REFA_BASE_PATH,
});
axiosInstance.interceptors.request.use(
  config => {
    const token = localStorage.getItem('token');
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  error => {
    return Promise.reject(error);
  }
);
axiosInstance.interceptors.response.use(
  response => {
    return {
      errorMessage: '',
      statusCode: response.status,
      response: response.data
    };
  },
  error => {
    // Inicializa valores predeterminados para el objeto de error
    let errorMessage = 'Ocurrió un error inesperado';
    let statusCode = error.response ? error.response.status : 500;
    if (error.response) {
      switch (error.response.status) {
        case 400:
          errorMessage = 'Solicitud incorrecta.';
          break;
        case 401:
          errorMessage = 'No autorizado. Por favor, inicia sesión de nuevo.';
          break;
        case 404:
          errorMessage = 'El recurso solicitado no fue encontrado.';
          break;
        case 500:
          errorMessage = 'Error interno del servidor.';
          break;
        default:
          errorMessage = error.response.data.message || errorMessage;
      }
    } else if (error.request) {
      errorMessage = 'No se recibió respuesta del servidor.';
    } else {
      errorMessage = error.message;
    }
    return Promise.reject({
      errorMessage,
      statusCode,
      response: error.response ? error.response.data : null
    });
  }
);
export default axiosInstance;

================
File: src/services/supabaseClient.js
================
import { createClient } from '@supabase/supabase-js';
const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
const supabaseKey = import.meta.env.VITE_SUPABASE_KEY;
export const supabase = createClient(supabaseUrl, supabaseKey);

================
File: src/styles/brandContainer.css
================
.fade-enter {
    opacity: 0;
  }
  .fade-enter-active {
    opacity: 1;
    transition: opacity 300ms ease-in-out;
  }

================
File: src/styles/layoutStyles.js
================

import { styled } from '@mui/material/styles';
import MuiAppBar from '@mui/material/AppBar';
export const drawerWidth = 240;
export const AppBarStyled = styled(MuiAppBar, {
  shouldForwardProp: (prop) => prop !== 'open',
})(({ theme, open }) => ({
  zIndex: theme.zIndex.drawer + 1,
  transition: theme.transitions.create(['width', 'margin'], {
    easing: theme.transitions.easing.sharp,
    duration: theme.transitions.duration.leavingScreen,
  }),
  ...(open && {
    marginLeft: drawerWidth,
    width: `calc(100% - ${drawerWidth}px)`,
    transition: theme.transitions.create(['width', 'margin'], {
      easing: theme.transitions.easing.sharp,
      duration: theme.transitions.duration.enteringScreen,
    }),
  }),
}));
export const ContentHeaderStyled = styled('div')(({ theme }) => ({
  ...theme.mixins.toolbar,
}));

================
File: src/styles/utils/drawerFunctions.jsx
================
const drawerWidth = 240;
export const openedMixin = (theme) => ({
  width: drawerWidth,
  transition: theme.transitions.create('width', {
    easing: theme.transitions.easing.sharp,
    duration: theme.transitions.duration.enteringScreen,
  }),
  overflowX: 'hidden',
});
export const closedMixin = (theme) => ({
  transition: theme.transitions.create('width', {
    easing: theme.transitions.easing.sharp,
    duration: theme.transitions.duration.leavingScreen,
  }),
  overflowX: 'hidden',
  width: `calc(${theme.spacing(7)} + 1px)`,
  [theme.breakpoints.up('sm')]: {
    width: `calc(${theme.spacing(8)} + 1px)`,
  },
});
export default { openedMixin, closedMixin }

================
File: src/util/EmailVerifier.js
================
function validateEmail(email) {
    let regex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
    return regex.test(email);
}
export default validateEmail;

================
File: src/util/generalUtils.js
================
export function modifyAndClone(obj, path, value) {
  const clone = JSON.parse(JSON.stringify(obj));
  const keys = path.split('.');
  let current = clone;
  for (let i = 0; i < keys.length - 1; i++) {
    const key = keys[i];
    if (current[key] === undefined || typeof current[key] !== 'object') {
      current[key] = {};
    }
    current = current[key];
  }
  current[keys[keys.length - 1]] = value;
  return clone;
}
export function getMimeType(base64String) {
  const matches = base64String.match(/^data:([a-zA-Z0-9]+\/[a-zA-Z0-9-.+]+);base64,/);
  if (matches && matches.length > 1) {
      return matches[1];
  }
  return null;
}
export const base64ToBlob = (base64) => {
  let mimeType = getMimeType(base64);
  const byteCharacters = atob(base64.split(',')[1]);
  const byteArrays = [];
  const sliceSize = 512;
  for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {
    const slice = byteCharacters.slice(offset, offset + sliceSize);
    const byteNumbers = new Array(slice.length);
    for (let i = 0; i < slice.length; i++) {
      byteNumbers[i] = slice.charCodeAt(i);
    }
    const byteArray = new Uint8Array(byteNumbers);
    byteArrays.push(byteArray);
  }
  const blob = new Blob(byteArrays, { type: mimeType });
  return blob;
}
export const extractMainTitle = (title) => {
  const match = title.match(/^[^()]+/);
  return match ? match[0].trim() : title;
};
export const getBase64ImageDimensions = (base64String) => {
  return new Promise((resolve, reject) => {
    const img = new Image();
    img.onload = () => {
      resolve({ width: img.width, height: img.height });
    };
    img.onerror = reject;
    img.src = base64String;
  });
};

================
File: src/util/userConstants.js
================
export const ROLES = {
    ADMIN: 'ADMINISTRADOR',
    EMPLOYEE: 'ASISTENTE'
}

================
File: vercel.json
================
{
    "rewrites": [
      {
        "source": "/(.*)",
        "destination": "/"
      }
    ]
  }

================
File: vite.config.js
================
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
export default defineConfig({
  plugins: [react()],
  build: {
    rollupOptions: {
      output: {
        assetFileNames: 'assets/[name].[hash][extname]'
      }
    }
  },
  assetsInclude: ['**/*.jpg', '**/*.jpeg']
});
