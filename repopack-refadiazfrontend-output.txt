================================================================
REPOPACK OUTPUT FILE
================================================================

This file was generated by Repopack on: 2024-07-23T03:31:19.211Z

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This header section
2. Multiple file entries, each consisting of:
   a. A separator line (================)
   b. The file path (File: path/to/file)
   c. Another separator line
   d. The full contents of the file
   e. A blank line

Usage Guidelines:
-----------------
1. This file should be treated as read-only. Any changes should be made to the
   original repository files, not this packed version.
2. When processing this file, use the separators and "File:" markers to
   distinguish between different files in the repository.
3. Be aware that this file may contain sensitive information. Handle it with
   the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation.
- Code comments have been removed.


For more information about Repopack, visit: https://github.com/yamadashy/repopack

Additional User-Provided Header:
--------------------------------
Custom header information for the packed file.

================================================================
Repository Files
================================================================

================
File: .eslintrc.cjs
================
module.exports = {
  root: true,
  env: { browser: true, es2020: true },
  extends: [
    'eslint:recommended',
    'plugin:react/recommended',
    'plugin:react/jsx-runtime',
    'plugin:react-hooks/recommended',
  ],
  ignorePatterns: ['dist', '.eslintrc.cjs'],
  parserOptions: { ecmaVersion: 'latest', sourceType: 'module' },
  settings: { react: { version: '18.2' } },
  plugins: ['react-refresh'],
  rules: {
    "react/prop-types": 0,
    'react/jsx-no-target-blank': 'off',
    'react-refresh/only-export-components': [
      'warn',
      { allowConstantExport: true },
    ],
    
  },
}

================
File: .github/workflows/dev.yml
================
name: Build and Deploy
on:
  push:
    branches:
      - dev
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: DEV
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '16'
    - name: Install dependencies
      run: npm install
    - name: Set environment variables
      run: echo "${{ secrets.ENV_CONFIG }}" > .env.development
    - name: Build the application
      run: npm run build -- --mode development
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2
    - name: Deploy to S3
      run: aws s3 sync ./dist s3://refadiazapp --delete

================
File: README.md
================
# React + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

\\node_modules
\Archivos de los frameworks instalados
\\public 
\Archivos estaticos, como imagenes, fuentes, etc
\\Src
\Archivos que estructuran toda la aplicacion
\\\\components // Aqui se crearan los componentes del mui
\\\\pages // Aqui se crearan todas las paginas
\\\\services // Aqui estara toda la informacion relacionada con la logica del sistema
\\\\store //Acciones Redux // borrado por no hayar un uso 
\\\\styles // Aqui se encontraran todos los estilos
\\\\api // Aqui se consumiran los endpoints
\\\\App.jsx // Aqui se enrutaran los links de la pagina

================
File: constants.js
================
export const TITLE_PAGE_HOME_WELCOME = "Bienvenido a mi aplicación";
export const BODY_PAGE_HOME = "Esta es la página de inicio de mi aplicación. Puedes comenzar a explorar aquí.";
export const BUTTON_LBLCOMENZAR = "Comenzar"

================
File: index.html
================
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, viewport-fit=cover">
    <link rel="stylesheet" href="./src/styles/MainStructure.css">
    <style>
      body {
        padding-left: env(safe-area-inset-left);
        padding-right: env(safe-area-inset-right);
      }
    </style>
    <title>App Diaz</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/main.jsx"></script>
  </body>
</html>

================
File: main.jsx
================
import ReactDOM from 'react-dom/client';
import App from './src/App';
ReactDOM.createRoot(document.getElementById('root')).render(
  <App />,
);

================
File: package.json
================
{
  "name": "frontendrefaccionariadiaz",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite --host",
    "build": "vite build",
    "lint": "eslint . --ext js,jsx --report-unused-disable-directives --max-warnings 0",
    "preview": "vite preview"
  },
  "dependencies": {
    "@emotion/react": "^11.11.3",
    "@emotion/styled": "^11.11.0",
    "@mui/icons-material": "^5.15.10",
    "@mui/material": "^5.15.10",
    "@mui/x-data-grid": "^6.19.5",
    "@mui/x-date-pickers": "^6.19.6",
    "axios": "^1.6.7",
    "dayjs": "^1.11.10",
    "firebase": "^10.8.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-photoswipe-gallery": "^3.0.1",
    "react-router-dom": "^6.22.1",
    "react-transition-group": "^4.4.5",
    "uuid": "^9.0.1"
  },
  "devDependencies": {
    "@types/react": "^18.2.55",
    "@types/react-dom": "^18.2.19",
    "@vitejs/plugin-react": "^4.2.1",
    "eslint": "^8.56.0",
    "eslint-plugin-react": "^7.33.2",
    "eslint-plugin-react-hooks": "^4.6.0",
    "eslint-plugin-react-refresh": "^0.4.5",
    "vite": "^5.1.0"
  }
}

================
File: public/vite.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>

================
File: repopack.config.json
================
{
    "output": {
      "filePath": "repopack-refadiazfrontend-output.txt",
      "headerText": "Custom header information for the packed file.",
      "removeComments": true,
      "topFilesLength": 5
    },
    "ignore": {
      "useDefaultPatterns": true,
      "customPatterns": ["*.log"]
    }
  }

================
File: src/App.jsx
================
import { BrowserRouter } from 'react-router-dom';
import { Routes, Route } from 'react-router-dom';
import Home from './pages/Home';
import Login from './pages/Login';
import UserPage from './pages/Users/UserPage';
import { AuthGuard } from './components/AuthGuard';
import { MobileProvider } from './components/MobileProvider';
import { SnackbarProvider } from './components/SnackbarContext';
export default function App() {
  return (
    <MobileProvider>
      <SnackbarProvider>
        <BrowserRouter>
          <Routes>
            <Route exact path='/' element={<AuthGuard><Home /></AuthGuard>} />
            <Route exact path="/home" element={<AuthGuard><Home /></AuthGuard>} />
            <Route exact path="/login" element={<Login />} />
            <Route exact path='/user' element={<UserPage />} />
          </Routes>
        </BrowserRouter>
      </SnackbarProvider>
    </MobileProvider>
  );
}

================
File: src/components/AuthGuard.jsx
================
import { useEffect, useState } from 'react';
import { onAuthStateChanged } from 'firebase/auth';
import { Navigate } from 'react-router-dom';
import { auth } from '../services/Firebase/firebase';
import { CircularProgress, Box } from '@mui/material';
export const AuthGuard = ({ children }) => {
  const [isLoading, setIsLoading] = useState(true);
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  useEffect(() => {
    onAuthStateChanged(auth, (user) => {
      if (user) {
        setIsAuthenticated(true);
      } else {
        setIsAuthenticated(false);
      }
      setIsLoading(false);
    });
  }, []);
  if (isLoading) {
    return (
      <Box
        sx={{
          display: 'flex',
          justifyContent: 'center',
          alignItems: 'center',
          height: '100vh',
        }}
      >
        <CircularProgress />
      </Box>
    );
  }
  if (!isAuthenticated) return <Navigate to="/login" />;
  return children;
};

================
File: src/components/CustomInput.jsx
================
import * as React from 'react';
import { Input as BaseInput } from '@mui/base/Input';
import { styled } from '@mui/system';
const CustomInput = React.forwardRef(function CustomInput(props, ref) {
  return <BaseInput slots={{ input: InputElement }} {...props} ref={ref} />;
});
const blue = {
  100: '#DAECFF',
  200: '#80BFFF',
  400: '#3399FF',
  500: '#007FFF',
  600: '#0072E5',
};
const grey = {
  50: '#F3F6F9',
  100: '#E5EAF2',
  200: '#DAE2ED',
  300: '#C7D0DD',
  400: '#B0B8C4',
  500: '#9DA8B7',
  600: '#6B7A90',
  700: '#434D5B',
  800: '#303740',
  900: '#1C2025',
};
const InputElement = styled('input')(
  ({ theme }) => `
  width: 100%;
  font-family: 'IBM Plex Sans', sans-serif;
  font-size: 0.875rem;
  font-weight: 400;
  line-height: 1.5;
  padding: 8px 12px;
  border-radius: 8px;
  color: ${theme.palette.mode === 'dark' ? grey[300] : grey[900]};
  background: ${theme.palette.mode === 'dark' ? grey[900] : '#fff'};
  border: 1px solid ${theme.palette.mode === 'dark' ? grey[700] : grey[200]};
  box-shadow: 0px 2px 2px ${theme.palette.mode === 'dark' ? grey[900] : grey[50]};
  &:hover {
    border-color: ${blue[400]};
  }
  &:focus {
    border-color: ${blue[400]};
    box-shadow: 0 0 0 1px ${theme.palette.mode === 'dark' ? blue[600] : blue[200]};
  }
  // firefox
  &:focus-visible {
    outline: 0;
  }
`,
);
export default CustomInput;

================
File: src/components/CustomSearchBar.jsx
================
import { Select, MenuItem } from '@mui/material';
import CustomInput from "./CustomInput";
import { useProductsContext } from '../pages/Products/ProductsContext';
import { ProductTypes, SearchOptions } from '../pages/Products/ProductsConstants';
const CustomSearchBar = () => {
  const { searchOption, searchTerm, handleSearchOptionChange, setSearchTerm, productType } = useProductsContext();
  const handleSearchChange = (e) => {
    const newSearchTerm = e.target.value;
    setSearchTerm(newSearchTerm);
  }
  let placeholder = '';
  let productVerbiage = 'Radiadores';
  if (productType === ProductTypes.CAP) {
    productVerbiage = 'Tapas';
  } else if (productType === ProductTypes.FAN) {
    productVerbiage = 'Abanicos';
  }
  if (searchOption === SearchOptions.BRANDS) {
    placeholder = 'Buscar marcas...';
  } else if (searchOption === SearchOptions.MODELS) {
    placeholder = 'Buscar modelos...';
  } else {
    placeholder = `Buscar ${productVerbiage}...`;
  }
  return (
    <div style={{ display: 'flex', alignItems: 'center', marginTop: '10px', marginBottom: '10px' }}>
      <Select
        value={searchOption}
        onChange={(event) => handleSearchOptionChange(event.target.value)}
        displayEmpty
        inputProps={{ 'aria-label': 'Buscar por' }}
        sx={{ height: '35px', marginRight: '5px' }}
      >
        <MenuItem value={SearchOptions.BRANDS}>Marcas</MenuItem>
        <MenuItem value={SearchOptions.MODELS}>Modelos</MenuItem>
        <MenuItem value={SearchOptions.PRODUCTS}>{productVerbiage}</MenuItem>
      </Select>
      <div style={{ flex: 1 }}>
        <CustomInput
          placeholder={placeholder}
          value={searchTerm}
          onChange={handleSearchChange}
        />
      </div>
    </div>
  );
};
export default CustomSearchBar;

================
File: src/components/CustomSelectWithAdd.jsx
================
import { useState } from 'react';
import { Button, Select, MenuItem, Dialog, DialogActions, DialogContent, DialogTitle, TextField, FormControl, InputLabel } from '@mui/material';
const CustomSelectWithAdd = ({
  elements,
  setElements,
  label,
  selectedItem,
  setSelectedItem,
  onItemAdded,
  dialogFields
}) => {
  const [open, setOpen] = useState(false);
  const [formValues, setFormValues] = useState({});
  const handleOpen = () => setOpen(true);
  const handleClose = () => setOpen(false);
  const handleSelectChange = (event) => {
    const selected = elements.find(item => item.id === event.target.value);
    if (selected) {
      setSelectedItem(selected);
    }
  };
  const handleAddNewItem = async () => {
    const newItemWithoutId = { ...formValues };
    if (onItemAdded) {
      const newItemId = await onItemAdded(elements, newItemWithoutId);
      const newItemWithId = { id: newItemId, ...newItemWithoutId };
      const newElements = [...elements, newItemWithId];
      setElements(newElements);
      setSelectedItem(newItemWithId);
    } else {
      console.error('onItemAdded is not defined');
    }
    setFormValues({});
    handleClose();
  };
  const handleInputChange = (event) => {
    setFormValues({
      ...formValues,
      [event.target.name]: event.target.value
    });
  };
  return (
    <FormControl fullWidth>
      <InputLabel id="custom-select-label">{label}</InputLabel>
      <Select
        labelId="custom-select-label"
        id="custom-select"
        value={selectedItem?.id || ''}
        label={label}
        onChange={handleSelectChange}
        fullWidth
      >
        {elements.map((item, index) => (
          <MenuItem key={index} value={item.id}>{item.name}</MenuItem>
        ))}
        <MenuItem style={{ padding: 0 }}>
          <Button
            fullWidth
            color="primary"
            onClick={handleOpen}
            sx={{ justifyContent: 'flex-start', width: '100%' }}
          >
            Añadir nuevo elemento
          </Button>
        </MenuItem>
      </Select>
      <Dialog open={open} onClose={handleClose}>
        <DialogTitle>Añadir un Nuevo Elemento</DialogTitle>
        <DialogContent>
          {dialogFields.map((field) => (
            <TextField
              key={field.name}
              autoFocus
              name={field.name}
              margin="dense"
              id={field.name}
              label={field.label || field.name}
              type={field.type || 'text'}
              fullWidth
              variant="standard"
              value={formValues[field.name] || ''}
              onChange={handleInputChange}
            />
          ))}
        </DialogContent>
        <DialogActions>
          <Button onClick={handleClose}>Cancelar</Button>
          <Button onClick={handleAddNewItem}>Añadir</Button>
        </DialogActions>
      </Dialog>
    </FormControl>
  );
};
CustomSelectWithAdd.defaultProps = {
  initialItems: [],
  label: 'Elige o añade una opción',
  placeholder: 'Nuevo Elemento',
  dialogFields: []
};
export default CustomSelectWithAdd;

================
File: src/components/CustomToolBar.jsx
================
import { useState, useEffect } from 'react';
import { Toolbar, IconButton, Typography, Menu, MenuItem, Box, Divider } from "@mui/material";
import MenuIcon from "@mui/icons-material/Menu";
import AccountCircle from "@mui/icons-material/AccountCircle";
import Logo from '../assets/IMAGEN SIN FONDO CIRCULO.png';
import { auth } from '../services/Firebase/firebase';
export default function CustomToolBar({ handleDrawerOpen, open }) {
  const [anchorEl, setAnchorEl] = useState(null);
  const [userName, setUserName] = useState('');
  const [userRole, setUserRole] = useState('');
  useEffect(() => {
    const userInfo = JSON.parse(localStorage.getItem('user'));
    if (userInfo) {
      setUserName(userInfo.person.name);
      setUserRole(userInfo.role.description);
    }
  }, []);
  const handleProfileMenuOpen = (event) => {
    setAnchorEl(event.currentTarget);
  };
  const handleMenuClose = () => {
    setAnchorEl(null);
  };
  const handleLogOut = () => {
    handleMenuClose();
    try {
      auth.signOut();
    } catch(error) {
      console.log(error.message);
    }
  }
  return (
    <Toolbar>
      <IconButton
        color="inherit"
        aria-label="open drawer"
        onClick={handleDrawerOpen}
        edge="start"
        sx={{
          marginRight: '36px',
          ...(open && { display: "none" }),
        }}
      >
        <MenuIcon />
      </IconButton>
      <img
        src={Logo}
        alt='Logotipo Refaccionaria Diaz'
        style={{ width: 50, height: 'auto', marginBottom: 10, marginRight: 10, marginTop: 10 }}
      />
      <Typography variant="h6" noWrap component="div" sx={{ flexGrow: 1 }}>
        Radiadorez Diaz
      </Typography>
      <IconButton
        edge="end"
        aria-label="account of current user"
        aria-controls="menu-appbar"
        aria-haspopup="true"
        onClick={handleProfileMenuOpen}
        color="inherit"
        sx={{ fontSize: '2rem' }}
      >
        <AccountCircle sx={{ fontSize: '2rem' }} />
      </IconButton>
      <Menu
        id="menu-appbar"
        anchorEl={anchorEl}
        anchorOrigin={{
          vertical: 'top',
          horizontal: 'right',
        }}
        keepMounted
        transformOrigin={{
          vertical: 'top',
          horizontal: 'right',
        }}
        open={Boolean(anchorEl)}
        onClose={handleMenuClose}
      >
        <Box sx={{ px: 3, py: 2, textAlign: 'center' }}>
          <Typography variant="subtitle1" sx={{ fontWeight: 'bold' }}>
            {userName}
          </Typography>
          <Typography variant="body2" color="text.secondary" sx={{ mt: 0.5 }}>
            {userRole}
          </Typography>
        </Box>
        <Divider />
        <MenuItem onClick={handleLogOut} sx={{ justifyContent: 'center', mt: 1 }}>
          Cerrar sesión
        </MenuItem>
      </Menu>
    </Toolbar>
  );
}

================
File: src/components/DrawerHeader.jsx
================
import { styled, useTheme } from '@mui/material/styles';
import IconButton from '@mui/material/IconButton';
import ChevronLeftIcon from '@mui/icons-material/ChevronLeft';
import ChevronRightIcon from '@mui/icons-material/ChevronRight';
const Header = styled('div')(({ theme }) => ({
  display: 'flex',
  alignItems: 'center',
  justifyContent: 'space-between',
  padding: theme.spacing(0, 1),
  ...theme.mixins.toolbar,
}));
const DrawerHeader = ({ handleDrawerClose }) => {
  const theme = useTheme();
  return (
    <Header>
      <IconButton onClick={handleDrawerClose}> {}
        {theme.direction === 'rtl' ? <ChevronRightIcon /> : <ChevronLeftIcon />}
      </IconButton>
    </Header>
  );
};
export default DrawerHeader;

================
File: src/components/ElementList.jsx
================
import List from '@mui/material/List';
import ProtectedListItem from './ResponsiveDrawer/ProtectedListItem';
export default function ElementList({ setComponent, open, menuItems }) {
  const handleItemClick = (component) => {
    setComponent(component);
  };
  return (
    <List>
      {menuItems.map((item) => (
        <ProtectedListItem
          key={item.text}
          text={item.text}
          icon={item.icon}
          roles={item.roles}
          handleClick={() => handleItemClick(item.component)}
          open={open}
        />
      ))}
    </List>
  );
}

================
File: src/components/ExpandableCard.jsx
================
import { useState, useRef, useEffect } from 'react';
import { Card, CardContent, CardActions, CardHeader, Collapse, IconButton } from '@mui/material';
import ExpandMoreIcon from '@mui/icons-material/ExpandMore';
import { styled } from '@mui/material/styles';
const ExpandMore = styled((props) => {
  const { ...other } = props;
  return <IconButton {...other} />;
})(({ theme, expand }) => ({
  transform: !expand ? 'rotate(0deg)' : 'rotate(180deg)',
  marginLeft: 'auto',
  transition: theme.transitions.create('transform', {
    duration: theme.transitions.duration.shortest,
  }),
}));
const ExpandableCard = ({ title, children }) => {
  const [expanded, setExpanded] = useState(false);
  const cardRef = useRef(null);
  const handleExpandClick = () => {
    setExpanded(!expanded);
  };
  useEffect(() => {
    if (expanded && cardRef.current) {
      cardRef.current.scrollIntoView({ behavior: 'smooth', block: 'start' });
    }
  }, [expanded]);
  return (
    <Card sx={{ maxWidth: '95%', margin: 'auto', mt: 2 }} ref={cardRef}>
      <CardHeader title={title} />
      <CardActions disableSpacing>
        <ExpandMore
          expand={expanded}
          onClick={handleExpandClick}
          aria-expanded={expanded}
          aria-label="mostrar más"
        >
          <ExpandMoreIcon />
        </ExpandMore>
      </CardActions>
      <Collapse in={expanded} timeout="auto" unmountOnExit>
        <CardContent>
          {children}
        </CardContent>
      </Collapse>
    </Card>
  );
};
export default ExpandableCard;

================
File: src/components/ImageGallery.jsx
================
import { Box, Grid, Paper, IconButton } from '@mui/material';
import CloseIcon from '@mui/icons-material/Close';
import { Gallery, Item } from 'react-photoswipe-gallery';
import 'photoswipe/dist/photoswipe.css';
const ImageGallery = ({ images, onImageDeleted, readOnly = false }) => {
    const handleDeleteImage = (index) => {
        if (!readOnly) {
            onImageDeleted(index);
        }
    };
    return (
        <Gallery>
            <Grid container spacing={2} justifyContent="center" alignItems="center">
                {}
                {images.slice(0, 1).map((image, index) => (
                    <Grid item xs={12} key={index} display="flex" justifyContent="center">
                        <Box sx={{ position: 'relative', display: 'inline-block' }}>
                            <Item
                                original={image}
                                thumbnail={image}
                                width="1024"
                                height="768"
                            >
                                {({ ref, open }) => (
                                    <Box
                                        ref={ref}
                                        onClick={open}
                                        component="img"
                                        src={image}
                                        sx={{
                                            maxWidth: '100%',
                                            maxHeight: '400px',
                                            width: 'auto',
                                            height: 'auto',
                                            borderRadius: '4px',
                                            cursor: 'pointer',
                                        }}
                                    />
                                )}
                            </Item>
                            {!readOnly && (
                                <IconButton
                                    onClick={() => handleDeleteImage(index)}
                                    sx={{ position: 'absolute', top: 0, right: 0, color: 'error.main' }}
                                >
                                    <CloseIcon />
                                </IconButton>
                            )}
                        </Box>
                    </Grid>
                ))}
                {}
                <Grid item xs={12} container spacing={2} justifyContent="center">
                    {images.slice(1).map((image, index) => (
                        <Grid item key={index}>
                            <Box sx={{ position: 'relative', width: '120px', height: '120px' }}>
                                <Paper elevation={2} sx={{ width: '100%', height: '100%', overflow: 'hidden', display: 'flex', justifyContent: 'center', alignItems: 'center' }}>
                                    <Item
                                        original={image}
                                        thumbnail={image}
                                        width="1024"
                                        height="768"
                                    >
                                        {({ ref, open }) => (
                                            <Box
                                                ref={ref}
                                                onClick={open}
                                                component="img"
                                                src={image}
                                                sx={{
                                                    width: 'auto',
                                                    height: '100%',
                                                    borderRadius: '4px',
                                                    cursor: 'pointer',
                                                }}
                                            />
                                        )}
                                    </Item>
                                    {!readOnly && (
                                        <IconButton
                                            onClick={() => handleDeleteImage(index + 1)}
                                            sx={{ position: 'absolute', top: 0, right: 0, color: 'error.main' }}
                                        >
                                            <CloseIcon />
                                        </IconButton>
                                    )}
                                </Paper>
                            </Box>
                        </Grid>
                    ))}
                </Grid>
            </Grid>
        </Gallery>
    );
};
export default ImageGallery;

================
File: src/components/ItemCard.jsx
================
import { useState } from 'react';
import Card from '@mui/material/Card';
import CardContent from '@mui/material/CardContent';
import CardMedia from '@mui/material/CardMedia';
import Typography from '@mui/material/Typography';
import { Box, CardActionArea, Tooltip } from '@mui/material';
import Menu from '@mui/material/Menu';
import MenuItem from '@mui/material/MenuItem';
import IconButton from '@mui/material/IconButton';
import MoreVertIcon from '@mui/icons-material/MoreVert';
export const ItemCard = ({ item, columns, onClick, menuOptions = [] }) => {
  const [anchorEl, setAnchorEl] = useState(null);
  const open = Boolean(anchorEl);
  const handleClick = (event) => {
    event.stopPropagation();
    setAnchorEl(event.currentTarget);
  };
  const handleClose = () => {
    setAnchorEl(null);
  };
  const handleMenuItemClick = (event, option) => {
    event.stopPropagation();
    handleClose();
    option.onClick(item);
  };
  return (
    <Card sx={{ margin: 2, position: 'relative' }}>
      <Tooltip title={item.name}>
        <CardActionArea
          onClick={(e) => onClick(e, item)}
          sx={{ width: '100%', display: 'flex', flexDirection: 'column', alignItems: 'center' }}
        >
          {item.imageUrl && (
            <CardMedia
              component="img"
              sx={{ width: 160, height: 160, objectFit: 'contain' }}
              image={item.imageUrl}
              alt={`Imagen de ${item.name}`}
            />
          )}
          <CardContent sx={{ width: '100%' }}>
            {columns.map((column) => (
              <Box key={column.field} sx={{ display: 'flex', justifyContent: 'center', marginBottom: 1 }}>
                {column.showLabel !== false && (
                  <Typography
                    sx={{
                      marginRight: 1,
                      fontWeight: 'bold',
                      fontSize: '12px'
                    }}
                    color="textSecondary"
                  >
                    {column.headerName}:
                  </Typography>
                )}
                <Typography sx={{ fontSize: '12px', ...(column.valueStyle || {}) }}>
                  {column.field === 'dpi' ? item[column.field] : ''}
                  {column.field === 'name' ? (item[column.field].length > 20 ? item[column.field].slice(0, 20) + '...' : item[column.field]) : ''}
                </Typography>
              </Box>
            ))}
          </CardContent>
        </CardActionArea>
      </Tooltip>
      {menuOptions.length > 0 && (
        <>
          <IconButton
            aria-label="more"
            id="long-button"
            aria-controls={open ? 'long-menu' : undefined}
            aria-expanded={open ? 'true' : undefined}
            aria-haspopup="true"
            onClick={handleClick}
            sx={{ position: 'absolute', top: 8, right: 8 }}
          >
            <MoreVertIcon />
          </IconButton>
          <Menu
            id="long-menu"
            MenuListProps={{
              'aria-labelledby': 'long-button',
            }}
            anchorEl={anchorEl}
            open={open}
            onClose={handleClose}
          >
            {menuOptions.map((option) => (
              <MenuItem key={option.label} onClick={(event) => handleMenuItemClick(event, option)}>
                {option.label}
              </MenuItem>
            ))}
          </Menu>
        </>
      )}
    </Card>
  );
};

================
File: src/components/ItemCardList.jsx
================
import Grid from '@mui/material/Grid';
import {ItemCard} from './ItemCard';
const ItemsCardList = ({ rows, columns, itemCardProps}) => {
    return (
        <Grid container spacing={2}>
            {rows.map((row) => (
                <Grid item xs={12} sm={6} md={3} key={row.id}>
                    <ItemCard item={row} columns={columns} {...itemCardProps} />
                </Grid>
            ))}
        </Grid>
    );
};
export default ItemsCardList;

================
File: src/components/MobileProvider.jsx
================
import { createContext, useContext } from 'react';
import { useTheme } from '@mui/material/styles';
import useMediaQuery from '@mui/material/useMediaQuery';
const MobileContext = createContext();
export const useMobile = () => useContext(MobileContext);
export const MobileProvider = ({ children }) => {
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  return (
    <MobileContext.Provider value={{
        isMobile
    }}>
      {children}
    </MobileContext.Provider>
  );
};

================
File: src/components/ProtectedComponent.jsx
================
import { useEffect, useState } from 'react';
import { CircularProgress, Box } from '@mui/material';
export const ProtectedComponent = ({
  children,
  allowedRoles,
  fallbackComponent: FallbackComponent
}) => {
  const [userRole, setUserRole] = useState('');
  useEffect(() => {
    // Asumimos que el usuario ya está autenticado y su rol está almacenado en localStorage
    const userFromStorage = localStorage.getItem('user');
    const userDetails = userFromStorage ? JSON.parse(userFromStorage) : null;
    setUserRole(userDetails?.role?.description);
  }, []);
  if (userRole === '') {
    return (
      <Box
        sx={{
          display: 'flex',
          justifyContent: 'center',
          alignItems: 'center',
          height: '100vh',
        }}
      >
        <CircularProgress />
      </Box>
    );
  }
  const hasPermission = allowedRoles.includes(userRole);
  if (!hasPermission) {
    if (FallbackComponent) {
      return <FallbackComponent />;
    }
    return <div />;
  }
  return children;
};

================
File: src/components/ResponsiveDrawer/CustomDrawer.jsx
================
import { styled } from '@mui/material/styles';
import MuiDrawer from '@mui/material/Drawer';
import { openedMixin, closedMixin } from '../../styles/utils/drawerFunctions';
import DrawerHeader from '../DrawerHeader';
import { Divider } from '@mui/material';
import ElementList from '../ElementList';
import { adminMenus, mainMenus } from './menus';
const drawerWidth = 240;
const Drawer = styled(MuiDrawer, { shouldForwardProp: (prop) => prop !== 'open' })(
  ({ theme, open }) => ({
    width: drawerWidth,
    flexShrink: 0,
    whiteSpace: 'nowrap',
    boxSizing: 'border-box',
    ...(open && {
      ...openedMixin(theme),
      '& .MuiDrawer-paper': openedMixin(theme),
    }),
    ...(!open && {
      ...closedMixin(theme),
      '& .MuiDrawer-paper': closedMixin(theme),
    }),
  }),
);
const CustomDrawer = ({ open, handleDrawerClose,setComponent }) => {
  return (
    <Drawer variant="permanent" open={open}>
      <DrawerHeader handleDrawerClose={handleDrawerClose} />
      <Divider />
      <ElementList setComponent = {setComponent} open={open} menuItems={mainMenus}/>
      <Divider />
      <ElementList setComponent = {setComponent} open={open} menuItems={adminMenus}/>
    </Drawer>
  );
};
export default CustomDrawer;

================
File: src/components/ResponsiveDrawer/MobileDrawer.jsx
================
import DrawerHeader from '../DrawerHeader';
import { Divider } from '@mui/material';
import ElementList from '../ElementList';
import Drawer from '@mui/material/Drawer';
import { adminMenus, mainMenus } from './menus';
const drawerWidth = 240;
const MobileDrawer = ({ open, handleDrawerClose,setComponent }) => {
  return (
    <Drawer
    variant="temporary"
    open={open}
    onClose={handleDrawerClose}
    ModalProps={{
      keepMounted: true,
    }}
    sx={{
      display: { xs: 'block'},
      '& .MuiDrawer-paper': { boxSizing: 'border-box', width: drawerWidth },
    }}>
      <DrawerHeader handleDrawerClose={handleDrawerClose} />
      <Divider />
      <ElementList setComponent = {setComponent} open={open} menuItems={mainMenus}/>
      <Divider />
      <ElementList setComponent = {setComponent} open={open} menuItems={adminMenus}/>
    </Drawer>
  );
};
export default MobileDrawer;

================
File: src/components/ResponsiveDrawer/ProtectedListItem.jsx
================
import ListItem from '@mui/material/ListItem';
import ListItemButton from '@mui/material/ListItemButton';
import ListItemIcon from '@mui/material/ListItemIcon';
import ListItemText from '@mui/material/ListItemText';
import { ProtectedComponent } from '../ProtectedComponent';
const ProtectedListItem = ({ text, icon, roles, handleClick, open }) => (
  <ProtectedComponent allowedRoles={roles} fallbackComponent={() => <div />}>
    <ListItem disablePadding sx={{ display: 'block' }} onClick={handleClick}>
      <ListItemButton
        sx={{
          minHeight: 48,
          justifyContent: open ? 'initial' : 'center',
          px: 2.5,
        }}
      >
        <ListItemIcon
          sx={{
            minWidth: 0,
            mr: open ? 3 : 'auto',
            justifyContent: 'center',
          }}
        >
          {icon}
        </ListItemIcon>
        <ListItemText primary={text} sx={{ opacity: open ? 1 : 0 }} />
      </ListItemButton>
    </ListItem>
  </ProtectedComponent>
);
export default ProtectedListItem;

================
File: src/components/ResponsiveDrawer/ResponsiveDrawer.jsx
================
import MobileDrawer from './MobileDrawer';
import CustomDrawer from './CustomDrawer';
import { useMobile } from '../MobileProvider';
const ResponsiveDrawer = ({ open, handleDrawerClose,setComponent }) => {
  const responsive = useMobile();
  return responsive.isMobile || responsive.isLandscape ? (
    <MobileDrawer open={open} handleDrawerClose={handleDrawerClose} setComponent = {setComponent}/>
  ) : (
    <CustomDrawer open={open} handleDrawerClose={handleDrawerClose} setComponent = {setComponent}/>
  );
};
export default ResponsiveDrawer;

================
File: src/components/ResponsiveDrawer/menus.jsx
================
import InventoryIcon from '@mui/icons-material/Inventory';
import LocalShipping from '@mui/icons-material/LocalShipping';
import ManageAccountsIcon from '@mui/icons-material/ManageAccounts';
import { ROLES } from '../../util/userConstants';
import UserPage from '../../pages/Users/UserPage';
import ProductsPage from '../../pages/Products/ProductsPage';
import ProviderPage from '../../pages/Providers/ProviderPage';
const mainMenus = [
    { text: 'Productos', icon: <InventoryIcon />, roles: [ROLES.ADMIN, ROLES.EMPLOYEE], component: <ProductsPage /> },
    { text: 'Proveedores', icon: <LocalShipping />, roles: [ROLES.ADMIN, ROLES.EMPLOYEE], component: <ProviderPage /> },
];
const adminMenus = [
    { text: 'Usuarios', icon: <ManageAccountsIcon />, roles: [ROLES.ADMIN], component: <UserPage /> }
];
export { mainMenus, adminMenus }

================
File: src/components/SnackbarContext.jsx
================

import { createContext, useContext, useState } from 'react';
import { Snackbar, Alert } from '@mui/material';
const SnackbarContext = createContext();
export const useSnackbar = () => useContext(SnackbarContext);
export const SnackbarProvider = ({ children }) => {
  const [snackbarOpen, setSnackbarOpen] = useState(false);
  const [snackbarMessage, setSnackbarMessage] = useState('');
  const [snackbarSeverity, setSnackbarSeverity] = useState('info');
  const openSnackbar = (message, severity = 'info') => {
    setSnackbarMessage(message);
    setSnackbarSeverity(severity);
    setSnackbarOpen(true);
  };
  const closeSnackbar = () => {
    setSnackbarOpen(false);
  };
  return (
    <SnackbarContext.Provider value={{ openSnackbar, closeSnackbar }}>
      {children}
      <Snackbar
        open={snackbarOpen}
        autoHideDuration={6000}
        onClose={closeSnackbar}
        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}
      >
        <Alert onClose={closeSnackbar} severity={snackbarSeverity} sx={{ width: '100%' }}>
          {snackbarMessage}
        </Alert>
      </Snackbar>
    </SnackbarContext.Provider>
  );
};

================
File: src/models/Brand.js
================
import File from "./File";
export default class Brand {
    constructor({ id, name, brandTypeId, file = {}}) {
        this.id = id;
        this.name = name;
        this.brandTypeId = brandTypeId;
        this.file = new File(file);
    }
}

================
File: src/models/CarModel.js
================
import Brand from "./Brand";
export default class CarModel {
    constructor({id, name, brand = {}, brandId}) {
        this.id = id;
        this.name = name;
        this.brandId = brandId;
        this.brand = new Brand(brand);
    }
}

================
File: src/models/File.js
================
export default class File {
    constructor({ id, name, mimeType, storagePath, orderId, fileData, fileTypeId}) {
        this.id = id;
        this.name = name;
        this.mimeType = mimeType;
        this.storagePath = storagePath;
        this.orderId = orderId;
        this.fileData = fileData;
        this.fileTypeId = fileTypeId;
    }
}

================
File: src/models/Person.js
================
export default class Person {
    constructor({ id, name, lastName, birthDate, email, phoneNumber, address }) {
        this.id = id;
        this.name = name;
        this.lastName = lastName;
        this.birthDate = birthDate;
        this.email = email;
        this.phoneNumber = phoneNumber;
        this.address = address;
    }
}

================
File: src/models/Price.js
================
export default class Price {
    constructor({id, description, cost}) {
        this.id = id;
        this.description = description;
        this.cost = cost;
    }
}

================
File: src/models/Product.js
================
import Brand from "./Brand";
import File from "./File";
import { ProductCarModel } from "./ProductCarModel";
import ProductPrice from "./ProductPrice";
import { ProviderProduct } from "./ProviderProduct";
export default class Product {
  constructor({ id, name, brand = {}, comments, stockCount, images, files = [], providers = [], prices = [], carModels = [], dpi = ''}) {
    this.id = id;
    this.name = name;
    this.brand = new Brand(brand);
    this.comments = comments;
    this.stockCount = stockCount;
    this.images = images;
    this.files = files.map(file => new File(file ?? {}));
    this.providers = providers.map(provider => new ProviderProduct(provider ?? {}));
    this.prices = prices.map(price => new ProductPrice(price ?? {}));
    this.carModels = carModels.map(carModel => new ProductCarModel(carModel ?? {}));
    this.dpi = dpi;
  }
}

================
File: src/models/ProductCarModel.js
================
import CarModel from "./CarModel";
import Product from "./Product";
export class ProductCarModel {
    constructor({
        productId, carModelId, initialYear, lastYear, carModel = {},
         product = {}
    }) {
        this.product = new Product(product);
        this.productId = productId;
        this.carModelId = carModelId;
        this.initialYear = initialYear;
        this.lastYear = lastYear;
        this.carModel = new CarModel(carModel);
    }
}

================
File: src/models/ProductFile.js
================
import File from "./File";
export default class ProductFile {
    constructor({ productId, fileId, file = {}}) {
        this.productId = productId;
        this.fileId = fileId;
        this.file = new File(file);
    }
}

================
File: src/models/ProductPrice.js
================
import Price from "./Price";
export default class ProductPrice {
    constructor({productId, priceId, price = {}}) {
        this.productId = productId;
        this.priceId = priceId;
        this.price = new Price(price);
    }
}

================
File: src/models/Provider.js
================
export default class Provider {
    constructor({id, name,phoneNumber,address,comments}){
        this.id = id;
        this.name = name;
        this.phoneNumber = phoneNumber;
        this.address = address;
        this.comments = comments
    }
}

================
File: src/models/ProviderProduct.js
================
import Price from "./Price";
import Provider from "./Provider";
export class ProviderProduct {
    constructor({providerId, productId, priceId, numSeries, price = {}, provider = {}}) {
        this.providerId = providerId;
        this.productId = productId;
        this.priceId = priceId;
        this.numSeries = numSeries;
        this.price = new Price(price);
        this.provider = new Provider(provider);
    }
}

================
File: src/models/Radiator.js
================
import Product from "./Product";
export default class Radiator {
  constructor({dpi, product = {}}) {
    this.dpi = dpi;
    this.product = new Product(product);
  }
}

================
File: src/models/Role.js
================
export default class Role{
    constructor({id, description}) {
        this.id = id;
        this.description = description;
    }
}

================
File: src/models/User.js
================
import Person from "./Person";
export default class User {
    constructor({ id, person = {}, roleId, role = {}}) {
        this.id = id;
        this.person = new Person(person);
        this.roleId = roleId;
        this.role = role
    }
}

================
File: src/models/Vehicle.js
================
export default class Vehicle {
    constructor({id, vehicleModel, version, year}) {
        this.id = id;
        this.vehicleModel = vehicleModel;
        this.version = version;
        this.year = year;
    }
}

================
File: src/pages/Home.jsx
================
import * as React from 'react';
import { styled } from '@mui/material/styles';
import Box from '@mui/material/Box';
import MuiAppBar from '@mui/material/AppBar';
import CssBaseline from '@mui/material/CssBaseline';
import CustomToolBar from '../components/CustomToolBar';
import ProductsPage from './Products/ProductsPage';
import ResponsiveDrawer from '../components/ResponsiveDrawer/ResponsiveDrawer';
import { MobileProvider } from '../components/MobileProvider';
const drawerWidth = 240;
const ContentHeader = styled('div')(({ theme }) => ({
  ...theme.mixins.toolbar,
}));
const AppBar = styled(MuiAppBar, {
  shouldForwardProp: (prop) => prop !== 'open',
})(({ theme, open }) => ({
  zIndex: theme.zIndex.drawer + 1,
  transition: theme.transitions.create(['width', 'margin'], {
    easing: theme.transitions.easing.sharp,
    duration: theme.transitions.duration.leavingScreen,
  }),
  ...(open && {
    marginLeft: drawerWidth,
    width: `calc(100% - ${drawerWidth}px)`,
    transition: theme.transitions.create(['width', 'margin'], {
      easing: theme.transitions.easing.sharp,
      duration: theme.transitions.duration.enteringScreen,
    }),
  }),
}));
export default function Home() {
  const [open, setOpen] = React.useState(false);
  const [selectedComponent, setSelectedComponent] = React.useState(<ProductsPage />);
  const handleDrawerOpen = () => {
    setOpen(true);
  };
  const handleDrawerClose = () => {
    setOpen(false);
  };
  const handleComponentChange = (component) => {
    setSelectedComponent(component);
  };
  return (
    <MobileProvider>
      <Box sx={{ display: 'flex' }}>
        <CssBaseline />
        <AppBar position="fixed" open={open} >
          <CustomToolBar handleDrawerOpen={handleDrawerOpen} open={open} />
        </AppBar>
        {}
        <ResponsiveDrawer open={open} handleDrawerClose={handleDrawerClose} setComponent={handleComponentChange} style={{ width: drawerWidth }} />
        <Box component="main" sx={{ flexGrow: 1, p: 3 }}>
          <ContentHeader />
          {}
          {selectedComponent}
        </Box>
      </Box>
    </MobileProvider>
  );
}

================
File: src/pages/Login.jsx
================
import { useState } from 'react';
import Button from '@mui/material/Button';
import CssBaseline from '@mui/material/CssBaseline';
import TextField from '@mui/material/TextField';
import Link from '@mui/material/Link';
import Box from '@mui/material/Box';
import CircularProgress from '@mui/material/CircularProgress';
import Typography from '@mui/material/Typography';
import Container from '@mui/material/Container';
import { Alert, Stack } from '@mui/material';
import { useNavigate } from 'react-router-dom';
import { signIn } from '../services/Firebase/auth';
import Logo from '../assets/LOGO CON CONTORNO BLANCO RD.png';
import { useMobile } from '../components/MobileProvider';
function Copyright(props) {
  return (
    <Typography
      variant='body2'
      color='text.secondary'
      align='center'
      {...props}
    >
      {'Copyright © '}
      <Link color='inherit' href='https://mui.com/'>
        Your Website
      </Link>{' '}
      {new Date().getFullYear()}
      {'.'}
    </Typography>
  );
}
const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
export default function Login() {
  const responsive = useMobile();
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState({ email: '', password: '' });
  const [alert, setAlert] = useState({
    show: false,
    message: '',
    severity: 'error',
  });
  const [isLoading, setIsLoading] = useState(false);
  const navigate = useNavigate();
  const handleSubmit = async (event) => {
    event.preventDefault();
    setAlert({ ...alert, show: false });
    if (!email || !password) {
      setAlert({
        show: true,
        message: 'Favor de introducir los campos requeridos',
        severity: 'error',
      });
      return;
    }
    if (!emailRegex.test(email)) {
      setAlert({
        show: true,
        message: 'Introduce un Email valido',
        severity: 'error',
      });
      setError((prevError) => ({
        ...prevError,
        email: 'Email no válido',
      }));
      return;
    }
    try {
      setIsLoading(true);
      const validate = await signIn(email, password);
      if (validate) {
        navigate('/home');
      } else {
        setAlert({ show: true, message: 'Usuario o Contraseña incorrecta', severity: 'error' });
      }
    } catch (error) {
      console.log(error);
      setAlert({ show: true, message: 'Servicio no disponible', severity: 'error' });
    } finally {
      setIsLoading(false);
    }
  };
  return (
    <Container
      component='main'
      sx={{
        height: '100dvh',
        display: 'flex',
        flexDirection: 'column',
        justifyContent: 'center',
      }}
    >
      <CssBaseline />
      <Box
        sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}
      >
        <img
          src={Logo}
          alt='Logotipo Refaccionaria Diaz'
          style={{ width: responsive.isMobile || responsive.isLandscape ? 350 : 500, height: 'auto', marginBottom: 20 }}
        />
        <Box component='form' onSubmit={handleSubmit} noValidate sx={{ mt: 1 }}>
          <TextField
            margin='normal'
            required
            fullWidth
            id='email'
            label='Email'
            name='email'
            autoComplete='email'
            autoFocus
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            error={!!error.email}
            helperText={error.email}
          />
          <TextField
            margin='normal'
            required
            fullWidth
            name='password'
            label='Password'
            type='password'
            id='password'
            autoComplete='current-password'
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            error={!!error.password}
            helperText={error.password}
          />
          <Button
            color='success'
            type='submit'
            fullWidth
            variant='contained'
            sx={{ mt: 3, mb: 2 }}
          >
            Sign In
          </Button>
          {isLoading && (
            <Box
              sx={{
                position: 'fixed',
                top: '0',
                left: '0',
                width: '100%',
                height: '100%',
                display: 'flex',
                justifyContent: 'center',
                alignItems: 'center',
                backgroundColor: 'rgba(0, 0, 0, 0.5)',
                zIndex: 9999,
              }}
            >
              <CircularProgress />
            </Box>
          )}
          {alert.show && (
            <Stack sx={{ width: '100%', mb: 2 }}>
              <Alert severity={alert.severity}>{alert.message}</Alert>
            </Stack>
          )}
        </Box>
      </Box>
      <Copyright sx={{ mt: 8, mb: 4 }} />
    </Container>
  );
}

================
File: src/pages/Products/BrandViewer/BrandContainer.jsx
================
import { useEffect, useState } from 'react';
import { getAllBrands } from '../../../services/BrandService';
import { getImageURLFromStorage } from '../../../services/Firebase/storage';
import { CSSTransition } from 'react-transition-group';
import BrandList from './BrandList';
import '../../../styles/brandContainer.css';
import { useSnackbar } from '../../../components/SnackbarContext';
import { useProductsContext } from '../ProductsContext';
import { Screens } from '../ProductsConstants';
const BrandContainer = () => {
  const [brands, setBrands] = useState([]);
  const { openSnackbar } = useSnackbar();
  const { handleItemSelect, searchTerm, setLoading } = useProductsContext();
  const onBrandSelect = (e, brand) => {
    handleItemSelect(brand, Screens.BRANDS);
  }
  useEffect(() => {
    setLoading(true);
    const fetchBrands = async () => {
      try {
        const brandsData = await getAllBrands();
        const brandsWithImages = await Promise.all(brandsData.map(async (brand) => {
          if (brand.file) {
            const imageUrl = await getImageURLFromStorage(brand.file.storagePath).catch(error => {
              console.error("Error al obtener url imagen de storage para marca:", brand.name, error);
              return '';
            });
            return { ...brand, imageUrl };
          } else {
            return brand;
          }
        }));
        setBrands(brandsWithImages);
        setLoading(false);
      } catch (error) {
        console.error("Error al obtener las marcas:", error);
        openSnackbar(error.errorMessage, "error");
        setLoading(false);
      }
    };
    fetchBrands();
  }, [setLoading]);
  return (
    <CSSTransition
      in={brands.length > 0}
      timeout={300}
      classNames="fade"
      unmountOnExit
    >
      <div>
        <BrandList title="Automotriz" brands={brands.filter(brand => brand.brandTypeId === 1 && brand.name.toLowerCase().includes(searchTerm.toLowerCase()))} onBrandSelect={onBrandSelect} />
        <BrandList title="Carga Pesada" brands={brands.filter(brand => brand.brandTypeId === 2 && brand.name.toLowerCase().includes(searchTerm.toLowerCase()))} onBrandSelect={onBrandSelect} />
      </div>
    </CSSTransition>
  );
};
export default BrandContainer;

================
File: src/pages/Products/BrandViewer/BrandList.jsx
================
import ItemsCardList from '../../../components/ItemCardList';
const columns = [
  { field: 'name', headerName: 'Nombre', showLabel: false, valueStyle: { textTransform: 'uppercase', fontWeight: 'bold', fontSize: '18px'} },
];
const BrandList = ({ title, brands, onBrandSelect }) => {
  return (
    <div className="brand-list-container">
      {title && <h2>{title}</h2>}
      <ItemsCardList rows={brands} columns={columns} itemCardProps={{ onClick: onBrandSelect }} />
    </div>
  );
};
export default BrandList;

================
File: src/pages/Products/Forms/RadiatorForm.jsx
================
import { useEffect } from "react";
import { Box, TextField } from "@mui/material";
import { useProductDialogContext } from "../ProductDialog/ProductDialogContext";
import { modifyAndClone } from "../../../util/generalUtils";
const RadiatorFormDisplay = ({ product, handleChange, readOnly }) => {
    return (
        <Box>
            <TextField
                fullWidth
                label="DPI"
                variant="outlined"
                sx={{ mt: 4 }}
                value={product.dpi || ''}
                onChange={(e) => {
                    handleChange(e,'dpi')
                }}
                InputProps={{ readOnly }}
            />
            <TextField
                fullWidth
                label="Unidades disponibles"
                variant="outlined"
                type="number"
                sx={{ mt: 4 }}
                value={product.stockCount || ''}
                onChange={(e) => {
                    handleChange(e,'stockCount')
                }}
                InputProps={{ readOnly }}
            />
            <TextField
                fullWidth
                label="Comentarios"
                variant="outlined"
                multiline
                rows={4}
                sx={{ mt: 4 }}
                value={product.comments || ''}
                onChange={(e) => {
                    handleChange(e,'comments')
                }}
                InputProps={{ readOnly }}
            />
        </Box>
    );
};
const RadiatorFormContainer = ({ setIsFormValid }) => {
    const { product, handleSetProduct } = useProductDialogContext();
    useEffect(() => {
        setIsFormValid(product.stockCount);
    }, [product.dpi, product.stockCount, setIsFormValid]);
    const handleChange = (event, field) => {
        handleSetProduct(modifyAndClone(product, field, event.target.value));
    };
    return <RadiatorFormDisplay
              product={product}
              handleChange={handleChange}
              readOnly={false}
            />;
};
export { RadiatorFormContainer as default, RadiatorFormDisplay}

================
File: src/pages/Products/ModelViewer/CarModelContainer.jsx
================
import { useEffect, useState } from 'react';
import { getCarModelsByBrandId } from '../../../services/BrandService';
import { useSnackbar } from '../../../components/SnackbarContext';
import CarModelList from './CarModelList';
import { deleteCarModel, getCarModels } from '../../../services/CarModelService';
import { useProductsContext } from '../ProductsContext';
import { Screens } from '../ProductsConstants';
const CarModelListContainer = () => {
    const [carModels, setCarModels] = useState([]);
    const { openSnackbar } = useSnackbar();
    const { selectedBrand, handleItemSelect, setLoading, searchTerm } = useProductsContext();
    const onCarModelSelect = (e, carModel) => {
        handleItemSelect(carModel, Screens.MODELS);
    }
    const handleOnDelete = async (carModel) => {
        try {
            const isDeleted = await deleteCarModel(carModel.id);
            if (isDeleted) {
                const models = carModels.filter(model => model.id !== carModel.id);
                setCarModels(models);
                openSnackbar('Modelo eliminado correctamente', 'success');
            } else {
                openSnackbar('Error al eliminar el modelo', 'error');
            }
        } catch (error) {
            openSnackbar(`Error al eliminar el modelo: ${error.errorMessage}`, 'error');
        }
    }
    useEffect(() => {
        const fetchCarModels = async () => {
            try {
                setLoading(true);
                let models = [];
                if (selectedBrand && selectedBrand.id ) {
                    models = await getCarModelsByBrandId(selectedBrand.id);
                } else {
                    models = await getCarModels(searchTerm);
                }
                setCarModels(models);
                setLoading(false);
            } catch (error) {
                setLoading(false);
                openSnackbar(`Error al obtener los modelos de vehículos: ${error.errorMessage}`, 'error');
            }
        };
        fetchCarModels();
    }, [selectedBrand, searchTerm]);
    return (
        <CarModelList carModels={carModels} onCarModelSelect={onCarModelSelect} handleOnDelete={handleOnDelete}/>
    );
};
export default CarModelListContainer;

================
File: src/pages/Products/ModelViewer/CarModelList.jsx
================
import ItemsCardList from "../../../components/ItemCardList";
const CarModelList = ({ carModels, onCarModelSelect, handleOnDelete }) => {
  const columns = [
    { field: 'name', headerName: 'Modelo', showLabel: false, valueStyle: { textTransform: 'uppercase', fontWeight: 'bold', fontSize: '18px'} },
  ];
  const rows = carModels.map(carModel => ({
    id: carModel.id,
    name: carModel.name
  }));
  return (
    <div>
      <ItemsCardList rows={rows} columns={columns} itemCardProps={{onClick: onCarModelSelect,
        menuOptions: [
          {
            label: 'Eliminar',
            onClick: handleOnDelete
          },
          {
            label: 'Editar',
            onClick: (item) => {
              console.log('Editar', item);
            }
          }
        ]
      }} />
    </div>
  );
};
export default CarModelList;

================
File: src/pages/Products/ProductDialog/ImageUpload.jsx
================
import React, { useRef, useState } from 'react';
import { Box, Button, Typography } from '@mui/material';
import CloudUploadIcon from '@mui/icons-material/CloudUpload';
import ImageGallery from '../../../components/ImageGallery';
import { useMobile } from '../../../components/MobileProvider';
const ImageUpload = React.memo(({ uploadedImages, onImageUpload, onImageDelete, readOnly = false }) => {
    const [dragOver, setDragOver] = useState(false);
    const { isMobile } = useMobile();
    const fileInputRef = useRef(null);
    const handleDragOver = (event) => {
        if (!readOnly) {
            event.preventDefault();
            setDragOver(true);
        }
    };
    const handleDragLeave = (event) => {
        if (!readOnly) {
            event.preventDefault();
            setDragOver(false);
        }
    };
    const handleDrop = (event) => {
        if (!readOnly) {
            event.preventDefault();
            setDragOver(false);
            const files = event.dataTransfer.files;
            if (files.length > 0) {
                Array.from(files).forEach(file => onImageUpload(file));
            }
        }
    };
    const handleChange = (event) => {
        if (!readOnly) {
            const files = event.target.files;
            if (files.length > 0) {
                Array.from(files).forEach(file => onImageUpload(file));
            }
        }
    };
    return (
        <Box
            sx={{
                border: '1px dashed gray',
                padding: 2,
                marginTop: 2,
                backgroundColor: dragOver ? 'action.hover' : 'background.paper',
                textAlign: 'center',
                cursor: readOnly ? 'default' : 'pointer',
                minHeight: isMobile ? 200 : 300,
                display: 'flex',
                flexDirection: 'column',
                justifyContent: 'center',
            }}
            onDragOver={readOnly ? null : handleDragOver}
            onDragLeave={readOnly ? null : handleDragLeave}
            onDrop={readOnly ? null : handleDrop}
        >
            {readOnly ? (
                <ImageGallery images={uploadedImages} readOnly />
            ) : (
                <>
                    <input
                        accept="image/*"
                        style={{ display: 'none' }}
                        id="raised-button-file"
                        multiple
                        type="file"
                        onChange={handleChange}
                        ref={fileInputRef}
                    />
                    <ImageGallery images={uploadedImages} onImageDeleted={onImageDelete} />
                    <label htmlFor="raised-button-file">
                        <Button
                            variant="contained"
                            component="span"
                            startIcon={<CloudUploadIcon />}
                            sx={{ mt: 2, mb: 1 }}
                        >
                            Cargar Imagen
                        </Button>
                    </label>
                </>
            )}
            {uploadedImages.length === 0 && !readOnly && <Typography>Arrastra imágenes aquí, o haz clic para seleccionarlas.</Typography>}
            {uploadedImages.length === 0 && readOnly && <Typography>No hay imagenes cargadas</Typography>}
        </Box>
    );
}, areEqual);
ImageUpload.displayName = 'ImageUpload';
function areEqual(prevProps, nextProps) {
    return prevProps.uploadedImages === nextProps.uploadedImages &&
        prevProps.readOnly === nextProps.readOnly;
}
export default ImageUpload;

================
File: src/pages/Products/ProductDialog/ModelManager.jsx
================
import { useEffect, useState } from 'react';
import {
  Button, Table, TableBody, TableCell, TableHead, TableRow, TextField, IconButton, Typography, Grid, FormControl, InputLabel, Select, MenuItem
} from '@mui/material';
import DeleteIcon from '@mui/icons-material/Delete';
import ExpandableCard from '../../../components/ExpandableCard';
import CustomSelectWithAdd from '../../../components/CustomSelectWithAdd';
import { useProductDialogContext } from './ProductDialogContext';
import { getCarModelsByBrandId, getAllBrands } from '../../../services/BrandService';
import { createCarModel } from '../../../services/CarModelService';
import CarModel from '../../../models/CarModel';
import { useSnackbar } from '../../../components/SnackbarContext';
import { ProductCarModel } from '../../../models/ProductCarModel';
import Brand from '../../../models/Brand';
import { modifyAndClone } from '../../../util/generalUtils';
const ModelManagerDisplay = ({
  product,
  brand,
  brands,
  handleBrandChange,
  carModels,
  productModel,
  handleCarModelAdded,
  handleModelChange,
  handleDeleteModel,
  setCarModels,
  readOnly = false,
  handleStartYearChange,
  handleLastYearChange,
  handleOnItemAdded,
  isAddButtonDisabled
}) => {
  return (
    <ExpandableCard title={"Modelos"}>
      <Typography gutterBottom variant="body2" component="p" sx={{ mb: 2 }}>
        {readOnly ? '' : 'Agrega y gestiona los modelos.'}
      </Typography>
      {!readOnly && (
        <>
          <Grid container spacing={2} sx={{ mb: 2 }}>
            <Grid item xs={6}>
              <FormControl fullWidth>
                <InputLabel id="brand-select-label">Marca</InputLabel>
                <Select
                  labelId="brand-select-label"
                  id="brand-select"
                  value={brand.id}
                  onChange={handleBrandChange}
                  label="Marca"
                >
                  <MenuItem value="">
                    <em>None</em>
                  </MenuItem>
                  {brands.map((brand) => (
                    <MenuItem key={brand.id} value={brand.id}>{brand.name}</MenuItem>
                  ))}
                </Select>
              </FormControl>
            </Grid>
            <Grid item xs={6}>
              <CustomSelectWithAdd
                elements={carModels}
                setElements={setCarModels}
                label="Modelo"
                placeholder="Introduce un Modelo"
                selectedItem={carModels.find(model => model.id === productModel.carModelId)}
                setSelectedItem={handleModelChange}
                getItemText={item => item.name}
                onItemAdded={handleOnItemAdded}
                dialogFields={[
                  {
                    name: 'name',
                    label: 'Nombre del Modelo',
                    type: 'text',
                    required: true,
                  },
                ]}
              />
            </Grid>
            <Grid item xs={6}>
              <TextField
                label="Año Inicial"
                type="number"
                variant="outlined"
                value={productModel.initialYear}
                onChange={(e) => handleStartYearChange(e.target.value)}
                fullWidth
              />
            </Grid>
            <Grid item xs={6}>
              <TextField
                label="Año Final"
                type="number"
                variant="outlined"
                value={productModel.lastYear}
                onChange={(e) => handleLastYearChange(e.target.value)}
                fullWidth
              />
            </Grid>
          </Grid>
          <Button
            onClick={handleCarModelAdded}
            variant="contained"
            sx={{ mt: 2 }}
            disabled={isAddButtonDisabled}
          >
            Agregar Modelo
          </Button>
        </>
      )}
      <Table size="small" sx={{ mt: 4 }}>
        <TableHead>
          <TableRow>
            <TableCell>Modelo</TableCell>
            <TableCell align="right">Año Inicial</TableCell>
            <TableCell align="right">Año Final</TableCell>
            {!readOnly && <TableCell align="right">Acciones</TableCell>}
          </TableRow>
        </TableHead>
        <TableBody>
          {product.carModels.map((productCarModel, index) => {
            return (
              <TableRow key={productCarModel.id}>
                <TableCell component="th" scope="row">
                  {productCarModel.carModel.name}
                </TableCell>
                <TableCell align="right">{productCarModel.initialYear}</TableCell>
                <TableCell align="right">{productCarModel.lastYear}</TableCell>
                {!readOnly && (
                  <TableCell align="right">
                    <IconButton onClick={() => handleDeleteModel(index)} aria-label="delete">
                      <DeleteIcon />
                    </IconButton>
                  </TableCell>
                )}
              </TableRow>
            );
          })}
        </TableBody>
      </Table>
    </ExpandableCard>
  );
};
const ModelManager = () => {
  const [productModel, setProductModel] = useState(new ProductCarModel({}));
  const [selectedBrand, setSelectedBrand] = useState(new Brand({}));
  const [brands, setBrands] = useState([]);
  const [models, setModels] = useState([]);
  const { openSnackbar } = useSnackbar();
  const { product, handleSetProduct } = useProductDialogContext();
  useEffect(() => {
    const fetchBrands = async () => {
      try {
        const brandsData = await getAllBrands();
        setBrands(brandsData);
      } catch (error) {
        openSnackbar(`Error al obtener las marcas: ${error.message}`, 'error');
      }
    };
    fetchBrands();
  }, []);
  useEffect(() => {
    const fetchCarModels = async () => {
      try {
        const carModelsData = await getCarModelsByBrandId(selectedBrand.id);
        setModels(carModelsData);
      } catch (error) {
        openSnackbar(`Error al obtener los modelos de la marca: ${selectedBrand.name}`, 'error');
      }
    };
    if (selectedBrand.id) fetchCarModels();
  }, [selectedBrand]);
  const handleBrandChange = (event) => {
    let selectedBrand = brands.find(brand => brand.id === event.target.value);
    setSelectedBrand(selectedBrand);
  };
  const handleModelChange = (carModelSelected) => {
    setProductModel(new ProductCarModel({ ...productModel, carModelId: carModelSelected.id, carModel: carModelSelected}));
  };
  const handleDeleteModel = (index) => {
    const newProductsCarModels = product.carModels.filter((_, i) => i !== index);
    handleSetProduct(modifyAndClone(product, 'carModels', newProductsCarModels));
  };
  const handleStartYearChange = (year) => {
    setProductModel({ ...productModel, initialYear: year });
  }
  const handleLastYearChange = (year) => {
    setProductModel({ ...productModel, lastYear: year });
  }
  const handleOnItemAdded = async (elements, newItem) => {
    const newVehicleModel = new CarModel({
      brandId: selectedBrand.id,
      ...newItem
    });
    const createdVehicleModel = await createCarModel(newVehicleModel);
    return createdVehicleModel.id;
  }
  const handleCarModelAdded = () => {
    handleSetProduct(modifyAndClone(product, 'carModels', [...product.carModels, productModel]));
  }
  const isAddButtonDisabled = !productModel.carModelId || !productModel.initialYear || !productModel.lastYear;
  return (
    <ModelManagerDisplay
      product={product}
      carModels={models}
      setCarModels={setModels}
      productModel={productModel}
      brand={selectedBrand}
      setProductModel={setProductModel}
      brands={brands}
      handleBrandChange={handleBrandChange}
      handleModelChange={handleModelChange}
      handleDeleteModel={handleDeleteModel}
      readOnly={false}
      handleStartYearChange={handleStartYearChange}
      handleLastYearChange={handleLastYearChange}
      handleOnItemAdded={handleOnItemAdded}
      handleCarModelAdded={handleCarModelAdded}
      isAddButtonDisabled={isAddButtonDisabled}
    />
  );
};
export { ModelManager as default, ModelManagerDisplay }

================
File: src/pages/Products/ProductDialog/PriceManager.jsx
================
import { useState } from 'react';
import {
  Button, Table, TableBody, TableCell, TableHead, TableRow, TextField, IconButton, Typography, Box
} from '@mui/material';
import DeleteIcon from '@mui/icons-material/Delete';
import ExpandableCard from '../../../components/ExpandableCard';
import { useProductDialogContext } from './ProductDialogContext';
import Price from '../../../models/Price';
import ProductPrice from '../../../models/ProductPrice';
const PriceManagerDisplay = ({
  product,
  price,
  setPrice,
  handleDeletePrice,
  handleAddPrice,
  isAddButtonDisabled,
  readOnly = false
}) => {
  return (
    <ExpandableCard title="Precios">
      <Typography gutterBottom variant="body2" component="p" sx={{ mb: 2 }}>
        {readOnly ? '' : 'Agrega y gestiona los precios.'}
      </Typography>
      {!readOnly && (
        <Box sx={{ mb: 2 }}>
          <TextField
            label="Descripción"
            variant="outlined"
            value={price.description ?? ''}
            onChange={(e) => {
              let newDescription = e.target.value;
              setPrice(new Price({ ...price, description: newDescription }));
            }}
            fullWidth
            sx={{ mb: 1 }}
          />
          <TextField
            label="Costo"
            type="number"
            variant="outlined"
            value={price.cost ?? ''}
            onChange={(e) => {
              let newCost = e.target.value;
              setPrice(new Price({ ...price, cost: newCost }));
            }}
            fullWidth
          />
          <Button
            onClick={handleAddPrice}
            variant="contained"
            sx={{ mt: 2 }}
            disabled={isAddButtonDisabled}
          >
            Agregar Precio
          </Button>
        </Box>
      )}
      <Table size="small">
        <TableHead>
          <TableRow>
            <TableCell>Descripción</TableCell>
            <TableCell align="right">Costo</TableCell>
            {!readOnly && <TableCell align="right">Acciones</TableCell>}
          </TableRow>
        </TableHead>
        <TableBody>
          {product.prices.map((productPrice, index) => (
            <TableRow key={index}>
              <TableCell>{productPrice.price.description}</TableCell>
              <TableCell align="right">{productPrice.price.cost}</TableCell>
              {!readOnly && <TableCell align="right">
                <IconButton onClick={() => handleDeletePrice(index)} size="large">
                  <DeleteIcon />
                </IconButton>
              </TableCell>}
            </TableRow>
          ))}
        </TableBody>
      </Table>
    </ExpandableCard>
  )
};
const PriceManagerContainer = () => {
  const { product, handleSetProduct } = useProductDialogContext();
  const [price, setPrice] = useState(new Price({}));
  const handleAddPrice = () => {
    const updatedPrices = [...product.prices, new ProductPrice({price})];
    handleSetProduct({ ...product, prices: updatedPrices });
    setPrice(new Price({}));
  };
  const handleDeletePrice = (index) => {
    const updatedPrices = product.prices.filter((price, i) => i !== index);
    handleSetProduct({ ...product, prices: updatedPrices });
  };
  const isAddButtonDisabled = !price.description || !price.cost;
  return (
    <PriceManagerDisplay
      product={product}
      price={price}
      setPrice={setPrice}
      handleDeletePrice={handleDeletePrice}
      handleAddPrice={handleAddPrice}
      isAddButtonDisabled={isAddButtonDisabled}
    />
  );
};
export { PriceManagerContainer as default, PriceManagerDisplay }

================
File: src/pages/Products/ProductDialog/ProductBasicInfo.jsx
================
import { useEffect, useState } from "react";
import { Box, Grid, FormControl, InputLabel, Select, MenuItem, Typography } from "@mui/material";
import ImageUpload from "./ImageUpload";
import { useProductsContext } from "../ProductsContext";
import { useProductDialogContext } from "./ProductDialogContext";
import { ProductTypes } from "../ProductsConstants";
import RadiatorForm from '../Forms/RadiatorForm';
const ProductBasicInfo = ({ ProductForm }) => {
    const { productType, handleChangeProductType } = useProductsContext();
    const { setIsNextEnabled, handleImageUpload, handleImageDelete, product } = useProductDialogContext();
    const [isFormValid, setIsFormValid] = useState(false);
    let images = product.files.map(file => file.fileData);
    useEffect(() => {
        setIsNextEnabled(isFormValid);
    }, [isFormValid, setIsNextEnabled]);
    const handleProductTypeChange = (event) => {
        handleChangeProductType(event.target.value);
    };
    const renderProductForm = (setIsFormValid) => {
        switch (productType) {
            case ProductTypes.RADIATOR:
                return <RadiatorForm setIsFormValid={setIsFormValid}/>;
            case ProductTypes.CAP:
                return <ProductForm />;
            case ProductTypes.FAN:
                return <ProductForm />;
            default:
                return <ProductForm />;
        }
    };
    const InputProductSelector = () => (
        <FormControl fullWidth sx={{ mt: 4 }}>
            <InputLabel id="product-type-label">Tipo de Producto</InputLabel>
            <Select
                labelId="product-type-label"
                id="product-type"
                value={productType}
                label="Tipo de Producto"
                onChange={handleProductTypeChange}
            >
                <MenuItem value={ProductTypes.RADIATOR}>Radiador</MenuItem>
                <MenuItem value={ProductTypes.CAP}>Tapas</MenuItem>
                <MenuItem value={ProductTypes.FAN}>Abanicos</MenuItem>
            </Select>
        </FormControl>
    );
    return (
        <Box sx={{ p: 2 }} id='dialog-content'>
            <Grid container spacing={2}>
                <Grid item xs={12} md={7} sx={{ display: 'flex', flexDirection: 'column' }}>
                    <InputProductSelector />
                    {renderProductForm(setIsFormValid)}
                </Grid>
                <Grid item xs={12} md={5} sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
                    <Box sx={{ paddingTop: 2, }}>
                        <Typography variant="h6" component="h2" sx={{ textAlign: 'center', marginBottom: 2 }}>
                            Imagen del Producto
                        </Typography>
                        <Box sx={{ display: 'flex', justifyContent: 'center', maxWidth: 450 }}>
                            <ImageUpload onImageDelete={handleImageDelete} onImageUpload={handleImageUpload} uploadedImages={images} key={"ProductImage"} />
                        </Box>
                    </Box>
                </Grid>
            </Grid>
        </Box>
    );
};
export default ProductBasicInfo;

================
File: src/pages/Products/ProductDialog/ProductDetails.jsx
================
import ModelManager from './ModelManager';
import PriceManager from './PriceManager';
import ProviderManager from './ProviderManager';
const ProductDetails = () => {
  return (
    <>
      <ModelManager></ModelManager>
      <PriceManager />
      <ProviderManager />
    </>
  );
};
export default ProductDetails;

================
File: src/pages/Products/ProductDialog/ProductDialog.jsx
================
import React from 'react';
import { Box, CircularProgress, Dialog, Slide } from "@mui/material";
import ProductDialogToolbar from './ProductDialogToolbar';
import { ProductDialogProvider, useProductDialogContext } from './ProductDialogContext';
import ProductFlow from './ProductFlow';
import { useProductsContext } from '../ProductsContext';
import ProductSummary from '../ProductSummary';
const Transition = React.forwardRef(function Transition(props, ref) {
    return <Slide direction="up" ref={ref} {...props} />;
});
const ProductDialogContent = () => {
    const { handleCloseDialog, selectedProduct, productType } = useProductsContext();
    const { isLoading, isEditable, product } = useProductDialogContext();
    return (
        <>
            <ProductDialogToolbar handleCloseDialog={handleCloseDialog} />
            {
                isLoading ? (
                    <Box
                        sx={{
                            display: 'flex',
                            justifyContent: 'center',
                            alignItems: 'center',
                            height: '100vh',
                        }}
                    >
                        <CircularProgress />
                    </Box>
                ) : (
                    <>
                        {selectedProduct && !isEditable && (
                            <ProductSummary product={product} productType={productType} />
                        )}
                        {
                            (!selectedProduct || (selectedProduct && isEditable)) && <ProductFlow />
                        }
                    </>
                )
            }
        </>
    );
};
const ProductDialog = () => {
    const { openDialog, handleCloseDialog } = useProductsContext();
    return (
        <ProductDialogProvider>
            <Dialog
                fullScreen
                open={openDialog}
                onClose={handleCloseDialog}
                aria-labelledby="dialog-title"
                TransitionComponent={Transition}
            >
                <ProductDialogContent />
            </Dialog>
        </ProductDialogProvider>
    );
};
export default ProductDialog;

================
File: src/pages/Products/ProductDialog/ProductDialogContext.jsx
================
import { createContext, useContext, useEffect, useState } from 'react';
import { useProductsContext } from '../ProductsContext';
import { getBase64ImgFromURL, getImageURLFromStorage, uploadImageToStorage } from '../../../services/Firebase/storage';
import { base64ToBlob, getMimeType, modifyAndClone } from '../../../util/generalUtils';
import File from '../../../models/File';
import { createProduct, getProductById, updateProduct } from '../../../services/ProductService';
import { useSnackbar } from '../../../components/SnackbarContext';
import Product from '../../../models/Product';
import { FileTypes, ProductTypes } from '../ProductsConstants';
import { v4 } from 'uuid';
const ProductDialogContext = createContext();
export const useProductDialogContext = () => useContext(ProductDialogContext);
export const ProductDialogProvider = ({ children }) => {
    const [activeStep, setActiveStep] = useState(0);
    const [isNextEnabled, setIsNextEnabled] = useState(false);
    const [product, setProduct] = useState(new Product({}));
    const { productType, handleCloseDialog, selectedProduct, handleOpenDialog, setSelectedProduct } = useProductsContext();
    const dependencies = [productType, product.carModels,
        product.prices, product.stockCount, product.comments, product.dpi];
    const [isLoading, setIsLoading] = useState(false);
    const [isEditable, setIsEditable] = useState(false);
    const { openSnackbar } = useSnackbar();
    useEffect(() => {
        const fetchData = async () => {
            if (selectedProduct) {
                setIsLoading(true);
                handleOpenDialog();
                let productFullInfo = await getProductById(selectedProduct.id);
                let imagePromises = productFullInfo.files.map(async (file) => {
                    let url = await getImageURLFromStorage(file.storagePath);
                    file.fileData = await getBase64ImgFromURL(url);
                    return file;
                });
                await Promise.all(imagePromises);
                setProduct(productFullInfo);
                setIsLoading(false);
            }
        };
        fetchData();
    }, [selectedProduct]);
    const resetState = () => {
        setSelectedProduct(null);
        setIsEditable(false);
        setActiveStep(0);
        setProduct(new Product({}));
    };
    const handleSetProduct = (newProduct) => {
        setProduct(new Product(newProduct));
    };
    const handleImageUpload = (file) => {
        const reader = new FileReader();
        reader.onloadend = () => {
            let orderId = product.files.length + 1;
            let newFile = new File({ fileData: reader.result, orderId, fileTypeId: FileTypes.PRODUCT_IMAGE });
            newFile = getFileInfo(newFile);
            setProduct(modifyAndClone(product, 'files', [...product.files, newFile]));
        };
        reader.readAsDataURL(file);
    };
    const handleImageDelete = (index) => {
        setProduct(modifyAndClone(product, 'files', product.files.filter((_, i) => i !== index)));
    };
    useEffect(() => {
        const formattedName = formatProductName(productType, product);
        setProduct({ ...product, name: formattedName });
    }, dependencies);
    const formatProductName = (productType, product) => {
        switch (productType) {
            case ProductTypes.RADIATOR:
                return `${product.dpi} ${product.carModels.map(cm => `${cm.carModel.name} (${cm.initialYear}-${cm.lastYear})`).join('-')} [${product.stockCount}]`;
            default:
                return product.name;
        }
    };
    const handleNext = () => {
        setActiveStep((prevActiveStep) => prevActiveStep + 1);
    };
    const handleBack = () => {
        setActiveStep((prevActiveStep) => Math.max(prevActiveStep - 1, 0));
    };
    const handleSubmit = async () => {
        try {
            setIsLoading(true);
            if (product.id) {
                console.log(product)
                const productToUpdate = {
                    ...product,
                    productTypeId: productType,
                    files: product.files.map(file => ({ ...file, fileData: null }))
                };
                product.files.forEach((file) => {
                    if (!file.id) {
                        uploadImageToStorage(base64ToBlob(file.fileData), file.storagePath);
                    }
                });
                await updateProduct(productToUpdate.id, productToUpdate);
            } else {
                const productToCreate = {
                    ...product,
                    productTypeId: productType,
                    files: product.files.map(file => ({ ...file, fileData: null }))
                };
                await createProduct(productToCreate);
                product.files.forEach((file) => {
                    uploadImageToStorage(base64ToBlob(file.fileData), file.storagePath);
                });
            }
            setIsLoading(false);
            handleCloseDialog();
            resetState();
            openSnackbar('Producto procesado correctamente', 'success');
        } catch (error) {
            setIsLoading(false);
            console.log(error)
            openSnackbar(`Error al procesar el producto: ${error.errorMessage}`, 'error');
        }
    }
    const getFileInfo = (file) => {
        let uuid = v4();
        let filename = `/products/images/${uuid}`;
        return {
            ...file,
            mimeType: getMimeType(file.fileData),
            name: uuid,
            storagePath: filename
        };
    }
    return (
        <ProductDialogContext.Provider value={{
            activeStep,
            isLoading,
            isNextEnabled,
            product,
            totalSteps: 3,
            isEditable,
            handleBack,
            handleImageDelete,
            handleImageUpload,
            handleNext,
            handleSetProduct,
            handleSubmit,
            resetState,
            setActiveStep,
            setIsNextEnabled,
            setIsEditable
        }}>
            {children}
        </ProductDialogContext.Provider>
    );
};

================
File: src/pages/Products/ProductDialog/ProductDialogToolbar.jsx
================
import { AppBar, Toolbar, IconButton, Typography, Button } from "@mui/material";
import CloseIcon from '@mui/icons-material/Close';
import EditIcon from '@mui/icons-material/Edit';
import { useProductDialogContext } from "./ProductDialogContext";
import { useProductsContext } from "../ProductsContext";
const ProductDialogToolbar = ({ handleCloseDialog }) => {
    const {
        activeStep,
        handleBack,
        handleNext,
        totalSteps,
        isNextEnabled,
        handleSubmit,
        resetState,
        isEditable,
        setIsEditable
    } = useProductDialogContext();
    const { selectedProduct } = useProductsContext();
    const renderEditButton = () => (
        <Button
            startIcon={<EditIcon />}
            autoFocus
            color="inherit"
            onClick={() => {
                setIsEditable(true);
            }}
        >
            Editar
        </Button>
    );
    const renderNavigationButtons = () => (
        <>
            {activeStep > 0 && (
                <Button color="inherit" onClick={handleBack}>
                    Atrás
                </Button>
            )}
            {activeStep < totalSteps - 1 ? (
                <Button autoFocus color="inherit" onClick={handleNext} disabled={!isNextEnabled}>
                    Siguiente
                </Button>
            ) : (
                <Button autoFocus color="inherit" disabled={!isNextEnabled} onClick={handleSubmit}>
                    Guardar
                </Button>
            )}
        </>
    );
    return (
        <AppBar sx={{ position: 'relative' }}>
            <Toolbar>
                <IconButton
                    edge="start"
                    color="inherit"
                    onClick={() => {
                        handleCloseDialog();
                        resetState();
                    }}
                    aria-label="close"
                >
                    <CloseIcon />
                </IconButton>
                <Typography sx={{ ml: 2, flex: 1 }} variant="h6" component="div">
                    {selectedProduct ? (isEditable ? "Editar Producto" : "Detalles del Producto") : "Agregar Producto"}
                </Typography>
                {!selectedProduct ? renderNavigationButtons() :
                 (selectedProduct && !isEditable) ? renderEditButton() :
                 renderNavigationButtons()}
            </Toolbar>
        </AppBar>
    );
};
export default ProductDialogToolbar;

================
File: src/pages/Products/ProductDialog/ProductFlow.jsx
================
import { ProductTypes } from "../ProductsConstants";
import { useProductsContext } from "../ProductsContext";
import RadiatorFlow from "./RadiatorFlow";
const ProductFlow = () => {
    const { productType } = useProductsContext();
    return (
        <div>
            {productType === ProductTypes.RADIATOR && <RadiatorFlow />}
        </div>
    );
}
export default ProductFlow;

================
File: src/pages/Products/ProductDialog/ProviderManager.jsx
================
import { useState, useEffect } from 'react';
import {
  Button, Table, TableBody, TableCell, TableHead, TableRow, TextField, IconButton, Typography, Grid,
  Modal, Box, Card, CardContent
} from '@mui/material';
import DeleteIcon from '@mui/icons-material/Delete';
import ExpandableCard from '../../../components/ExpandableCard';
import CustomSelectWithAdd from '../../../components/CustomSelectWithAdd';
import { useProductDialogContext } from './ProductDialogContext';
import { getAll, createProvider } from '../../../services/ProviderService';
import { useSnackbar } from '../../../components/SnackbarContext';
import { modifyAndClone } from '../../../util/generalUtils';
import Provider from '../../../models/Provider';
const ProviderDetailModal = ({ open, onClose, provider }) => (
  <Modal
    open={open}
    onClose={onClose}
    aria-labelledby="modal-modal-title"
    aria-describedby="modal-modal-description"
  >
    <Box sx={{
      position: 'absolute',
      top: '50%',
      left: '50%',
      transform: 'translate(-50%, -50%)',
      width: 400,
      p: 4,
    }}>
      <Card>
        <CardContent>
          <Typography variant="h5" component="div" sx={{ marginBottom: 2 }}>
            Detalles del Proveedor
          </Typography>
          <Typography variant="body2" color="text.secondary" gutterBottom>
            <strong>Nombre:</strong> {provider?.name}
          </Typography>
          <Typography variant="body2" color="text.secondary" gutterBottom>
            <strong>Teléfono:</strong> {provider?.phoneNumber}
          </Typography>
          <Typography variant="body2" color="text.secondary" gutterBottom>
            <strong>Dirección:</strong> {provider?.address}
          </Typography>
          <Typography variant="body2" color="text.secondary" gutterBottom>
            <strong>Comentarios:</strong> {provider?.comments}
          </Typography>
          <Button variant="contained" onClick={onClose} style={{ marginTop: 2 }}>Cerrar</Button>
        </CardContent>
      </Card>
    </Box>
  </Modal>
);
const ProviderManagerDisplay = ({
  product,
  providers,
  selectedProvider,
  price,
  handleProviderChange,
  handlePriceChange,
  handleAddProvider,
  handleDeleteProvider,
  handleOnProviderAdded,
  handleProviderClick,
  editable
}) => (
  <ExpandableCard title="Proveedores">
    <Typography gutterBottom variant="body2" component="p" sx={{ mb: 2 }}>
      {editable ? 'Añade y gestiona los proveedores del producto.' : ''}
    </Typography>
    {editable && (
      <>
        <Grid container spacing={2} sx={{ mb: 2 }}>
          <Grid item xs={12} sm={6}>
            <CustomSelectWithAdd
              elements={providers}
              label="Proveedor"
              selectedItem={selectedProvider}
              setSelectedItem={handleProviderChange}
              onItemAdded={handleOnProviderAdded}
              dialogFields={[
                { name: 'name', label: 'Nombre del Proveedor', type: 'text', required: true },
                { name: 'phoneNumber', label: 'Número de Teléfono', type: 'tel' },
                { name: 'address', label: 'Dirección', type: 'text' },
                { name: 'comments', label: 'Comentarios', type: 'text' },
              ]}
            />
          </Grid>
          <Grid item xs={12} sm={6}>
            <TextField
              label="Precio de Compra"
              type="number"
              value={price}
              onChange={handlePriceChange}
              fullWidth
            />
          </Grid>
        </Grid>
        <Button onClick={handleAddProvider} variant="contained" sx={{ mt: 2 }} disabled={!selectedProvider || !price}>
          Agregar Proveedor
        </Button>
      </>
    )}
    <Table size="small" sx={{ mt: 4 }}>
      <TableHead>
        <TableRow>
          <TableCell>Proveedor</TableCell>
          <TableCell align="right">Precio de Compra</TableCell>
          {editable && <TableCell align="right">Acciones</TableCell>}
        </TableRow>
      </TableHead>
      <TableBody>
        {product.providers && product.providers.map((providerProduct, index) => (
          <TableRow
            key={index}
            onClick={() => handleProviderClick(providerProduct.provider)}
            sx={{ cursor: 'pointer', '&:hover': { backgroundColor: 'rgba(0, 0, 0, 0.04)' } }}
          >
            <TableCell>{providerProduct.provider.name}</TableCell>
            <TableCell align="right">{providerProduct.price.cost}</TableCell>
            {editable && (
              <TableCell align="right">
                <IconButton
                  onClick={(e) => {
                    e.stopPropagation();
                    handleDeleteProvider(index);
                  }}
                  aria-label="delete"
                >
                  <DeleteIcon />
                </IconButton>
              </TableCell>
            )}
          </TableRow>
        ))}
      </TableBody>
    </Table>
  </ExpandableCard>
);
const ProviderManager = ({ editable = true }) => {
  const [providers, setProviders] = useState([]);
  const [selectedProvider, setSelectedProvider] = useState(null);
  const [price, setPrice] = useState('');
  const [modalOpen, setModalOpen] = useState(false);
  const [selectedModalProvider, setSelectedModalProvider] = useState(null);
  const { openSnackbar } = useSnackbar();
  const { product, handleSetProduct } = useProductDialogContext();
  useEffect(() => {
    const fetchProviders = async () => {
      try {
        const response = await getAll();
        if (response && response.providers) {
          setProviders(response.providers);
        }
      } catch (error) {
        openSnackbar(`Error al obtener los proveedores: ${error.message}`, 'error');
      }
    };
    fetchProviders();
  }, []);
  const handleProviderChange = (provider) => {
    setSelectedProvider(provider);
  };
  const handlePriceChange = (event) => {
    setPrice(event.target.value);
  };
  const handleAddProvider = () => {
    if (selectedProvider && price) {
      const newProviderProduct = {
        providerId: selectedProvider.id,
        provider: selectedProvider,
        price: {
          cost: parseFloat(price),
          description: `Precio de compra de ${selectedProvider.name}`
        }
      };
      handleSetProduct(modifyAndClone(product, 'providers', [...(product.providers || []), newProviderProduct]));
      setSelectedProvider(null);
      setPrice('');
    }
  };
  const handleDeleteProvider = (index) => {
    const newProviders = product.providers.filter((_, i) => i !== index);
    handleSetProduct(modifyAndClone(product, 'providers', newProviders));
  };
  const handleOnProviderAdded = async (providers, newProviderData) => {
    try {
      const newProvider = await createProvider(new Provider(newProviderData));
      setProviders([...providers, newProvider]);
      return newProvider.id;
    } catch (error) {
      openSnackbar(`Error al crear el proveedor: ${error.message}`, 'error');
    }
  };
  const handleProviderClick = (provider) => {
    setSelectedModalProvider(provider);
    setModalOpen(true);
  };
  return (
    <>
      <ProviderManagerDisplay
        product={product}
        providers={providers}
        selectedProvider={selectedProvider}
        price={price}
        handleProviderChange={handleProviderChange}
        handlePriceChange={handlePriceChange}
        handleAddProvider={handleAddProvider}
        handleDeleteProvider={handleDeleteProvider}
        handleOnProviderAdded={handleOnProviderAdded}
        handleProviderClick={handleProviderClick}
        editable={editable}
      />
      <ProviderDetailModal
        open={modalOpen}
        onClose={() => setModalOpen(false)}
        provider={selectedModalProvider}
      />
    </>
  );
};
export { ProviderManager as default, ProviderManagerDisplay };

================
File: src/pages/Products/ProductDialog/RadiatorFlow.jsx
================
import { useProductDialogContext } from './ProductDialogContext';
import RadiatorForm from '../Forms/RadiatorForm';
import ProductBasicInfo from './ProductBasicInfo';
import ProductDetails from './ProductDetails';
import ProductSummary from '../ProductSummary';
import { ProductTypes } from '../ProductsConstants';
const RadiatorFlow = () => {
    const { activeStep, product } = useProductDialogContext();
    let ComponentToRender = null;
    switch (activeStep) {
        case 0:
            ComponentToRender = <ProductBasicInfo ProductForm={RadiatorForm}/>;
            break;
        case 1:
            ComponentToRender = <ProductDetails/>;
            break;
        default:
            ComponentToRender = <ProductSummary productType={ProductTypes.RADIATOR} product={product} readOnly/>;
            break;
    }
    return (
        <div>
            {ComponentToRender}
        </div>
    );
};
export default RadiatorFlow;

================
File: src/pages/Products/ProductSelector.jsx
================
import Box from '@mui/material/Box';
import CircularProgress from '@mui/material/CircularProgress';
import BrandContainer from './BrandViewer/BrandContainer';
import ProductSelectorNav from './ProductSelectorNav';
import CustomSearchBar from '../../components/CustomSearchBar';
import { useProductsContext } from './ProductsContext';
import { Screens } from './ProductsConstants';
import ProductContainer from './ProductViewer/ProductContainer';
import CarModelListContainer from './ModelViewer/CarModelContainer';
const ProductSelector = () => {
    const { currentScreen, loading } = useProductsContext();
    return (
        <>
            <ProductSelectorNav />
            <CustomSearchBar />
            <Box sx={{ height: 'calc(100vh - 320px)', overflowY: 'auto' }}>
                {currentScreen === Screens.BRANDS && <BrandContainer />}
                {currentScreen === Screens.MODELS && <CarModelListContainer />}
                {currentScreen === Screens.PRODUCTS && <ProductContainer />}
                {loading && (
                    <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: '200px' }}>
                        <CircularProgress size={40} />
                    </div>
                )}
            </Box>
        </>
    );
};
export default ProductSelector;

================
File: src/pages/Products/ProductSelectorNav.jsx
================
import Breadcrumbs from '@mui/material/Breadcrumbs';
import Link from '@mui/material/Link';
import Typography from '@mui/material/Typography';
import NavigateNextIcon from '@mui/icons-material/NavigateNext';
import { useProductsContext } from './ProductsContext';
import { ProductTypes } from './ProductsConstants';
const ProductSelectorNav = () => {
  const { selectedBrand, selectedCarModel, productType, navigateBack, } = useProductsContext();
  const handleBackToBrands = () => {
    navigateBack();
  }
  const handleBackToCarModels = () => {
    navigateBack();
  }
  const productVerbiage = productType === ProductTypes.CAP ? 'Tapas' : productType === ProductTypes.FAN ? 'Abanicos' : 'Radiadores';
  return (
    <Breadcrumbs separator={<NavigateNextIcon fontSize="small" />} aria-label="breadcrumb">
      {selectedBrand ? (
        <Link component="button" onClick={handleBackToBrands} color="inherit">
          Marcas
        </Link>
      ) : (
        <Typography color="text.primary">Marcas</Typography>
      )}
      {selectedCarModel ? (
        <Link component="button" onClick={handleBackToCarModels} color="inherit">
          Modelos
        </Link>
      ) : selectedBrand ? (
        <Typography color="text.primary">Modelos</Typography>
      ) : (
        <Typography color="text.disabled">Modelos</Typography>
      )}
      {selectedBrand && selectedCarModel ? (
        <Typography color="text.primary">{productVerbiage}</Typography>
      ) : (
        <Typography color="text.disabled">{productVerbiage}</Typography>
      )}
    </Breadcrumbs>
  );
};
export default ProductSelectorNav;

================
File: src/pages/Products/ProductSummary.jsx
================
import { Box, TextField, Grid } from '@mui/material';
import { RadiatorFormDisplay } from "./Forms/RadiatorForm";
import { ModelManagerDisplay } from "./ProductDialog/ModelManager";
import { PriceManagerDisplay } from "./ProductDialog/PriceManager";
import ImageUpload from './ProductDialog/ImageUpload';
import { ProductTypes } from './ProductsConstants';
import ProviderManager from './ProductDialog/ProviderManager';
const ProductSummary = ({ productType, product }) => {
    let images = product.files.map(file => file.fileData);
    return (
        <div>
            <Box sx={{ paddingY: 2 }}>
                <Grid container spacing={2}>
                    <Grid item xs={12} md={7}>
                        <Box sx={{ paddingX: 5 }}>
                            <TextField
                                label="Nombre del Producto"
                                variant="outlined"
                                fullWidth
                                value={product.name || ''}
                                InputProps={{
                                    readOnly: true,
                                }}
                                sx={{ marginTop: 2 }}
                            />
                            {productType === ProductTypes.RADIATOR && (
                                <RadiatorFormDisplay product={product} readOnly={true} />
                            )}
                        </Box>
                    </Grid>
                    <Grid item xs={12} md={5} sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
                        <Box sx={{ display: 'flex', justifyContent: 'center', maxWidth: 450 }}>
                            <ImageUpload uploadedImages={images} readOnly />
                        </Box>
                    </Grid>
                </Grid>
                {}
                <Grid container spacing={2}>
                    <Grid item xs={12}>
                        <ModelManagerDisplay product={product} readOnly={true} />
                    </Grid>
                    <Grid item xs={12}>
                        <PriceManagerDisplay product={product} readOnly={true} />
                    </Grid>
                    <Grid item xs={12}>
                        <ProviderManager product={product} editable={false} />
                    </Grid>
                </Grid>
            </Box>
        </div>
    );
};
export default ProductSummary;

================
File: src/pages/Products/ProductTypeTabs.jsx
================
import { Tab, Tabs } from "@mui/material"
import { useProductsContext } from "./ProductsContext";
import { useMobile } from "../../components/MobileProvider";
import { ProductTypes } from "./ProductsConstants";
export const ProductTypeTabs = () => {
    const { productType, handleChangeProductType } = useProductsContext();
    const responsive = useMobile();
    const handleChange = (event, newValue) => {
        handleChangeProductType(newValue);
    };
    return <Tabs
        value={productType}
        onChange={handleChange}
        variant="scrollable"
        scrollButtons="auto"
        aria-label="product tabs"
        sx={{ width: responsive.isMobile ? '85vw' : '100%' }}
    >
        <Tab value={ProductTypes.RADIATOR} label="Radiadores" />
        <Tab value={ProductTypes.CAP} label="Tapas" />
        <Tab value={ProductTypes.FAN} label="Abanicos" />
    </Tabs>
}

================
File: src/pages/Products/ProductViewer/ProductContainer.jsx
================
import { useEffect, useState } from 'react';
import { getImageURLFromStorage } from '../../../services/Firebase/storage';
import { CSSTransition } from 'react-transition-group';
import '../../../styles/brandContainer.css';
import { useSnackbar } from '../../../components/SnackbarContext';
import { getAllCarModelsProducts, getCarModelProducts } from '../../../services/CarModelService';
import { useProductsContext } from '../ProductsContext';
import { Screens } from '../ProductsConstants';
import ProductList from './ProductList';
import { ProductCarModel } from '../../../models/ProductCarModel';
import { deleteProduct } from '../../../services/ProductService';
const ProductContainer = () => {
  const [productCarModels, setProductCarModels] = useState([]);
  const { openSnackbar } = useSnackbar();
  const { handleItemSelect, searchTerm, setLoading, selectedCarModel, productType } = useProductsContext();
  const handleProductSelect = (e, item) => {
    const productCarModel = productCarModels.find(productCarModel => productCarModel.product.id === item.id);
    handleItemSelect(productCarModel.product, Screens.PRODUCTS);
  }
  const handleOnDelete = async (productCarModel) => {
    try {
      console.log(productCarModel)
      let result = await deleteProduct(productCarModel.id);
      if (result) {
        const products = productCarModels.filter(pcm => pcm.product.id !== productCarModel.id);
        setProductCarModels(products);
        openSnackbar('Producto eliminado correctamente', 'success');
      } else {
        openSnackbar('Error al eliminar el producto', 'error');
      }
    } catch (error) {
      openSnackbar(`Error al eliminar el producto: ${error.errorMessage}`, 'error');
    }
  }
  useEffect(() => {
    setLoading(true);
    const fetchProducts = async () => {
      try {
        setProductCarModels([]);
        let response = null;
        let productCarModelsData = [];
        if (selectedCarModel && selectedCarModel.id) {
          response = await getCarModelProducts(selectedCarModel.id, productType, searchTerm);
          productCarModelsData = response.data;
        } else {
          response = await getAllCarModelsProducts(productType,searchTerm);
          productCarModelsData = response.data;
        }
        productCarModelsData = productCarModelsData.map(productCarModel => new ProductCarModel(productCarModel));
        const productsWithImages = await Promise.all(productCarModelsData.map(async (productCarModel) => {
          let file = productCarModel.product.files.find(file => file.orderId == 1);
          if (file) {
            const imageUrl = await getImageURLFromStorage(file.storagePath).catch(error => {
              console.error("Error al obtener url imagen de storage para producto:", productCarModel.product.name, error);
              return '';
            });
            return { ...productCarModel, imageUrl };
          } else {
            return productCarModel;
          }
        }));
        setProductCarModels(productsWithImages);
        setLoading(false);
      } catch (error) {
        console.error("Error al obtener los radiadores:", error);
        setLoading(false);
        openSnackbar(`Error al cargar los radiadores!: ${error.errorMessage}`, 'error')
      }
    }
    fetchProducts();
  }, [searchTerm, setLoading]);
  return (
    <CSSTransition
      in={productCarModels.length > 0}
      timeout={300}
      classNames="fade"
      unmountOnExit
    >
      <div>
        <ProductList products={productCarModels} onProductSelect={handleProductSelect} handleOnDelete={handleOnDelete}/>
      </div>
    </CSSTransition>
  );
};
export default ProductContainer;

================
File: src/pages/Products/ProductViewer/ProductList.jsx
================
import ItemsCardList from "../../../components/ItemCardList";
const columns = [
  { field: 'dpi', headerName: 'DPI', showLabel: false, valueStyle: { fontWeight: 'bold', fontSize: '16px'} },
  { field: 'name', headerName: 'Nombre', showLabel: false, valueStyle: { fontSize: '16px' } }
];
const ProductList = ({ products, onProductSelect, handleOnDelete }) => {
  return (
    <div>
      <ItemsCardList rows={products.map(productCarModel => ({
        id: productCarModel.product.id,
        dpi: productCarModel.productdpi,
        name: productCarModel.product.name,
        imageUrl: productCarModel.imageUrl
      }))} columns={columns} itemCardProps={{onClick: onProductSelect, menuOptions: [
        {
          label: 'Eliminar',
          onClick: handleOnDelete
        }
      ]}} />
    </div>
  );
};
export default ProductList;

================
File: src/pages/Products/ProductsConstants.js
================
export const ProductTypes = {
    RADIATOR: 1,
    CAP: 2,
    FAN: 3
}
export const Screens = {
    BRANDS: 1,
    MODELS: 2,
    PRODUCTS: 3
};
export const SearchOptions = {
    BRANDS: 1,
    MODELS: 2,
    PRODUCTS: 3
};
export const FileTypes = {
    PRODUCT_IMAGE: 2,
    BRAND_IMAGE: 1,
};

================
File: src/pages/Products/ProductsContext.jsx
================
import { createContext, useContext, useState, useEffect, useCallback } from 'react';
import { ProductTypes, Screens, SearchOptions } from './ProductsConstants';
const ProductsContext = createContext();
export const useProductsContext = () => {
  const context = useContext(ProductsContext);
  if (context === undefined) {
    throw new Error('useProductsContext must be used within a ProductsProvider');
  }
  return context;
};
export const ProductsProvider = ({ children }) => {
  const [productType, setProductType] = useState(ProductTypes.RADIATOR);
  const [currentScreen, setCurrentScreen] = useState(Screens.BRANDS);
  const [openDialog, setOpenDialog] = useState(false);
  const [selectedProduct, setSelectedProduct] = useState(null);
  const [selectedBrand, setSelectedBrand] = useState(null);
  const [selectedCarModel, setSelectedCarModel] = useState(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [searchOption, setSearchOption] = useState(SearchOptions.BRANDS);
  const [loading, setLoading] = useState(false);
  const [scrollPosition, setScrollPosition] = useState(0);
  const navigateBack = useCallback(() => {
    if (openDialog) {
      setOpenDialog(false);
      return;
    }
    switch (currentScreen) {
      case Screens.PRODUCTS:
        setCurrentScreen(Screens.MODELS);
        setSelectedCarModel(null);
        break;
      case Screens.MODELS:
        setCurrentScreen(Screens.BRANDS);
        setSelectedBrand(null);
        break;
      case Screens.BRANDS:
        // Comportamiento predeterminado: salir de la aplicación
        if (window.history.length > 1) {
          window.history.back();
        }
        break;
      default:
        break;
    }
  }, [currentScreen, openDialog]);
  useEffect(() => {
    const handlePopState = (event) => {
      event.preventDefault();
      navigateBack();
    };
    window.addEventListener('popstate', handlePopState);
    return () => {
      window.removeEventListener('popstate', handlePopState);
    };
  }, [navigateBack]);
  const pushState = useCallback(() => {
    window.history.pushState(null, '', window.location.pathname);
  }, []);
  const handleItemSelect = (item, type) => {
    pushState();
    switch (type) {
      case Screens.BRANDS:
        setSelectedBrand(item);
        setSearchOption(SearchOptions.MODELS);
        setCurrentScreen(Screens.MODELS);
        break;
      case Screens.MODELS:
        setSelectedCarModel(item);
        setSearchOption(SearchOptions.PRODUCTS);
        setCurrentScreen(Screens.PRODUCTS);
        break;
      case Screens.PRODUCTS:
        setSelectedProduct(item);
        setScrollPosition(window.pageYOffset);
        break;
      default:
        console.log('Tipo de selección no reconocido:', type);
    }
  };
  const handleOpenDialog = () => {
    pushState();
    setOpenDialog(true);
  };
  const handleCloseDialog = () => {
    navigateBack();
  };
  const handleChangeProductType = (newValue) => {
    setProductType(newValue);
  };
  const handleSearchOptionChange = (value) => {
    setSearchTerm('');
    setSearchOption(value);
    if (value === SearchOptions.BRANDS) {
      setCurrentScreen(Screens.BRANDS);
    } else if (value === SearchOptions.MODELS) {
      setCurrentScreen(Screens.MODELS);
    } else {
      setCurrentScreen(Screens.PRODUCTS);
    }
  };
  const value = {
    productType,
    currentScreen,
    openDialog,
    selectedProduct,
    selectedBrand,
    selectedCarModel,
    searchTerm,
    searchOption,
    loading,
    scrollPosition,
    setProductType,
    setCurrentScreen,
    setOpenDialog,
    setSelectedProduct,
    setSelectedBrand,
    setSelectedCarModel,
    setSearchTerm,
    setSearchOption,
    setLoading,
    setScrollPosition,
    handleItemSelect,
    handleOpenDialog,
    handleCloseDialog,
    handleChangeProductType,
    handleSearchOptionChange,
    navigateBack,
    pushState
  };
  return (
    <ProductsContext.Provider value={value}>
      {children}
    </ProductsContext.Provider>
  );
};

================
File: src/pages/Products/ProductsPage.jsx
================
import { Box, Fab } from "@mui/material";
import ProductSelector from "./ProductSelector";
import ProductDialog from "./ProductDialog/ProductDialog";
import AddIcon from "@mui/icons-material/Add";
import { ProductsProvider, useProductsContext } from "./ProductsContext";
import { ProductTypeTabs } from "./ProductTypeTabs";
function ProductsPresentation() {
  const { handleOpenDialog } = useProductsContext();
  return (
    <Box sx={{ width: '100%', '& > *:not(style)': { mb: 3 } }}>
      <ProductTypeTabs />
      <ProductSelector />
      <Fab
        color="primary"
        aria-label="add"
        sx={{ position: 'absolute', bottom: 16, right: 16 }}
        onClick={handleOpenDialog}
      >
        <AddIcon />
      </Fab>
      <ProductDialog />
    </Box>
  );
}
export default function ProductsPage() {
  return (
    <ProductsProvider>
      <ProductsPresentation />
    </ProductsProvider>
  )
}

================
File: src/pages/Providers/ProviderDialog.jsx
================
import { useState, forwardRef } from 'react';
import { Dialog, Button, AppBar, Toolbar, IconButton, Typography, Slide } from "@mui/material";
import CloseIcon from '@mui/icons-material/Close';
import ProviderForm from './ProviderForm';
const Transition = forwardRef(function Transition(props, ref) {
    return <Slide direction="up" ref={ref} {...props} />;
});
const ProviderDialog = ({ open, onClose, addProviderToList, updateProviderInfo, providerId }) => {
    const [formCompleted, setFormCompleted] = useState(false);
    const [formData, setFormData] = useState({});
    const handleSave = async (formData) => {
        try {
            if (providerId) {
                await updateProviderInfo(providerId, formData);
            } else {
                await addProviderToList(formData);
            }
        } catch (error) {
            console.error("Error al guardar proveedor:", error);
        }
    };
    return (
        <Dialog
            fullScreen
            open={open}
            onClose={onClose}
            aria-labelledby="dialog-title"
            TransitionComponent={Transition}
        >
            <AppBar sx={{ position: 'relative' }}>
                <Toolbar>
                    <IconButton
                        edge="start"
                        color="inherit"
                        onClick={onClose}
                        aria-label="close"
                    >
                        <CloseIcon />
                    </IconButton>
                    <Typography sx={{ ml: 2, flex: 1 }} variant="h6" component="div">
                        Agregar Proveedor
                    </Typography>
                    <Button autoFocus color="inherit" onClick={() => handleSave(formData)} disabled={!formCompleted}>
                        Guardar
                    </Button>
                </Toolbar>
            </AppBar>
            <ProviderForm setFormCompleted={setFormCompleted} setFormData={setFormData} providerId={providerId}/>
        </Dialog>
    );
};
export default ProviderDialog;

================
File: src/pages/Providers/ProviderForm.jsx
================
import { useState, useEffect } from 'react';
import { FormControl, TextField, Box, Typography, Alert } from '@mui/material';
import { getProvider } from '../../services/ProviderService';
const ProviderForm = ({ setFormCompleted, setFormData, providerId }) => {
    const [phoneNumber, setPhoneNumber] = useState('');
    const [name, setName] = useState('');
    const [address, setAddress] = useState('');
    const [comments, setComments] = useState('');
    const [error, setError] = useState({
        name: false,
        phoneNumber: false,
    });
    useEffect(() => {
        // Verificar si los campos requeridos están completos
        setFormCompleted(name.trim() !== '' && phoneNumber.trim() !== '');
    }, [name, phoneNumber, setFormCompleted]);
    const handlePhoneNumberChange = (event) => {
        const inputValue = event.target.value;
        if (/^\d*$/.test(inputValue)) {
            setPhoneNumber(inputValue);
        }
    };
    const handleBlur = (field) => {
        switch (field) {
            case 'nombre':
                setError((prevError) => ({ ...prevError, name: name.trim() === '' }));
                break;
            case 'telefono':
                setError((prevError) => ({ ...prevError, phoneNumber: phoneNumber.trim() === '' }));
                break;
            default:
                break;
        }
    };
    useEffect(() => {
        if (providerId !== null && typeof providerId === 'number') {
            try {
                const fetchProvider = async () => {
                    const provider = await getProvider(providerId);
                    if (provider) {
                        setName(provider.name);
                        setPhoneNumber(provider.phoneNumber);
                        setAddress(provider.address);
                        setComments(provider.comments);
                    }
                };
                fetchProvider();
            } catch (error) {
                console.log("Hubo un error:", error);
            }
        }
    }, [providerId]);
    useEffect(() => {
        setFormData({
            name: name,
            phoneNumber: phoneNumber,
            address: address,
            comments: comments
        });
    }, [name, phoneNumber, address, comments, setFormData]);
    return (
        <FormControl sx={{ mt: 2, textAlign: 'center', marginLeft: 10, marginRight: 10 }}>
            <Box sx={{ mb: 2 }}>
                <Typography variant="h6" gutterBottom>
                    Información del Proveedor
                </Typography>
            </Box>
            <TextField
                required
                label="Nombre"
                variant="outlined"
                fullWidth
                value={name}
                onChange={(e) => setName(e.target.value)}
                onBlur={() => handleBlur('nombre')}
                sx={{ mb: 2 }}
            />
            {error.name && <Alert severity="error">Por favor ingrese el nombre</Alert>}
            <TextField
                required
                label="Número Telefónico"
                variant="outlined"
                fullWidth
                value={phoneNumber}
                onChange={handlePhoneNumberChange}
                onBlur={() => handleBlur('telefono')}
                inputProps={{
                    maxLength: 10,
                    inputMode: 'numeric',
                }}
                sx={{ mb: 2 }}
            />
            {error.telefono && <Alert severity="error">Por favor ingrese el número de teléfono</Alert>}
            <TextField
                label="Dirección"
                variant="outlined"
                fullWidth
                value={address}
                onChange={(e) => setAddress(e.target.value)}
                onBlur={() => handleBlur('direccion')}
                sx={{ mb: 2 }}
            />
            <TextField
                label="Comentarios"
                multiline
                rows={4}
                value={comments}
                onChange={(e) => setComments(e.target.value)}
                variant="outlined"
                fullWidth
                sx={{ mb: 2 }}
            />
        </FormControl>
    );
};
export default ProviderForm;

================
File: src/pages/Providers/ProviderPage.jsx
================
import { useState, useEffect } from 'react';
import {
    Tooltip, Fab, Box, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Button, Modal, Card, CardContent, Typography, IconButton
} from "@mui/material";
import AddIcon from "@mui/icons-material/Add";
import DeleteIcon from '@mui/icons-material/Delete';
import EditIcon from '@mui/icons-material/Edit';
import PreviewIcon from '@mui/icons-material/Preview';
import CustomInput from "../../components/CustomInput";
import ProviderDialog from "./ProviderDialog";
import { useMobile } from "../../components/MobileProvider";
import { getAll, deleteProvider, createProvider, updateProvider } from '../../services/ProviderService';
import TablePagination from '@mui/material/TablePagination';
import { useSnackbar } from '../../components/SnackbarContext';
const CustomSearchBar = ({ searchTerm, handleSearchChange }) => {
    return (
        <div style={{ display: 'flex', alignItems: 'center', marginTop: '10px', marginBottom: '10px' }}>
            <div style={{ flex: 1 }}>
                <CustomInput
                    placeholder={'Buscar Proveedor'}
                    value={searchTerm}
                    onChange={handleSearchChange}
                />
            </div>
        </div>
    );
};
export default function ProvidersPage() {
    const [page, setPage] = useState(0);
    const [rowsPerPage, setRowsPerPage] = useState(6);
    const [totalCount, setTotalCount] = useState(0);
    const [openDialog, setOpenDialog] = useState(false);
    const [selectedRowIndex, setSelectedRowIndex] = useState(null);
    const [openCommentsModal, setOpenCommentsModal] = useState(false);
    const [searchTerm, setSearchTerm] = useState('');
    const [rows, setRows] = useState([]);
    const [providerId, setProviderId] = useState(null);
    const responsive = useMobile();
    const { openSnackbar } = useSnackbar(); // Usa el hook de Snackbar
    useEffect(() => {
        getProviders();
    }, [page, rowsPerPage]); // Run effect whenever page or rowsPerPage change
    const handleOpenDialog = (e, id) => {
        if (id) {
            setProviderId(id);
        } else {
            setProviderId(null);
        }
        setOpenDialog(true);
    };
    const handleCloseDialog = () => {
        setOpenDialog(false);
    };
    const handleOpenCommentsModal = (index) => {
        setSelectedRowIndex(index);
        setOpenCommentsModal(true);
    };
    const handleCloseCommentsModal = () => {
        setOpenCommentsModal(false);
    };
    const getProviders = async () => {
        try {
            const response = await getAll(page + 1, rowsPerPage);
            if (response) {
                setRows(response.providers);
                setTotalCount(response.totalCount);
            } else {
                openSnackbar('¡Error en el Servicio! Por favor, inténtalo de nuevo más tarde.', 'error');
            }
        } catch (error) {
            console.error(error);
            openSnackbar('¡Error cargando proveedores!', 'error');
        }
    };
    const updateProviderInfo = async (providerId, updatedData) => {
        try {
            const updated = await updateProvider(providerId, updatedData);
            if (updated) {
                getProviders();
                handleCloseDialog();
                openSnackbar('¡Proveedor actualizado con éxito!', 'info');
            } else {
                openSnackbar('¡Error al actualizar proveedor! Por favor, inténtalo de nuevo más tarde.', 'error');
            }
        } catch (error) {
            openSnackbar('¡Error al actualizar proveedor!', 'error');
        }
    };
    const handleDeleteProvider = async (id) => {
        try {
            const provider = await deleteProvider(id);
            if (provider) {
                getProviders();
                openSnackbar('¡Proveedor eliminado con éxito!', 'info');
            } else {
                openSnackbar('¡Error al eliminar proveedor! Por favor, inténtalo de nuevo más tarde.', 'error');
            }
        } catch (error) {
            openSnackbar('¡Error al eliminar proveedor!', 'error');
        }
    };
    const addProviderToList = async (newProvider) => {
        try {
            await createProvider(newProvider);
            getProviders();
            handleCloseDialog();
            openSnackbar('¡Proveedor agregado con éxito!', 'success');
        } catch (error) {
            console.error(error);
            openSnackbar('¡Error al agregar proveedor!', 'error');
        }
    };
    const handleSearchChange = (e) => {
        setSearchTerm(e.target.value);
        setPage(0);
    };
    return (
        <Box sx={{ width: '100%', '& > *:not(style)': { mb: 3 } }}>
            <CustomSearchBar searchTerm={searchTerm} handleSearchChange={handleSearchChange} />
            <Box sx={{ height: 'calc(100% - 56px)', overflow: 'auto' }}>
                <TableContainer component={Paper}>
                    <Table >
                        <TableHead>
                            <TableRow sx={{ backgroundColor: '#f0f0f0' }}>
                                <TableCell sx={{ fontWeight: 'bold' }}>Nombre</TableCell>
                                {responsive.isMobile && (
                                    <TableCell sx={{ fontWeight: 'bold' }}>Acciones</TableCell>
                                )}
                                {!responsive.isMobile && (
                                    <>
                                        <TableCell sx={{ fontWeight: 'bold' }}>Teléfono</TableCell>
                                        <TableCell sx={{ fontWeight: 'bold' }}>Dirección</TableCell>
                                        <TableCell sx={{ fontWeight: 'bold' }}>Acciones</TableCell>
                                    </>
                                )}
                            </TableRow>
                        </TableHead>
                        <TableBody>
                            {rows.filter(row => row.name.toLowerCase().includes(searchTerm.toLowerCase())).map((row, index) => (
                                <TableRow key={row.name} >
                                    <TableCell component="th" scope="row">
                                        {row.name}
                                    </TableCell>
                                    {responsive.isMobile && (
                                        <TableCell sx={{ display: "flex", gap: "10px" }}>
                                            <Tooltip title="Comentarios">
                                                <IconButton onClick={() => handleOpenCommentsModal(index)} color='info'>
                                                    <PreviewIcon />
                                                </IconButton>
                                            </Tooltip>
                                            <Tooltip title="Editar">
                                                <IconButton color='info' onClick={() => handleOpenDialog(row.id)}>
                                                    <EditIcon />
                                                </IconButton>
                                            </Tooltip>
                                            <Tooltip title="Eliminar">
                                                <IconButton aria-label="delete" color="error" onClick={() => handleDeleteProvider(row.id)}>
                                                    <DeleteIcon />
                                                </IconButton>
                                            </Tooltip>
                                        </TableCell>
                                    )}
                                    {!responsive.isMobile && (
                                        <>
                                            <TableCell>{row.phoneNumber}</TableCell>
                                            <TableCell>{row.address}</TableCell>
                                            <TableCell sx={{ display: "flex", gap: "10px" }}>
                                                <Tooltip title="Comentarios">
                                                    <IconButton variant="outlined" onClick={() => handleOpenCommentsModal(index)}>
                                                        <PreviewIcon />
                                                    </IconButton>
                                                </Tooltip>
                                                <Tooltip title="Editar">
                                                    <IconButton color='info' onClick={(e) => handleOpenDialog(e, row.id)}>
                                                        <EditIcon />
                                                    </IconButton>
                                                </Tooltip>
                                                <Tooltip title="Eliminar">
                                                    <IconButton aria-label="delete" color="error" onClick={() => handleDeleteProvider(row.id)}>
                                                        <DeleteIcon />
                                                    </IconButton>
                                                </Tooltip>
                                            </TableCell>
                                        </>
                                    )}
                                </TableRow>
                            ))}
                        </TableBody>
                    </Table>
                    <Box sx={{ display: 'flex', justifyContent: 'flex-start' }}>
                        <TablePagination
                            rowsPerPageOptions={[5]}
                            component="div"
                            count={totalCount}
                            rowsPerPage={rowsPerPage}
                            page={page}
                            onPageChange={(e, newPage) => setPage(newPage)}
                            onRowsPerPageChange={(e) => {
                                setRowsPerPage(parseInt(e.target.value, 10));
                                setPage(0);
                            }}
                        />
                    </Box>
                </TableContainer>
            </Box>
            <Modal
                open={openCommentsModal}
                onClose={handleCloseCommentsModal}
                aria-labelledby="modal-modal-title"
                aria-describedby="modal-modal-description"
            >
                <Box sx={{
                    display: 'flex',
                    justifyContent: 'center',
                    alignItems: 'center',
                    height: '100vh',
                }}>
                    <Card sx={{ maxWidth: 400 }}>
                        <CardContent>
                            <Typography variant="h5" component="div" sx={{ marginBottom: 2 }}>
                                Detalles del Proveedor
                            </Typography>
                            <Typography variant="body2" color="text.secondary" gutterBottom>
                                <strong>Nombre:</strong> {rows[selectedRowIndex] && rows[selectedRowIndex].name}
                            </Typography>
                            <Typography variant="body2" color="text.secondary" gutterBottom>
                                <strong>Teléfono:</strong> {rows[selectedRowIndex] && rows[selectedRowIndex].phoneNumber}
                            </Typography>
                            <Typography variant="body2" color="text.secondary" gutterBottom>
                                <strong>Dirección:</strong> {rows[selectedRowIndex] && rows[selectedRowIndex].address}
                            </Typography>
                            <Typography variant="body2" color="text.secondary" gutterBottom>
                                <strong>Comentarios:</strong> {rows[selectedRowIndex] && rows[selectedRowIndex].comments}
                            </Typography>
                            <Button variant="contained" onClick={handleCloseCommentsModal} style={{ marginTop: 2 }}>Cerrar</Button>
                        </CardContent>
                    </Card>
                </Box>
            </Modal>
            <Fab
                color="primary"
                aria-label="add"
                sx={{ position: 'absolute', bottom: 16, right: 16 }}
                onClick={handleOpenDialog}
            >
                <AddIcon />
            </Fab>
            <ProviderDialog
                open={openDialog}
                onClose={handleCloseDialog}
                addProviderToList={addProviderToList}
                providerId={providerId}
                updateProviderInfo={updateProviderInfo}
            />
        </Box>
    );
}

================
File: src/pages/Users/UserPage.jsx
================
import { useState } from 'react';
import {
  Container, Grid, Typography, Button, TextField, FormControl, InputLabel, Select, MenuItem,
  InputAdornment, IconButton, Alert
} from '@mui/material';
import dayjs from 'dayjs';
import { LocalizationProvider, DatePicker } from '@mui/x-date-pickers';
import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';
import VisibilityIcon from '@mui/icons-material/Visibility';
import VisibilityOffIcon from '@mui/icons-material/VisibilityOff';
import { createUserWithEmailAndPassword } from 'firebase/auth';
import { auth } from '../../services/Firebase/firebase';
import validateEmail from '../../util/EmailVerifier';
import { createUser } from '../../services/UserService';
import Person from '../../models/Person';
import User from '../../models/User';
import { useSnackbar } from '../../components/SnackbarContext';
export default function UserPage() {
  const [userData, setUserData] = useState({
    firstName: '',
    lastName: '',
    email: '',
    phoneNumber: '',
    address: '',
    birthDate: dayjs(),
    password: '',
    confirmPassword: '',
    active: 1,
    roleId: ''
  });
  const [passwordsMatch, setPasswordsMatch] = useState(true);
  const [showPasswords, setShowPasswords] = useState(false);
  const { openSnackbar } = useSnackbar(); // Usa el hook del Snackbar
  const handleDateChange = (newValue) => {
    setUserData({ ...userData, birthDate: newValue });
  };
  const handleInputChange = (event) => {
    const { name, value } = event.target;
    setUserData({ ...userData, [name]: value });
  };
  const handleConfirmPasswordBlur = () => {
    const arePasswordsMatching = userData.confirmPassword === userData.password;
    setPasswordsMatch(arePasswordsMatching);
  };
  const handleTogglePasswordVisibility = () => {
    setShowPasswords(!showPasswords);
  };
  const handlePhoneNumberChange = (event) => {
    let inputValue = event.target.value.replace(/\D/g, ''); // Elimina todos los caracteres que no sean números
    inputValue = inputValue.slice(0, 10); // Limita la longitud a 10 dígitos
    setUserData({ ...userData, phoneNumber: inputValue });
  };
  const handleSubmit = async () => {
    if (!validateEmail(userData.email)) {
      openSnackbar('El correo electrónico no es válido.', 'error');
      return;
    }
    try {
      const userCredential = await createUserWithEmailAndPassword(auth, userData.email, userData.password);
      const userId = userCredential.user.uid;
      const user = new User({
        id: userId,
        person: new Person({
          name: userData.firstName,
          lastName: userData.lastName,
          email: userData.email,
          phoneNumber: userData.phoneNumber,
          address: userData.address,
          birthDate: userData.birthDate.toISOString(),
          active: userData.active
        }),
        roleId: userData.roleId
      });
      await createUser(user);
      openSnackbar('¡Usuario creado correctamente!', 'success');
      setUserData({
        firstName: '',
        lastName: '',
        email: '',
        phoneNumber: '',
        address: '',
        birthDate: dayjs(),
        active: 1,
        password: '',
        confirmPassword: '',
        roleId: ''
      });
    } catch (error) {
      openSnackbar('Error al registrar usuario en Firebase.', 'error');
    }
  };
  const areAllFieldsComplete = () => {
    return Object.values(userData).every(value => value !== '') && passwordsMatch;
  };
  return (
    <Container style={{ display: 'flex', flexDirection: 'column', height: '100%', paddingTop: '10vh' }}>
      <Typography variant="h4" align="center" gutterBottom>Registro de usuario</Typography>
      <Grid container spacing={2}>
      <Grid item xs={12} sm={6}>
          <FormControl fullWidth>
            <TextField
              required
              name="firstName"
              label="Nombres"
              value={userData.firstName}
              onChange={handleInputChange}
            />
          </FormControl>
        </Grid>
        <Grid item xs={12} sm={6}>
          <FormControl fullWidth>
            <TextField
              name="lastName"
              label="Apellidos"
              value={userData.lastName}
              onChange={handleInputChange}
            />
          </FormControl>
        </Grid>
        <Grid item xs={12} sm={6}>
          <FormControl fullWidth style={{ width: '100%' }}>
            <LocalizationProvider dateAdapter={AdapterDayjs}>
              <DatePicker
                label="Fecha de nacimiento"
                value={userData.birthDate}
                onChange={handleDateChange}
                renderInput={(params) => (
                  <TextField
                    {...params}
                    type="text"
                    placeholder="Seleccione una fecha"
                    fullWidth
                  />
                )}
              />
            </LocalizationProvider>
          </FormControl>
        </Grid>
        <Grid item xs={12} sm={6}>
          <FormControl fullWidth>
            <TextField
              required
              name="phoneNumber"
              label="Teléfono"
              value={userData.phoneNumber}
              onChange={handlePhoneNumberChange}
            />
          </FormControl>
        </Grid>
        <Grid item xs={12} sm={6}>
          <FormControl fullWidth>
            <TextField
              name="address"
              label="Dirección"
              value={userData.address}
              onChange={handleInputChange}
            />
          </FormControl>
        </Grid>
        <Grid item xs={12} sm={6}>
          <FormControl fullWidth>
            <TextField
              required
              name="email"
              label="Email"
              value={userData.email}
              onChange={handleInputChange}
            />
          </FormControl>
        </Grid>
        <Grid item xs={12} sm={6}>
          <FormControl fullWidth>
            <TextField
              required
              name="password"
              label="Contraseña"
              type={showPasswords ? 'text' : 'password'}
              value={userData.password}
              onChange={handleInputChange}
              InputProps={{
                endAdornment: (
                  <InputAdornment position="end">
                    <IconButton onClick={handleTogglePasswordVisibility}>
                      {showPasswords ? <VisibilityOffIcon /> : <VisibilityIcon />}
                    </IconButton>
                  </InputAdornment>
                )
              }}
            />
          </FormControl>
        </Grid>
        <Grid item xs={12} sm={6}>
          <FormControl fullWidth>
            <TextField
              required
              name="confirmPassword"
              label="Confirmar Contraseña"
              type={showPasswords ? 'text' : 'password'}
              value={userData.confirmPassword}
              onChange={handleInputChange}
              onBlur={handleConfirmPasswordBlur}
              InputProps={{
                endAdornment: (
                  <InputAdornment position="end">
                    <IconButton onClick={handleTogglePasswordVisibility}>
                      {showPasswords ? <VisibilityOffIcon /> : <VisibilityIcon />}
                    </IconButton>
                  </InputAdornment>
                )
              }}
            />
            {!passwordsMatch && (
              <Alert
                sx={{ marginTop: '0.5rem' }}
                severity="error"
              >
                Las contraseñas no coinciden.
              </Alert>
            )}
          </FormControl>
        </Grid>
        <Grid item xs={12} sm={6}>
          <FormControl fullWidth>
            <InputLabel id="label" required>Selecciona Rol</InputLabel>
            <Select
              value={userData.roleId}
              onChange={handleInputChange}
              label="Seleccione una opción"
              name="roleId"
              fullWidth
            >
              <MenuItem value="1">Administrador</MenuItem>
              <MenuItem value="2">Empleado</MenuItem>
            </Select>
          </FormControl>
        </Grid>
        <Grid item xs={12}>
      </Grid>
        <Grid item xs={12} style={{ textAlign: 'end', marginTop: '16px' }}>
          <Button variant="contained" color="primary" onClick={handleSubmit} disabled={!areAllFieldsComplete()}>
            Registrar
          </Button>
        </Grid>
      </Grid>
    </Container>
  );
}

================
File: src/services/BrandService.js
================
import axios from './axiosConfig';
import Brand from "../models/Brand";
import CarModel from '../models/CarModel';
const getAllBrands = async (name = '') => {
  const result = await axios.get(`/brands?name=${name}`);
  return Array.isArray(result.response) ? result.response.map(brand => new Brand(brand)) : [];
};
const getCarModelsByBrandId = async (brandId) => {
  const result = await axios.get(`/brand/${brandId}/models`);
  return Array.isArray(result.response) ? result.response.map(model => new CarModel(model)) : [];
};
export { getAllBrands, getCarModelsByBrandId };

================
File: src/services/CarModelService.js
================
import axios from './axiosConfig';
import { ProductCarModel } from '../models/ProductCarModel';
import CarModel from '../models/CarModel';
const createCarModel = async(carModelData) => {
  const result = await axios.post('/model', carModelData);
  return result.statusCode === 201 ? new CarModel(result.response) : false;
}
const getCarModels = async(name = '') => {
  const result = await axios.get(`/models?name=${name}`);
  return Array.isArray(result.response) ? result.response.map(model => new CarModel(model)) : [];
}
const getVehicleModelRadiators = async (id) => {
  const result = await axios.get(`/model/${id}/radiators`);
  return Array.isArray(result.response) ? result.response.map(element => new ProductCarModel(element)) : [];
}
const getCarModelProducts = async (id, productTypeId, searchTerm) => {
  const result = await axios.get(`/model/${id}/products?productTypeId=${productTypeId}&searchTerm=${searchTerm}`);
  return result.response;
}
const getAllCarModelsProducts = async (productTypeId, searchTerm) => {
  const result = await axios.get(`/models/products?productTypeId=${productTypeId}&searchTerm=${searchTerm}`);
  return result.response;
}
const deleteCarModel = async (id) => {
  const result = await axios.delete(`/model/${id}`);
  return result.statusCode === 204;
}
export { createCarModel, getCarModels, getVehicleModelRadiators,
  getCarModelProducts, getAllCarModelsProducts, deleteCarModel};

================
File: src/services/Firebase/auth.js
================
import { signInWithEmailAndPassword} from 'firebase/auth';
import { auth } from './firebase';
import { getUser } from '../UserService';
export const signIn = async (email, password) => {
  try {
    const userCredential = await signInWithEmailAndPassword(
      auth,
      email,
      password
    );
    const user = await getUser(userCredential.user.uid);
    if (user) {
      const token = userCredential.user.accessToken;
      const userDataString = JSON.stringify(user);
      const userTokenString = JSON.stringify(token);
      localStorage.setItem("user", userDataString);
      localStorage.setItem("token", userTokenString);
    }
    return user;
  } catch (error) {
    console.log('Error in auth.js/signIn : ' + error);
    return false
  }
};

================
File: src/services/Firebase/firebase.js
================
import { initializeApp } from 'firebase/app';
import { getAuth } from 'firebase/auth';
const firebaseConfig = {
  apiKey: import.meta.env.VITE_APIKEY,
  authDomain: import.meta.env.VITE_AUTH_DOMAIN,
  projectId: import.meta.env.VITE_PROJECT_ID,
  storageBucket: import.meta.env.VITE_STORAGE_BUCKET,
  messagingSenderId: import.meta.env.VITE_MESSAGING_SENDER_ID,
  appId: import.meta.env.VITE_APP_ID,
};
export const app = initializeApp(firebaseConfig);
export const auth = getAuth(app);

================
File: src/services/Firebase/storage.js
================
import { getStorage, ref, getDownloadURL, uploadBytes } from 'firebase/storage';
import { app } from './firebase';
const storage = getStorage(app);
export const getImageURLFromStorage = async (path) => {
  const imageRef = ref(storage, path);
  try {
    const url = await getDownloadURL(imageRef);
    return url;
  } catch (error) {
    console.error("Error al obtener la imagen:", error);
    throw new Error("Error al obtener la imagen del storage");
  }
}
export const uploadImageToStorage = async (file, path) => {
  const imageRef = ref(storage, path);
  try {
    await uploadBytes(imageRef, file);
  } catch (error) {
    console.error("Error al subir la imagen:", error);
    throw new Error("Error al subir la imagen al storage");
  }
}
export const getBase64ImgFromURL = async (url) => {
  const response = await fetch(url);
  const blob = await response.blob();
  const base64String = await convertBlobToBase64(blob);
  return base64String;
}
const convertBlobToBase64 = (blob) => {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.readAsDataURL(blob);
    reader.onloadend = () => {
      const base64String = reader.result;
      resolve(base64String);
    };
    reader.onerror = reject;
  });
}

================
File: src/services/ProductService.js
================
import Product from "../models/Product";
import axiosInstance from "./axiosConfig";
const createProductVehicles = async (productId, productVehicleModels) => {
    const response = await axiosInstance.post(`/product/${productId}/models`, productVehicleModels);
    return response.data;
}
const createProductPrices = async (productId, productPrices) => {
    const response = await axiosInstance.post(`/product/${productId}/prices`, productPrices);
    return response.data;
}
const createProduct = async (product) => {
    const response = await axiosInstance.post(`/product`, product);
    return response.data;
}
const getProductPrices = async (productId) => {
    const response = await axiosInstance.get(`/product/${productId}/prices`);
    return response.data;
}
const getProductVehicleModels = async (productId) => {
    const response = await axiosInstance.get(`/product/${productId}/models`);
    return response.data;
}
const createProductFiles = async (productId, files) => {
    const response = await axiosInstance.post(`/product/${productId}/files`, files);
    return response.data;
}
const getProductById = async (productId) => {
    const result = await axiosInstance.get(`/product/${productId}`);
    return new Product(result.response);
}
const deleteProduct = async (productId) => {
    const response = await axiosInstance.delete(`/product/${productId}`);
    return response.statusCode === 204;
}
const updateProduct = async (productId, product) => {
    const response = await axiosInstance.put(`/product/${productId}`, product);
    return response.data;
}
export { createProductVehicles, createProductPrices, getProductPrices, updateProduct,
    getProductVehicleModels, createProductFiles, createProduct, getProductById, deleteProduct }

================
File: src/services/ProviderService.js
================
import axios from './axiosConfig';
import Provider from '../models/Provider';
const createProvider = async (providerData) => {
  const result = await axios.post('/provider', providerData);
  return result.response ? new Provider(result.response) : [];
}
const getProvider = async (id) => {
  const result = await axios.get(`/provider/${id}`);
  return result.response ? new Provider(result.response): []
}
const getAll = async(page, limit) => {
  const result = await axios.get(`/providers`, {
    params: {
      page:page,
      limit:limit
    }
  })
  const { providers ,totalCount } = result.response;
  const mappedProviders = providers.map(provider => new Provider({ ...provider }));
  return result.response && Array.isArray(result.response.providers) ? { providers: mappedProviders, totalCount } : [];
}
const deleteProvider = async(id) => {
  const result = await axios.delete(`/provider/${id}`);
  return result.statusCode === 204 ? true : false;
}
const updateProvider = async(id, updatedData) => {
  const result = await axios.put(`/provider/${id}`, updatedData);
  return result.statusCode === 204 ? true : false;
}
export { createProvider, getProvider, getAll, deleteProvider, updateProvider };

================
File: src/services/RadiatorService.js
================
import axios from './axiosConfig';
import Radiator from "../models/Radiator.js";
import Product from '../models/Product.js';
import { createProductPrices, createProductVehicles } from './ProductService.js';
const getAllRadiators = async (name = '') => {
    const result = await axios.get('/radiators', {
        params: { name }
    });
    return Array.isArray(result.response)
        ? result.response.map(radiatorData => {
            const productData = radiatorData.product;
            const product = new Product(productData);
            return new Radiator({...radiatorData, product});
          })
        : [];
};
const createRadiator = async (radiatorData) => {
    const result = await axios.post('/radiator', radiatorData);
    const productData = result.response.product;
    const product = new Product(productData);
    return new Radiator({...result.response, product});
};
const processRadiatorData = async (radiatorData, vehicleModels, prices) => {
    if (!radiatorData) {
        throw new Error('Missing required data');
    }
    const createdRadiator = await createRadiator(radiatorData);
    if (!createdRadiator || !createdRadiator.product || !createdRadiator.product.id) {
        throw new Error('Failed to create radiator');
    }
    const { id } = createdRadiator.product;
    if (vehicleModels) {
        await createProductVehicles(id, vehicleModels);
    }
    if (prices) {
        await createProductPrices(id, prices);
    }
    return createdRadiator;
}
export { getAllRadiators, processRadiatorData};

================
File: src/services/UserService.js
================
import axios from './axiosConfig';
import User from '../models/User';
export const createUser = async(userData) => {
  const result = await axios.post('/user', userData);
  return result.response ? new User(result.response) : [];
}
export const getUser = async(id) => {
  const result = await axios.get(`/user/${id}`);
  return result.response ? new User(result.response) : [];
}

================
File: src/services/axiosConfig.js
================
import axios from 'axios';
const axiosInstance = axios.create({
  baseURL: import.meta.env.VITE_API_REFA_BASE_PATH,
});
axiosInstance.interceptors.response.use(
  response => {
    return {
      errorMessage: '',
      statusCode: response.status,
      response: response.data
    };
  },
  error => {
    // Inicializa valores predeterminados para el objeto de error
    let errorMessage = 'Ocurrió un error inesperado';
    let statusCode = error.response ? error.response.status : 500;
    if (error.response) {
      switch (error.response.status) {
        case 400:
          errorMessage = 'Solicitud incorrecta.';
          break;
        case 401:
          errorMessage = 'No autorizado. Por favor, inicia sesión de nuevo.';
          break;
        case 404:
          errorMessage = 'El recurso solicitado no fue encontrado.';
          break;
        case 500:
          errorMessage = 'Error interno del servidor.';
          break;
        default:
          errorMessage = error.response.data.message || errorMessage;
      }
    } else if (error.request) {
      errorMessage = 'No se recibió respuesta del servidor.';
    } else {
      errorMessage = error.message;
    }
    return Promise.reject({
      errorMessage,
      statusCode,
      response: error.response ? error.response.data : null
    });
  }
);
export default axiosInstance;

================
File: src/styles/brandContainer.css
================
.fade-enter {
    opacity: 0;
  }
  .fade-enter-active {
    opacity: 1;
    transition: opacity 300ms ease-in-out;
  }

================
File: src/styles/utils/drawerFunctions.jsx
================
const drawerWidth = 240;
export const openedMixin = (theme) => ({
  width: drawerWidth,
  transition: theme.transitions.create('width', {
    easing: theme.transitions.easing.sharp,
    duration: theme.transitions.duration.enteringScreen,
  }),
  overflowX: 'hidden',
});
export const closedMixin = (theme) => ({
  transition: theme.transitions.create('width', {
    easing: theme.transitions.easing.sharp,
    duration: theme.transitions.duration.leavingScreen,
  }),
  overflowX: 'hidden',
  width: `calc(${theme.spacing(7)} + 1px)`,
  [theme.breakpoints.up('sm')]: {
    width: `calc(${theme.spacing(8)} + 1px)`,
  },
});
export default { openedMixin, closedMixin }

================
File: src/util/EmailVerifier.js
================
function validateEmail(email) {
    let regex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
    return regex.test(email);
}
export default validateEmail;

================
File: src/util/generalUtils.js
================
export function modifyAndClone(obj, path, value) {
  const clone = JSON.parse(JSON.stringify(obj));
  const keys = path.split('.');
  let current = clone;
  for (let i = 0; i < keys.length - 1; i++) {
    const key = keys[i];
    if (current[key] === undefined || typeof current[key] !== 'object') {
      current[key] = {};
    }
    current = current[key];
  }
  current[keys[keys.length - 1]] = value;
  return clone;
}
export function getMimeType(base64String) {
  const matches = base64String.match(/^data:([a-zA-Z0-9]+\/[a-zA-Z0-9-.+]+);base64,/);
  if (matches && matches.length > 1) {
      return matches[1];
  }
  return null;
}
export const base64ToBlob = (base64) => {
  let mimeType = getMimeType(base64);
  const byteCharacters = atob(base64.split(',')[1]);
  const byteArrays = [];
  const sliceSize = 512;
  for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {
    const slice = byteCharacters.slice(offset, offset + sliceSize);
    const byteNumbers = new Array(slice.length);
    for (let i = 0; i < slice.length; i++) {
      byteNumbers[i] = slice.charCodeAt(i);
    }
    const byteArray = new Uint8Array(byteNumbers);
    byteArrays.push(byteArray);
  }
  const blob = new Blob(byteArrays, { type: mimeType });
  return blob;
}

================
File: src/util/userConstants.js
================
export const ROLES = {
    ADMIN: 'ADMINISTRADOR',
    EMPLOYEE: 'ASISTENTE'
}

================
File: vite.config.js
================
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
export default defineConfig({
  plugins: [react()],
})
